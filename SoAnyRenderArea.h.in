/**************************************************************************
 *
 *  Copyright (C) 2000 by Systems in Motion.  All rights reserved.
 *
 *  This file is part of the Coin library.
 *
 *  This file may be distributed under the terms of the Q Public License
 *  as defined by Troll Tech AS of Norway and appearing in the file
 *  LICENSE.QPL included in the packaging of this file.
 *
 *  If you want to use Coin in applications not covered by licenses
 *  compatible with the QPL, you can contact SIM to aquire a
 *  Professional Edition license for Coin.
 *
 *  Systems in Motion AS, Prof. Brochs gate 6, N-7030 Trondheim, NORWAY
 *  http://www.sim.no/ sales@sim.no Voice: +47 22114160 Fax: +47 67172912
 *
 **************************************************************************/

//  $Id$

#ifndef SO@uGUI@_RENDERAREA_H
#define SO@uGUI@_RENDERAREA_H

/**************************************************************************\
 *
 *  A WORD OF ADVICE
 *
 *  It is fruitless to modify the contents of the So@GUI@RenderArea.h file
 *  because it is autogenerated by configure from the SoAnyRenderArea.h.in
 *  file which you will find in the src/Inventor/@GUI@/common/ directory.
 *  Do your modifications to that file instead.
 *
\**************************************************************************/

#include <Inventor/SbColor.h>
#include <Inventor/SbViewportRegion.h>
#include <Inventor/actions/SoGLRenderAction.h>
// This include is present for compliance with the original Open
// Inventor.
#include <Inventor/SoSceneManager.h>

#include <Inventor/@GUI@/So@GUI@GLWidget.h>

class SbColor;
class SoNode;
class SoSelection;
class SoSceneManager;

class So@GUI@Device;
class So@GUI@Keyboard;
class So@GUI@Mouse;

// *************************************************************************

typedef SbBool So@GUI@RenderAreaEventCB( void * user, @EVENT@ event );

class So@GUI@RenderArea : public So@GUI@GLWidget {
  typedef So@GUI@GLWidget inherited;

  @COMPONENTHEADER@

public:
  So@GUI@RenderArea( @WIDGET@ parent = NULL, const char * name = NULL,
      SbBool inParent = TRUE, SbBool mouseInput = TRUE,
      SbBool keyboardInput = TRUE );
  ~So@GUI@RenderArea(void);

  virtual void setSceneGraph( SoNode * scene );
  virtual SoNode * getSceneGraph(void);
  void setOverlaySceneGraph( SoNode * scene );
  SoNode * getOverlaySceneGraph(void);
  void registerDevice( So@GUI@Device * device );
  void unregisterDevice( So@GUI@Device * device );
  void setBackgroundColor( const SbColor & color );
  const SbColor & getBackgroundColor(void) const;
  void setBackgroundIndex( int idx );
  int getBackgroundIndex(void) const;
  void setOverlayBackgroundIndex( int idx );
  int getOverlayBackgroundIndex(void) const;
  void setColorMap( int start, int num, const SbColor * colors );
  void setOverlayColorMap( int start, int num, const SbColor * colors );
  void setViewportRegion( const SbViewportRegion & newRegion );
  const SbViewportRegion & getViewportRegion(void) const;
  void setTransparencyType( SoGLRenderAction::TransparencyType type );
  SoGLRenderAction::TransparencyType getTransparencyType(void) const;
  void setAntialiasing( SbBool smoothing, int numPasses );
  void getAntialiasing( SbBool & smoothing, int & numPasses ) const;
  void setClearBeforeRender( SbBool enable, SbBool zbEnable = TRUE );
  SbBool isClearBeforeRender(void) const;
  SbBool isClearZBufferBeforeRender(void) const;
  void setClearBeforeOverlayRender( SbBool enable );
  SbBool isClearBeforeOverlayRender(void) const;
  void setAutoRedraw( SbBool enable );
  SbBool isAutoRedraw(void) const;
  void setRedrawPriority( uint32_t priority );
  uint32_t getRedrawPriority(void) const;
  static uint32_t getDefaultRedrawPriority(void);
  void render(void);
  void renderOverlay(void);
  void scheduleRedraw(void);
  void scheduleOverlayRedraw(void);
  void redrawOnSelectionChange( SoSelection * selection );
  void redrawOverlayOnSelectionChange( SoSelection * selection );
  void setEventCallback( So@GUI@RenderAreaEventCB * func, void * user = NULL );
  void setSceneManager( SoSceneManager * manager );
  SoSceneManager * getSceneManager(void) const;
  void setOverlaySceneManager( SoSceneManager * manager );
  SoSceneManager * getOverlaySceneManager(void) const;
  void setGLRenderAction( SoGLRenderAction * action );
  SoGLRenderAction * getGLRenderAction(void) const;
  void setOverlayGLRenderAction( SoGLRenderAction * action );
  SoGLRenderAction * getOverlayGLRenderAction(void) const;

protected:
  So@GUI@RenderArea( @WIDGET@ parent, const char * name, SbBool inParent,
      SbBool mouseInput, SbBool keyboardInput, SbBool build );

  virtual void redraw(void);
  virtual void actualRedraw(void);
  virtual void redrawOverlay(void);
  virtual void actualOverlayRedraw(void);

  virtual void processEvent( @EVENT@ event );
  virtual void initGraphic(void);
  virtual void initOverlayGraphic(void);
  virtual void sizeChanged( const SbVec2s size );
  virtual void widgetChanged( @WIDGET@ widget );

  @WIDGET@ buildWidget( @WIDGET@ parent );
  virtual const char * getDefaultWidgetName(void) const;
  virtual const char * getDefaultTitle(void) const;
  virtual const char * getDefaultIconTitle(void) const;

  So@GUI@RenderAreaEventCB * appEventHandler;
  void * appEventHandlerData;

  SbBool invokeAppCB( @EVENT@ event );

  virtual void glReshape( int width, int height );
  virtual void glRender(void);
  virtual void glInit(void);

private:
  void constructor( SbBool mouseInput, SbBool keyboardInput );
  static void renderCB( void * user, SoSceneManager * manager );

  SbBool clear;
  SbBool clearZBuffer;
  SbBool clearOverlay;

  SoSceneManager * normalManager;
  SoSceneManager * overlayManager;

  SbColor * normalColormap;
  int normalColormapSize;
  int normalColormapStart;
  SbColor * overlayColormap;
  int overlayColormapSize;
  int overlayColormapStart;

  struct {
    So@GUI@Keyboard * keyboard;
    So@GUI@Mouse * mouse;
    SbPList * extra;
  } devices;

  SbBool autoRedraw;

  SoSelection * normalSelection;
  SoSelection * overlaySelection;

}; // class So@GUI@RenderArea

// *************************************************************************

#endif // ! SO@uGUI@_RENDERAREA_H
