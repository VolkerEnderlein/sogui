/**************************************************************************
 *
 *  This file is part of the Coin SoQt GUI binding library.
 *  Copyright (C) 1998-2001 by Systems in Motion.  All rights reserved.
 *
 *  This library is free software; you can redistribute it and/or modify
 *  it under the terms of the GNU Lesser General Public License version
 *  2.1 as published by the Free Software Foundation.  See the file
 *  LICENSE.LGPL at the root directory of the distribution for all the
 *  details.
 *
 *  If you want to use Coin SoQt for applications not compatible with the
 *  LGPL, please contact SIM to acquire a Professional Edition License.
 *
 *  Systems in Motion, Prof Brochs gate 6, N-7030 Trondheim, NORWAY
 *  http://www.sim.no/ support@sim.no Voice: +47 22114160 Fax: +47 22207097
 *
 **************************************************************************/

/* $Id$ */

#ifndef SO@GUI@_INTERNALDEFS_H
#define SO@GUI@_INTERNALDEFS_H

/* ********************************************************************** */

#ifdef __FILE__
#define SO@GUI@_STUB_FILE __FILE__
#else
// FIXME: avoid this case by redefining the compilation rules to define the
// current filename in some variable.  [20010919 larsa]
#define SO@GUI@_STUB_FILE ((char *)0L)
#endif

#ifdef __LINE__
#define SO@GUI@_STUB_LINE __LINE__
#else
#define SO@GUI@_STUB_LINE 0
#endif

#if HAVE_VAR___PRETTY_FUNCTION__
#define SO@GUI@_STUB_FUNC __PRETTY_FUNCTION__
#else
#if HAVE_VAR___FUNCTION__
#define SO@GUI@_STUB_FUNC __FUNCTION__
#else
#define SO@GUI@_STUB_FUNC ((char *)0L)
#endif
#endif

#if SO@GUI@_DEBUG

#include <stdio.h> // sprintf()
#include <Inventor/errors/SoDebugError.h>

/*
  This stupid thing is here to silence some compilers that complain on
  constant if-expressions.
*/

inline int so@gui@_not_null(const void * arg) { return (arg != NULL) ? 1 : 0; }

/*
  SO@GUI@_STUB(): a macro that prints out stub information.
  Used where there is functionality missing.
*/

#define SO@GUI@_STUB() \
  do { \
    char identifier[80]; \
    sprintf(identifier, "%s:%u [%s]", \
      so@gui@_not_null(SO@GUI@_STUB_FILE) ? SO@GUI@_STUB_FILE : "", \
      so@gui@_not_null((void *)SO@GUI@_STUB_LINE) ? SO@GUI@_STUB_LINE : 0, \
      so@gui@_not_null(SO@GUI@_STUB_FUNC) ? SO@GUI@_STUB_FUNC : ""); \
    SoDebugError::postWarning(identifier, \
                              "STUB: functionality not yet completed"); \
  } while (0)

/*
  SO@GUI@_STUB_ONCE(): a macro that prints out stub information, but only on
  the first pass.  Used where there is functionality missing that may be
  called hundreds of times.
*/

#define SO@GUI@_STUB_ONCE() \
  do { \
    static int first = 1; \
    if ( first ) { \
      char identifier[80]; \
      first = 0; \
      sprintf(identifier, "%s:%u [%s]", \
        so@gui@_not_null(SO@GUI@_STUB_FILE) ? SO@GUI@_STUB_FILE : "", \
        so@gui@_not_null((void *)SO@GUI@_STUB_LINE) ? SO@GUI@_STUB_LINE : 0, \
        so@gui@_not_null(SO@GUI@_STUB_FUNC) ? SO@GUI@_STUB_FUNC : ""); \
      SoDebugError::postWarning(identifier, \
                                "STUB: functionality not yet completed " \
                                "(first and last warning)"); \
    } \
  } while (0)

/*
  SO@GUI@_OBSOLETED(): a macro that prints out information about an obsoleted
  function still being in use.
*/

#define SO@GUI@_OBSOLETED() \
  do { \
    char identifier[80]; \
    sprintf(identifier, "%s:%u [%s]", \
      so@gui@_not_null(SO@GUI@_STUB_FILE) ? SO@GUI@_STUB_FILE : "", \
      so@gui@_not_null((void *)SO@GUI@_STUB_LINE) ? SO@GUI@_STUB_LINE : 0, \
      so@gui@_not_null(SO@GUI@_STUB_FUNC) ? SO@GUI@_STUB_FUNC : ""); \
    SoDebugError::post(identifier, \
                       "OBSOLETED: functionality no longer supported"); \
  } while (0)

#else /* !SO@GUI@_DEBUG */

/* snub the stubs */
#define SO@GUI@_STUB()      do { } while (0)
#define SO@GUI@_STUB_ONCE() do { } while (0)
#define SO@GUI@_OBSOLETED() do { } while (0)

#endif /* !SO@GUI@_DEBUG */

/*
  GETTEXT support
*/

#if defined(ENABLE_NLS) && defined(HAVE_GETTEXT)
#include <libintl.h>
#define _(String) dgettext (PACKAGE, String)
#define N_(String) (String)
#else
#define _(String) (String)
#define N_(String) (String)
#define textdomain(Domain)
#define bindtextdomain(Package, Directory)
#endif /* HAVE_GETTEXT && ENABLE_NLS */

/* ********************************************************************** */

#endif /* ! SO@GUI@_INTERNALDEFS_H */
