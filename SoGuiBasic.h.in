/**************************************************************************\
 *
 *  This file is part of the Coin GUI toolkit libraries.
 *  Copyright (C) 1998-2002 by Systems in Motion.  All rights reserved.
 *
 *  This library is free software; you can redistribute it and/or
 *  modify it under the terms of the GNU Lesser General Public License
 *  version 2.1 as published by the Free Software Foundation.  See the
 *  file LICENSE.LGPL at the root directory of this source distribution
 *  for more details.
 *
 *  If you want to use this library with software that is incompatible
 *  licensewise with the LGPL, and / or you would like to take
 *  advantage of the additional benefits with regard to our support
 *  services, please contact Systems in Motion about acquiring a Coin
 *  Professional Edition License.  See <URL:http://www.coin3d.org> for
 *  more information.
 *
 *  Systems in Motion, Prof Brochs gate 6, 7030 Trondheim, NORWAY
 *  <URL:http://www.sim.no>, <mailto:support@sim.no>
 *
\**************************************************************************/

// @configure_input@

#ifndef SO@GUI@_BASIC_H
#define SO@GUI@_BASIC_H

// *************************************************************************

/* Some useful inline template functions (instead of macros):
 *   So@Gui@Min(Val1, Val2)       - returns minimum value
 *   So@Gui@Max(Val1, Val2)       - returns maximum value
 *   So@Gui@Clamp(Val, Min, Max)  - returns clamped value
 *   So@Gui@Swap(Val1, Val2)      - swaps the two values (no return value)
 *
 * FIXME: write Doxygen doc for these methods. 20010810 mortene.
 */

template <class Type>
inline Type So@Gui@Abs(Type Val) {
  return (Val < 0) ? -Val : Val;
}

template <class Type>
inline Type So@Gui@Min(Type a, Type b) {
  return (b < a) ? b : a;
}

template <class Type>
inline Type So@Gui@Max(Type a, Type b) {
  return (b > a) ? b : a;
}

template <class Type>
inline Type So@Gui@Clamp(Type val, Type min, Type max) {
  return So@Gui@Max(min, So@Gui@Min(max, val));
}

template <class Type>
inline void So@Gui@Swap(Type & a, Type & b) {
  Type t = a; a = b; b = t;
}

// *************************************************************************

#define __COIN_SO@GUI@__

#if ! defined(SO@GUI@_MAJOR_VERSION)
#undef SO@GUI@_MAJOR_VERSION
#endif /* ! SO@GUI@_MAJOR_VERSION */
#if ! defined(SO@GUI@_MINOR_VERSION)
#undef SO@GUI@_MINOR_VERSION
#endif /* ! SO@GUI@_MINOR_VERSION */
#if ! defined(SO@GUI@_MICRO_VERSION)
#undef SO@GUI@_MICRO_VERSION
#endif /* ! SO@GUI@_MICRO_VERSION */
#if ! defined(SO@GUI@_VERSION)
#undef SO@GUI@_VERSION
#endif /* ! SO@GUI@_VERSION */

// *************************************************************************

/* Precaution to avoid an error easily made by the application programmer. */
#ifdef SO@GUI@_DLL_API
# error Leave the internal SO@GUI@_DLL_API define alone.
#endif /* SO@GUI@_DLL_API */

/*
  On MSWindows platforms, one of these defines must always be set when
  building application programs:

   - "SO@GUI@_DLL", when the application programmer is using the
     library in the form of a dynamic link library (DLL)

   - "SO@GUI@_NOT_DLL", when the application programmer is using the
     library in the form of a static object library (LIB)

  Note that either SO@GUI@_DLL or SO@GUI@_NOT_DLL _must_ be defined by
  the application programmer on MSWindows platforms, or else the
  #error statement will hit. Set up one or the other of these two
  defines in your compiler environment according to how the library
  was built -- as a DLL (use "SO@GUI@_DLL") or as a LIB (use
  "SO@GUI@_NOT_DLL").

  (Setting up defines for the compiler is typically done by either
  adding something like "/DSO@GUI@_DLL" to the compiler's argument
  line (for command-line build processes), or by adding the define to
  the list of preprocessor symbols in your IDE GUI (in the MSVC IDE,
  this is done from the "Project"->"Settings" menu, choose the "C/C++"
  tab, then "Preprocessor" from the dropdown box and add the
  appropriate define)).

  It is extremely important that the application programmer uses the
  correct define, as using "SO@GUI@_NOT_DLL" when "SO@GUI@_DLL" is
  correct is likely to cause mysterious crashes.
 */
#if defined(WIN32) || defined(_WIN32) || defined(__WIN32__) || defined(__NT__)
# ifdef SO@GUI@_INTERNAL
#  ifdef SO@GUI@_MAKE_DLL
#   define SO@GUI@_DLL_API __declspec(dllexport)
#  endif /* SO@GUI@_MAKE_DLL */
# else /* !SO@GUI@_INTERNAL */
#  ifdef SO@GUI@_DLL
#   define SO@GUI@_DLL_API __declspec(dllimport)
#  else /* !SO@GUI@_DLL */
#   ifndef SO@GUI@_NOT_DLL
#    error Define either SO@GUI@_DLL or SO@GUI@_NOT_DLL as appropriate for your linkage! See Inventor/@Gui@/So@Gui@Basic.h for further instructions.
#   endif /* SO@GUI@_NOT_DLL */
#  endif /* !SO@GUI@_DLL */
# endif /* !SO@GUI@_MAKE_DLL */
#endif /* Microsoft Windows */

/* Empty define to avoid errors when _not_ compiling an MSWindows DLL. */
#ifndef SO@GUI@_DLL_API
# define SO@GUI@_DLL_API
#endif /* !SO@GUI@_DLL_API */

// *************************************************************************
// These sanity checks are designed to detect common pitfall errors for
// Microsoft Windows linkage with So@Gui@ and Coin.

enum So@Gui@ABIType {
  SO@GUI@_DLL_ABI, SO@GUI@_LIB_ABI, SO@GUI@_UNKNOWN_ABI };

enum So@Gui@ABIError {
  SO@GUI@_LINKTIME_MISMATCH, SO@GUI@_LINKSTYLE_MISMATCH,
  SO@GUI@_RUNTIME_MISMATCH };

// FIXME: use an "is-this-a-DLL-capable-platform" configure check
// and remove the system "#if defined" tests below. 20011203 mortene.
// FIXME: I disabled this because it wasn't inlined in the client app
// but compiled into the library by MSVC++ and with SOWIN_DLL undefined,
// the ABI test always tried the LIB_ABI path.  20020126 larsa
#if 0 && (defined(WIN32) || defined(_WIN32) || defined(__WIN32__) || defined(__NT__))
#define SO@GUI@_SANITY_CHECK(forward_call)                  \
  if (So@Gui@::isDebugLibrary() &&                       \
       SoDB::isInitialized())                          \
    SoDebugError::postWarning("So@Gui@::init",            \
      "unable to verify application linkage sanity "    \
      "because Open Inventor has already been "         \
      "initialized before So@Gui@::init call");           \
  SO@GUI@_RUNTIME_SANITY_CHECK();                         \
  SO@GUI@_LINKSTYLE_SANITY_CHECK();                       \
  forward_call;                                         \
  SO@GUI@_LINKTIME_SANITY_CHECK()

#define SO@GUI@_RUNTIME_SANITY_CHECK()                    \
  do {                                                  \
    if (!So@Gui@::isCompatible(SO@GUI@_MAJOR_VERSION,      \
                            SO@GUI@_MINOR_VERSION))      \
      So@Gui@::abort(SO@GUI@_RUNTIME_MISMATCH);             \
  } while (FALSE)

#ifdef SO@GUI@_DLL
#define SO@GUI@_LINKSTYLE_SANITY_CHECK()                  \
  do {                                                  \
    if (So@Gui@::getABIType() != SO@GUI@_DLL_ABI)         \
      So@Gui@::abort(SO@GUI@_LINKSTYLE_MISMATCH);           \
  } while (FALSE)
#else
#define SO@GUI@_LINKSTYLE_SANITY_CHECK()                  \
  do {                                                  \
    if (So@Gui@::getABIType() != SO@GUI@_LIB_ABI)         \
      So@Gui@::abort(SO@GUI@_LINKSTYLE_MISMATCH);           \
  } while (FALSE)
#endif

#define SO@GUI@_LINKTIME_SANITY_CHECK()                   \
  do {                                                  \
    if (!SoDB::isInitialized())                       \
      So@Gui@::abort(SO@GUI@_LINKTIME_MISMATCH);            \
  } while (FALSE)
#else /* ! MS Windows */
#define SO@GUI@_SANITY_CHECK(forward_call)                \
  forward_call
#endif /* ! MS Windows */

// *************************************************************************

#endif // ! SO@GUI@_BASIC_H
