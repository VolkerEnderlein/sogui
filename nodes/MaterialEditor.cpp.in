/**************************************************************************\
 *
 *  This file is part of the Coin family of 3D visualization libraries.
 *  Copyright (C) 1998-2002 by Systems in Motion.  All rights reserved.
 *
 *  This library is free software; you can redistribute it and / or
 *  modify it under the terms of the GNU General Public License
 *  version 2 as published by the Free Software Foundation.  See the
 *  file LICENSE.GPL at the root directory of this source distribution
 *  for more details.
 *
 *  If you desire to use this library in software that is incompatible
 *  with the GNU GPL, and / or you would like to take advantage of the
 *  additional benefits with regard to our support services, please
 *  contact Systems in Motion about acquiring a Coin Professional
 *  Edition License.  See <URL:http://www.coin3d.org> for more
 *  information.
 *
 *  Systems in Motion, Prof Brochs gate 6, 7030 Trondheim, NORWAY
 *  <URL:http://www.sim.no>, <mailto:support@sim.no>
 *
\**************************************************************************/

#include <assert.h>

#include <Inventor/nodes/SoMaterial.h>

#include <Inventor/@Gui@/SoAny.h>
#include <Inventor/@Gui@/nodes/SoGuiPane.h>
#include <Inventor/@Gui@/nodes/SoGuiSceneTexture2.h>
#include <Inventor/@Gui@/nodes/SoGuiMaterialEditor.h>

// *************************************************************************

class MaterialEditor {
public:
  MaterialEditor(void);

  SoGuiMaterialEditor * api;

  static const char * texturescene[];
  static const char * editorscene[];
};

// *************************************************************************

#define PRIVATE(obj) ((MaterialEditor *) ((SoGuiMaterialEditor *) obj)->internals)

void
SoGuiMaterialEditor::initClass(void)
{
  SO_KIT_INIT_CLASS(SoGuiMaterialEditor, SoBaseKit, SoBaseKit);
}

SO_KIT_SOURCE(SoGuiMaterialEditor);

SoGuiMaterialEditor::SoGuiMaterialEditor(void)
{
  PRIVATE(this) = new MaterialEditor;
  PRIVATE(this)->api = this;

  SO_KIT_CONSTRUCTOR(SoGuiMaterialEditor); 

  SO_KIT_ADD_FIELD(material, (NULL));
  SO_KIT_ADD_FIELD(update, (CONTINUOUS));
      
  SO_KIT_DEFINE_ENUM_VALUE(Update, CONTINUOUS);
  SO_KIT_DEFINE_ENUM_VALUE(Update, AFTER_ACCEPT);

  SO_KIT_SET_SF_ENUM_TYPE(update, Update);

  SO_KIT_ADD_CATALOG_ENTRY(root, SoGuiPane, TRUE, this, "", FALSE);

  SO_KIT_INIT_INSTANCE(); 

  SoNode * scene = SoAny::loadSceneGraph(MaterialEditor::editorscene);
  assert(scene != NULL);
  assert(scene->isOfType(SoGuiPane::getClassTypeId()));
  scene->ref();

  SoGuiSceneTexture2 * spheretexture =
    (SoGuiSceneTexture2 *) SoAny::scanSceneForName(scene, "spheretexture");
  assert(spheretexture != NULL);

  // initialize sliders

  scene->unrefNoDelete();
  this->setAnyPart("root", scene);

  SoNode * texturescene = SoAny::loadSceneGraph(MaterialEditor::texturescene);
  assert(texturescene != NULL);
  texturescene->ref();
  SoMaterial * material = (SoMaterial *) SoAny::scanSceneForName(texturescene, "material");
  assert(material);

  spheretexture->scene.setValue(texturescene);

  texturescene->unrefNoDelete();

  // sensors
}

SoGuiMaterialEditor::~SoGuiMaterialEditor(void)
{
  MaterialEditor * obj = PRIVATE(this);
  delete obj;
}

#undef PRIVATE

// *************************************************************************
// MaterialEditor
// *************************************************************************

#define PUBLIC(obj) (((MaterialEditor *) obj)->api)

// +--------------------------------------------------------------------+
// |                   |  o x  Ambient    |======================| 0.00 |
// |                   |  o x  Diffuse    |======================| 0.00 |
// |                   |  o x  Specular   |======================| 0.00 |
// |                   |  o x  Emissive   |======================| 0.00 |
// |                   |                                                |
// |                   |       Shininess  |======================| 0.00 |
// |                   |       Transp     |======================| 0.00 |
// +--------------------------------------------------------------------+

const char *
MaterialEditor::texturescene[] =
{
  "#Inventor V2.1 ascii",
  "",
  "Separator {",
  "  OrthographicCamera {",
  "    position 0 0 2",
  "    nearDistance 1",
  "    farDistance 3",
  "    height 2",
  "  }",
  "  LightModel {",
  "    model BASE_COLOR",
  "  }",
  "  BaseColor {",
  "    rgb [",
  "      0.3 0.3 0.3,",
  "      0.6 0.6 0.6,",
  "      0.6 0.6 0.6,",
  "      0.3 0.3 0.3",
  "    ]",
  "  }",
  "  MaterialBinding {",
  "    value PER_FACE",
  "  }",
  "  Coordinate3 {",
  "    point [",
  "      -3  3  0,",
  "       0  3  0,",
  "       3  3  0,",
  "      -3  0  0,",
  "       0  0  0,",
  "       3  0  0,",
  "      -3 -3  0,",
  "       0 -3  0,",
  "       3 -3  0",
  "    ]",
  "  }",
  "  QuadMesh {",
  "    verticesPerColumn 3",
  "    verticesPerRow 3",
  "  }",
  "  LightModel {",
  "    model PHONG",
  "  }",
  "  DirectionalLight {",
  "    direction 0.556 -0.623 -0.551",
  "  }",
  "  DirectionalLight {",
  "    direction -0.556 -0.623 -0.551",
  "  }",
  "  DEF material Material { }",
  "  Complexity {",
  "    value 0.8",
  "  }",
  "  Sphere {",
  "    radius 0.85",
  "  }",
  "}",
  NULL
};

const char *
MaterialEditor::editorscene[] =
{
  "#Inventor V2.1 ascii",
  "",
  "DEF pane SoGuiPane {",
  "  worldSize 1 1 0",
  "  objectSize 400 300 0",
  "  Separator {",
  "    DEF spheretexture SoGuiSceneTexture2 { }",
  "    Coordinate3 {",
  "      point [",
  "         10  10 0,",
  "        290  10 0,",
  "        290 290 0,",
  "         10 290 0",
  "      ]",
  "    }",
  "    TextureCoordinate2 {",
  "      point [",
  "        0 0, 1 0, 1 1, 0 1",
  "      ]",
  "    }",
  "    IndexedFaceSet {",
  "      coordIndex [",
  "        0 1 2 -1",
  "        0 2 3 -1",
  "      ]",
  "      textureCoordIndex [",
  "        0 1 2 -1",
  "        0 2 3 -1",
  "      ]",
  "    }",
  "  }", // 
  "  SoGuiPosition {",
  "    position 300 10 0",
  "  }",
  "  DEF button1 SoGuiRadioButton {",
  "    size 10 10 0",
  "    on FALSE",
  "    = DEF buttons SoGuiRadioGroup {",
  "      in0 FALSE = USE button1.on",
  "      in1 FALSE = DEF button2 SoGuiRadioButton { size 10 10 0 on FALSE = USE buttons.out1 } . on",
  "      in2 FALSE = DEF button3 SoGuiRadioButton { size 10 10 0 on FALSE = USE buttons.out2 } . on",
  "    } . out0",
  "  }",
  "  SoGuiFrame {",
  "    size 0 0 0 = USE button1.size",
  "    complement FALSE = USE button1.on",
  "  }",
  "  SoGuiPosition { position 300 30 0 }",
  "  USE button2",
  "  SoGuiFrame {",
  "    size 0 0 0 = USE button2.size",
  "    complement FALSE = USE button2.on",
  "  }",
  "  SoGuiPosition { position 300 50 0 }",
  "  USE button3",
  "  SoGuiFrame {",
  "    size 0 0 0 = USE button3.size",
  "    complement FALSE = USE button3.on",
  "  }",
  "}",
  NULL
};

MaterialEditor::MaterialEditor(void)
{
  this->api = NULL;
}

#undef PUBLIC

// *************************************************************************
