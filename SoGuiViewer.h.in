/**************************************************************************\
 *
 *  Copyright (C) 1998-2000 by Systems in Motion.  All rights reserved.
 *
 *  This file is part of the Coin library.
 *
 *  This file may be distributed under the terms of the Q Public License
 *  as defined by Troll Tech AS of Norway and appearing in the file
 *  LICENSE.QPL included in the packaging of this file.
 *
 *  If you want to use Coin in applications not covered by licenses
 *  compatible with the QPL, you can contact SIM to aquire a
 *  Professional Edition license for Coin.
 *
 *  Systems in Motion AS, Prof. Brochs gate 6, N-7030 Trondheim, NORWAY
 *  http://www.sim.no/ sales@sim.no Voice: +47 22114160 Fax: +47 67172912
 *
\**************************************************************************/

//  @configure_input@
//  $Id$

#ifndef SO@GUI@_VIEWER_H
#define SO@GUI@_VIEWER_H

/**************************************************************************\
 * 
 *  A WORD OF ADVICE
 *
 *  It is fruitless to modify the contents of the So@Gui@Viewer.h file
 *  because it is autogenerated by configure from the SoAnyViewer.h.in 
 *  file which you will find in the src/Inventor/@Gui@/common/ directory.
 *  Do your modifications to that file instead.
 *  
\**************************************************************************/

// Workaround for OIV problem on Linux in SbBasic.h.
#include <math.h>

#include <Inventor/SbTime.h>
#include <Inventor/SoType.h>
#include <Inventor/SbLinear.h>

#include <Inventor/@Gui@/So@Gui@RenderArea.h>

class SoCallbackList;
class SoBaseColor;
class SoCamera;
class SoComplexity;
class SoDirectionalLight;
class SoDrawStyle;
class SoGetBoundingBoxAction;
class SoGroup;
class SoLightModel;
class SoMaterialBinding;
class SoNode;
class SoPolygonOffset;
class SoSensor;
class SoSeparator;
class SoSwitch;
class SoTimerSensor;

class So@Gui@Viewer;

typedef void So@Gui@ViewerCB(
                 void * data, So@Gui@Viewer * viewer );
typedef void So@Gui@ViewerFPSCB(
                 float fps, void * data, So@Gui@Viewer * viewer );
typedef void So@Gui@ViewerDecimationPercentageCB(
                 float percentage, void * data, So@Gui@Viewer * viewer );

// *************************************************************************

class SO@GUI@_DLL_EXPORT So@Gui@Viewer : public So@Gui@RenderArea {
  typedef So@Gui@RenderArea inherited;
  @COMPONENTHEADER@

public:
  enum Type {
    BROWSER,
    EDITOR
  };

  enum DecimationStrategy {
    NORMAL,
    FIXED_NUM_TRIANGLES,
    FRAMES_PER_SECOND,
    FIXED_PERCENTAGE
  };

  enum DrawStyle {
    VIEW_AS_IS,
    VIEW_HIDDEN_LINE,
    VIEW_NO_TEXTURE,
    VIEW_LOW_COMPLEXITY,
    VIEW_LINE,
    VIEW_POINT,
    VIEW_BBOX,
    VIEW_LOW_RES_LINE,
    VIEW_LOW_RES_POINT,
    VIEW_SAME_AS_STILL
  };

  enum DrawType {
    STILL = 0,
    INTERACTIVE
  };

  enum BufferType {
    BUFFER_SINGLE,
    BUFFER_DOUBLE,
    BUFFER_INTERACTIVE
  };

  virtual void setCamera( SoCamera * camera );
  SoCamera * getCamera(void) const;

  virtual void setCameraType( SoType type );
  SoType getCameraType(void) const;

  virtual void viewAll(void);

  virtual void saveHomePosition(void);
  virtual void resetToHomePosition(void);

  virtual void setHeadlight( SbBool enable );
  SbBool isHeadlight(void) const;
  SoDirectionalLight * getHeadlight(void) const;

  virtual void setDrawStyle( So@Gui@Viewer::DrawType type, So@Gui@Viewer::DrawStyle style);
  So@Gui@Viewer::DrawStyle getDrawStyle( const So@Gui@Viewer::DrawType type ) const;

  virtual void setBufferingType( So@Gui@Viewer::BufferType type );
  So@Gui@Viewer::BufferType getBufferingType(void) const;

  virtual void setViewing( SbBool enable );
  SbBool isViewing(void) const;

  virtual void setCursorEnabled( SbBool enable );
  SbBool isCursorEnabled(void) const;

  void setAutoClipping( SbBool enable );
  SbBool isAutoClipping(void) const;

  virtual void setStereoViewing( SbBool enable );
  SbBool isStereoViewing(void) const;

  virtual void setStereoOffset( const float dist );
  float getStereoOffset(void) const;

  void setDetailSeek( const SbBool enable );
  SbBool isDetailSeek(void) const;

  void setSeekTime( const float seconds );
  float getSeekTime(void) const;

  void addStartCallback( So@Gui@ViewerCB * func, void * data = NULL );
  void addFinishCallback( So@Gui@ViewerCB * func, void * data = NULL );
  void removeStartCallback( So@Gui@ViewerCB * func, void * data = NULL );
  void removeFinishCallback( So@Gui@ViewerCB * func, void * data = NULL );

  void copyView( const SbTime eventTime );
  void pasteView( const SbTime eventTime );

  virtual void recomputeSceneSize(void);

  void setDecimationStrategy( const DecimationStrategy strategy );
  DecimationStrategy getDecimationStrategy(void) const;

  void setGoalNumberOfTriangles( const int32_t goal );
  int32_t getGoalNumberOfTriangles(void) const;

  void setGoalFramesPerSecond(const float goal);
  float getGoalFramesPerSecond(void) const;

  void setFixedPercentage( const float percent );
  float getFixedPercentage(void) const;

  void enableFullRenderingWhenStill( const SbBool enable );
  SbBool isFullRenderingWhenStill(void) const;
  SbBool isStillNow(void) const;

  void setFramesPerSecondCallback( So@Gui@ViewerFPSCB * callback, void * data );

  void setNumSamples( const int numFrames );
  int getNumSamples(void) const;

  void setDecimationPercentageCallback(
      So@Gui@ViewerDecimationPercentageCB * cb, void * data = NULL );
  float getCurrentDecimationPercentage(void) const;

  // Overloaded from parent class.
  virtual void setDoubleBuffer( SbBool enable );

  virtual void setSceneGraph( SoNode * root );
  virtual SoNode * getSceneGraph(void);

protected:
  So@Gui@Viewer(
    @WIDGET@ parent,
    const char * name,
    SbBool embed,
    Type type,
    SbBool buildNow );
#if SO@GUI@_HAVE_WINWIDGET
  So@Gui@Viewer(
    @WINWIDGET@ parent,
    const char * name,
    SbBool embed,
    Type type,
    SbBool buildNow );
#endif // SO@GUI@_HAVE_WINWIDGET
  ~So@Gui@Viewer( void );

  virtual void sizeChanged( const SbVec2s size );
  virtual void setSeekMode( SbBool enable );
  SbBool isSeekMode(void) const;
  SbBool seekToPoint( const SbVec2s screenpos );

  virtual void actualRedraw(void);
  SbBool processCommonEvents( @EVENT@ event );

  void interactiveCountInc(void);
  void interactiveCountDec(void);
  int getInteractiveCount(void) const;

  void setSeekDistance( const float distance );
  float getSeekDistance(void) const;
  void setSeekValueAsPercentage( const SbBool on );
  SbBool isSeekValuePercentage(void) const;

  virtual void toggleCameraType(void);

protected:
  // FIXME: even more data than this should be protected
  SoCamera * camera;
  So@Gui@Viewer::Type type;
  SbBool viewingFlag;
  SbBool altSwitchBack;

  SoGetBoundingBoxAction * autoClipBboxAction;
  float minimumNearPlane; // % of far plane

  SoNode * sceneGraph; // userroot
  SoSeparator * sceneRoot; // viewerroot

private:
  // Seek functionality
  SoTimerSensor * seeksensor;
  static void seeksensorCB( void * data, SoSensor * );
  float seekperiod;
  SbBool inseekmode;
  SbBool seektopoint;
  SbVec3f camerastartposition, cameraendposition;
  float seekdistance;
  SbBool seekdistanceabs;

  // Camera handling
  SbBool deletecamera;
  SbVec3f storedposition;
  SbRotation storedorientation;
  float storedheightval;

  // Headlight handling
  SbBool lighton;
  SoGroup * lightroot;

  // Drawstyles
  DrawStyle drawstyles[2];
  SbBool drawInteractiveAsStill(void) const;
  SbBool drawAsHiddenLine(void) const;
  So@Gui@Viewer::DrawStyle currentDrawStyle(void) const;
  void changeDrawStyle( So@Gui@Viewer::DrawStyle style );
  SoSwitch * drawstyleroot, * hiddenlineroot, * polygonoffsetparent;
  SoBaseColor * sobasecolor;
  SoComplexity * socomplexity;
  SoDrawStyle * sodrawstyle;
  SoLightModel * solightmodel;
  SoMaterialBinding * somaterialbinding;
  SoPolygonOffset * sopolygonoffset;

  // Automatic setting of clipping planes
  SbBool adjustclipplanes;
  void setClippingPlanes(void);

  // Misc
  SoType cameratype;
  SbBool cursoron;

  SoCallbackList * interactionstartCallbacks, * interactionendCallbacks;

  static void interactivestartCB( void *, So@Gui@Viewer * thisp );
  static void interactiveendCB( void *, So@Gui@Viewer * thisp );
  int interactionnesting;

  BufferType buffertype;

  void moveCameraScreen( const SbVec2f & screenpos );

  SbBool stereoviewing;
  float stereooffset;
}; // class So@Gui@Viewer

// *************************************************************************

#endif // ! SO@GUI@_VIEWER_H
