/**************************************************************************
 *
 *  This file is part of the Coin GUI binding libraries.
 *  Copyright (C) 2000 by Systems in Motion.  All rights reserved.
 *
 *  The libraries this file is part of is free software; you can
 *  redistribute them and/or modify them under the terms of the GNU
 *  Lesser General Public License version 2.1 as published by the
 *  Free Software Foundation.  See the file LICENSE.LGPL at the root
 *  directory of the distribution for all the details.
 *
 *  If you want to use the Coin GUI binding libraries for applications
 *  not compatible with the LGPL, contact SIM about acquiring a
 *  Professional Edition License.
 *
 *  Systems in Motion, Prof Brochs gate 6, N-7030 Trondheim, NORWAY
 *  http://www.sim.no/ support@sim.no Voice: +47 22114160 Fax: +47 22207097
 *
 **************************************************************************/

// @configure_input@
// $Id$

#ifndef SOANY_EXAMINERVIEWER_H
#define SOANY_EXAMINERVIEWER_H

#include <Inventor/SbTime.h>

class SbRotation;
class SbSphereSheetProjector;
class SbSpherePlaneProjector;
class SoEvent;
class SoCamera;

class So@Gui@ExaminerViewer;

// ************************************************************************

class SoAnyExaminerViewer {
  friend class So@Gui@ExaminerViewer;

public:
  SoAnyExaminerViewer( So@Gui@ExaminerViewer * const viewer );
  ~SoAnyExaminerViewer(void);

  void setAnimationEnabled( const SbBool enable );
  SbBool isAnimationEnabled(void) const;

  void stopAnimating(void);
  SbBool isAnimating(void) const;

  void setFeedbackVisibility( const SbBool enable );
  SbBool isFeedbackVisible(void) const;

  void setFeedbackSize( const int size );
  int getFeedbackSize(void) const;

  SbBool processSoEvent( const SoEvent * const event );

  void actualRedraw(void);

  void setMotion3OnCamera( SbBool enable );
  SbBool getMotion3OnCamera(void) const;

protected:
  float rotXWheelMotion( float value, float old );
  float rotYWheelMotion( float value, float old );

  void reorientCamera( const SbRotation & rotation );
  void spin( const SbVec2f & mousepos );
  void pan( const SbVec2f & mousepos, const SbVec2f & prevpos );
  void zoom( const float diffvalue );
  void zoomByCursor( const SbVec2f & mousepos, const SbVec2f & prevpos );

  SbVec2f lastmouseposition;
  SbPlane panningplane;

  SbBool spinanimating;
  SbBool spinanimatingallowed;
  SbVec2f lastspinposition;
  int spinsamplecounter;
  SbRotation spinincrement;
  SbSphereSheetProjector * spinprojector;

  SbRotation spinRotation;

  SbBool axiscrossEnabled;
  int axiscrossSize;

  void drawAxisCross(void);
  static void drawArrow(void);

  struct { // tracking mouse movement in a log
    short size;
    short historysize;
    SbVec2s * position;
    SbTime * time;
  } log;

  SbBool button1Down;
  SbBool button3Down;
  SbBool controlDown;

  void clearLog(void);
  void addToLog( const SbVec2s pos, const SbTime time );

  SbTime prevRedrawTime;

  SbBool motion3OnCamera;

private:
  enum ViewerMode {
    IDLE,
    INTERACT,
    EXAMINE,
    DRAGGING,
    WAITING_FOR_SEEK,
    ZOOMING,
    WAITING_FOR_PAN,
    PANNING
  } mode;

  So@Gui@ExaminerViewer * const viewer;

}; // class SoAnyExaminerViewer

// ************************************************************************

#endif // ! SOANY_EXAMINERVIEWER_H
