/**************************************************************************
 *
 *  This file is part of the Coin GUI binding libraries.
 *  Copyright (C) 2000 by Systems in Motion.  All rights reserved.
 *
 *  The libraries this file is part of is free software; you can
 *  redistribute them and/or modify them under the terms of the GNU
 *  Lesser General Public License version 2.1 as published by the
 *  Free Software Foundation.  See the file LICENSE.LGPL at the root
 *  directory of the distribution for all the details.
 *
 *  If you want to use the Coin GUI binding libraries for applications
 *  not compatible with the LGPL, contact SIM about acquiring a
 *  Professional Edition License.
 *
 *  Systems in Motion, Prof Brochs gate 6, N-7030 Trondheim, NORWAY
 *  http://www.sim.no/ support@sim.no Voice: +47 22114160 Fax: +47 22207097
 *
 **************************************************************************/

// @configure_input@

#if SO@GUI@_DEBUG
static const char rcsid[] =
  "$Id$";
#endif // SO@GUI@_DEBUG

#include <assert.h>

#include <Inventor/SoLists.h>
#include <Inventor/errors/SoDebugError.h>

#include <Inventor/@Gui@/widgets/SoAnyPopupMenu.h>

/*!
  \class SoAnyPopupMenu

  This class is just a common interface for the popup menu classes in the
  various GUI toolkits.  It just forwards calls.  The point of it is to
  enable client code to be exactly the same for all GUI libraries, even
  without being template-based.
*/

// *************************************************************************

/*!
*/

SoAnyPopupMenu::SoAnyPopupMenu(
  void )
: callbacks( NULL )
, userdata( NULL )
{
  this->menuitems = new SbIntList;
  this->radiogroups = new SbIntList;
  assert( this->menuitems != NULL && this->radiogroups != NULL );
} // SoAnyPopupMenu()

/*!
*/

SoAnyPopupMenu::~SoAnyPopupMenu(
  void )
{
  delete this->menuitems;
  delete this->radiogroups;
  delete this->callbacks;
  delete this->userdata;
} // ~SoAnyPopupMenu()

// *************************************************************************

/*!
*/

void
SoAnyPopupMenu::setMenuItemMarked(
  int itemid,
  SbBool marked )
{
  int groupid = this->getRadioGroup( itemid );
  if ( groupid == -1 ) {
    this->_setMenuItemMarked( itemid, marked );
    return;
  }
  const int numGroupedItems = this->menuitems->getLength();
  int groupsize = 0;
  int i;
  for ( i = 0; i < numGroupedItems; i++ ) {
    if ( ((*this->radiogroups)[i] == groupid) &&
         ((*this->menuitems)[i] != -1) )
      groupsize++;
  }
  if ( this->getMenuItemMarked( itemid ) == marked ) {
#if SO@GUI@_DEBUG && 0
    SoDebugError::postWarning( "SoAnyPopupMenu::SetMenuItemEnabled",
      "Marked state already '%s'.", marked ? "on" : "off" );
#endif // SO@GUI@_DEBUG
  } else if ( groupsize == 0 ) {
    assert( 0 && "how weird..." );
  } else if ( groupsize == 1 ) {
    this->_setMenuItemMarked( itemid, marked );
  } else if ( (groupsize == 2) ||
              ((groupsize > 2) && marked) ) {
    for ( i = 0; i < numGroupedItems; i++ ) {
      if ( ((*this->radiogroups)[i] == groupid) &&
           ((*this->menuitems)[i] != -1) ) {
        this->_setMenuItemMarked( (*this->menuitems)[i],
          ((*this->menuitems)[i] == itemid) ? marked :
          ((groupsize == 2) ? (! marked) : FALSE) );
      }
    }
  } else {
#if SO@GUI@_DEBUG
    SoDebugError::postWarning( "SoAnyPopupMenu::SetMenuItemEnabled",
      "Couldn't handle request.  "
      "Consider that radio grouping is handled automatically." );
#endif // SO@GUI@_DEBUG
  }
} // setMenuItemMarked()

// *************************************************************************

/*!
*/

int
SoAnyPopupMenu::newRadioGroup(
  int groupid )
{
  const int numGroupedItems = this->radiogroups->getLength();
  int id = groupid;
  if ( id != -1 ) {
    SbBool hit = FALSE;
    int i;
    for ( i = 0; i < numGroupedItems && hit == FALSE; i++ ) {
      if ( (*this->radiogroups)[i] == id )
        hit = TRUE;
    }
    if ( hit == TRUE ) {
#if SO@GUI@_DEBUG
      SoDebugError::postInfo( "SoAnyPopupMenu::NewRadioGroup",
        "requested group id already taken" );
#endif // SO@GUI@_DEBUG
      return -1; 
    }
  } else {
    id = 0;
    SbBool found;
    do {
      id++;
      found = FALSE;
      int i;
      for ( i = 0; i < numGroupedItems && found == FALSE; i++ ) {
        if ( (*this->radiogroups)[i] == id )
          found = TRUE;
      }
    } while ( found == TRUE );
  }
  // id is OK here
  this->menuitems->append( -1 ); // fake menu item
  this->radiogroups->append( id ); // register id in array
  return id;
} // newRadioGroup()

/*!
*/

int
SoAnyPopupMenu::getRadioGroup(
  int itemid )
{
  assert( itemid != -1 );
  const int numGroupedItems = this->radiogroups->getLength();
  int i;
  for ( i = 0; i < numGroupedItems; i++ ) {
    if ( (*this->menuitems)[i] == itemid )
      return (*this->radiogroups)[i];
  }
  return -1;
} // getRadioGroup()

/*!
*/

int
SoAnyPopupMenu::getRadioGroupSize(
  int groupid )
{
  int count = 0;
  const int numItems = this->radiogroups->getLength();
  int i;
  for ( i = 0; i < numItems; i++ ) {
    if ( (*this->radiogroups)[i] == groupid &&
         (*this->menuitems)[i] != -1 )
      count++;
  }
  return count;
} // getRadioGroupSize()

/*!
*/

void
SoAnyPopupMenu::addRadioGroupItem(
  int groupid,
  int itemid )
{
  this->menuitems->append( itemid );
  this->radiogroups->append( groupid );
} // addRadioGroupItem()

/*!
*/

void
SoAnyPopupMenu::removeRadioGroupItem(
  int itemid )
{
  assert( itemid != -1 );
  const int numGroupedItems = this->menuitems->getLength();
  int i;
  for ( i = 0; i < numGroupedItems; i++ ) {
    if ( (*this->menuitems)[i] == itemid ) {
      this->menuitems->remove(i);
      this->radiogroups->remove(i);
      return;
    }
  }
} // removeRadioGroupItem()

void
SoAnyPopupMenu::setRadioGroupMarkedItem(
  int itemid )
{
  const int numItems = this->menuitems->getLength();
  int i;
  int groupid = -1;
  for ( i = 0; i < numItems && groupid == -1; i++ ) {
    if ( (*this->menuitems)[i] == itemid )
      groupid = (*this->radiogroups)[i];
  }
  if ( groupid == -1 )
    return;
  for ( i = 0; i < numItems; i++ ) {
    if ( (*this->radiogroups)[i] == groupid ) {
      int item = (*this->menuitems)[i];
      if ( item != -1 && item != itemid )
        this->setMenuItemMarked( item, FALSE );
    }
  }
} // setRadioGroupItemEnabled()

int
SoAnyPopupMenu::getRadioGroupMarkedItem(
  int groupid )
{
  const int numItems = this->menuitems->getLength();
  int i;
  for ( i = 0; i < numItems; i++ ) {
    if ( (*this->radiogroups)[i] == groupid ) {
      int item = (*this->menuitems)[i];
      if ( item != -1 && this->getMenuItemMarked( item ) )
        return item;
    }
  }
  return -1;
} // setRadioGroupItemEnabled()

// *************************************************************************

/*!
*/

void
SoAnyPopupMenu::addMenuSelectionCallback(
  SoAnyMenuSelectionCallback * callback,
  void * user )
{
  if ( this->callbacks == NULL ) {
    this->callbacks = new SbPList;
    this->userdata = new SbPList;
  }
  this->callbacks->append( (void *) callback );
  this->userdata->append( user );
} // addMenuSelectionCallback()

/*!
*/

void
SoAnyPopupMenu::removeMenuSelectionCallback(
  SoAnyMenuSelectionCallback * callback,
  void * user )
{
  if ( this->callbacks == NULL ) {
#if SO@GUI@_DEBUG
    SoDebugError::postInfo( "SoAnyPopupMenu::RemoveMenuSelectionCallback",
      "no callbacks at all" );
#endif // SO@GUI@_DEBUG
    return;
  }
  int numCallbacks = this->callbacks->getLength();
  int i;
  for ( i = 0; i < numCallbacks; i++ ) {
    if ( (*this->callbacks)[i] == (void *) callback &&
         (*this->userdata)[i] == user ) {
      this->callbacks->remove(i);
      this->userdata->remove(i);
      i--;
      numCallbacks--;
    }
  }
} // removeMenuSelectionCallback()

/*!
*/

void
SoAnyPopupMenu::invokeMenuSelection(
  int itemid )
{
  if ( this->callbacks == NULL )
    return;
  const int numCallbacks = this->callbacks->getLength();
  int i;
  for ( i = 0; i < numCallbacks; i++ ) {
    SoAnyMenuSelectionCallback * cb = (SoAnyMenuSelectionCallback *)
      (*this->callbacks)[i];
    (*cb)( itemid, (*this->userdata)[i] );
  }
} // invokeMenuSelection()

// *************************************************************************

// silence some compilers
#if SO@GUI@_DEBUG
static const char * getSoAnyPopupMenuRCSId(void) { return rcsid; }
#endif // SO@GUI@_DEBUG

