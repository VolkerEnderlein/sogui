/**************************************************************************\
 *
 *  Copyright (C) 2000 by Systems in Motion.  All rights reserved.
 *
 *  This file is part of the Coin library.
 *
 *  This file may be distributed under the terms of the Q Public License
 *  as defined by Troll Tech AS of Norway and appearing in the file
 *  LICENSE.QPL included in the packaging of this file.
 *
 *  If you want to use Coin in applications not covered by licenses
 *  compatible with the QPL, you can contact SIM to aquire a
 *  Professional Edition license for Coin.
 *
 *  Systems in Motion AS, Prof. Brochs gate 6, N-7030 Trondheim, NORWAY
 *  http://www.sim.no/ sales@sim.no Voice: +47 22114160 Fax: +47 67172912
 *
\**************************************************************************/

// @configure_input@

static const char rcsid[] =
  "$Id$";

/*!
  \class SoAnyConstrainedViewer SoAnyConstrainedViewer.h
  \brief The SoAnyConstrainedViewer class is a collection of common functions
  for all the ConstrainedViewer components for Coin.
*/

#include <assert.h>

#include <Inventor/errors/SoDebugError.h>
#include <Inventor/SbLinear.h>
#include <Inventor/nodes/SoCamera.h>

#include <Inventor/@GUI@/viewers/SoAnyConstrainedViewer.h>
#include <Inventor/@GUI@/viewers/So@GUI@ConstrainedViewer.h>

// ************************************************************************

/*!
*/

SoAnyConstrainedViewer::SoAnyConstrainedViewer(
  So@GUI@ConstrainedViewer * const _viewer )
: viewer( _viewer )
{
  assert( _viewer != NULL );
} // SoAnyConstrainedViewer()

/*!
*/

SoAnyConstrainedViewer::~SoAnyConstrainedViewer(
  void )
{
} // ~SoAnyConstrainedViewer()

// *************************************************************************

/*!
  This method tilts the camera \a delta degrees closer to the up direction.
*/

void
SoAnyConstrainedViewer::tiltCamera(
  const float delta ) const
{
  SoCamera * const camera = viewer->getCamera();
  assert( camera != NULL );
  SbVec3f camdir;
  camera->orientation.getValue().multVec( SbVec3f( 0, 0, -1 ), camdir );
  camera->orientation = camera->orientation.getValue() *
    SbRotation( viewer->getUpDirection().cross( camdir ), delta );
} // tiltCamera()

/*!
  This method rotates the camera \a delta degrees around the up direction.
*/

void
SoAnyConstrainedViewer::rotateCamera(
  const float delta ) const
{
  SoCamera * const camera = viewer->getCamera();
  assert( camera != NULL );
  camera->orientation = camera->orientation.getValue() *
                        SbRotation( viewer->getUpDirection(), -delta );
} // rotateCamera()

// *************************************************************************
