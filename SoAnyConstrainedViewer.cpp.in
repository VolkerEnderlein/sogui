/**************************************************************************
 *
 *  This file is part of the Coin GUI binding libraries.
 *  Copyright (C) 2000 by Systems in Motion.  All rights reserved.
 *
 *  The libraries this file is part of is free software; you can
 *  redistribute them and/or modify them under the terms of the GNU
 *  Lesser General Public License version 2.1 as published by the
 *  Free Software Foundation.  See the file LICENSE.LGPL at the root
 *  directory of the distribution for all the details.
 *
 *  If you want to use the Coin GUI binding libraries for applications
 *  not compatible with the LGPL, contact SIM about acquiring a
 *  Professional Edition License.
 *
 *  Systems in Motion, Prof Brochs gate 6, N-7030 Trondheim, NORWAY
 *  http://www.sim.no/ support@sim.no Voice: +47 22114160 Fax: +47 22207097
 *
 **************************************************************************/

// @configure_input@

#if SO@GUI@_DEBUG
static const char rcsid[] =
  "$Id$";
#endif // SO@GUI@_DEBUG

/*!
  \class SoAnyConstrainedViewer SoAnyConstrainedViewer.h
  \brief The SoAnyConstrainedViewer class is a collection of common functions
  for all the So*ConstrainedViewer components for all So-libraries.
*/

#if HAVE_CONFIG_H
#include <config.h>
#endif

#include <assert.h>

#include <Inventor/errors/SoDebugError.h>
#include <Inventor/SbLinear.h>
#include <Inventor/nodes/SoCamera.h>

#include <so@gui@defs.h>
#include <Inventor/@Gui@/viewers/SoAnyConstrainedViewer.h>
#include <Inventor/@Gui@/viewers/So@Gui@ConstrainedViewer.h>

// ************************************************************************

/*!
*/

SoAnyConstrainedViewer::SoAnyConstrainedViewer(
  So@Gui@ConstrainedViewer * const v )
: viewer( v )
{
  assert( v != NULL );
} // SoAnyConstrainedViewer()

/*!
*/

SoAnyConstrainedViewer::~SoAnyConstrainedViewer(
  void )
{
} // ~SoAnyConstrainedViewer()

// *************************************************************************

/*!
  This method tilts the camera \a delta degrees closer to the up direction.
*/

void
SoAnyConstrainedViewer::tiltCamera(
  const float delta ) const
{
  SoCamera * const camera = viewer->getCamera();
  if ( camera == NULL ) { return; } // if there's no scenegraph, for instance

  SbVec3f camdir;
  camera->orientation.getValue().multVec( SbVec3f( 0, 0, -1 ), camdir );
  camera->orientation = camera->orientation.getValue() *
    SbRotation( viewer->getUpDirection().cross( camdir ), delta );
} // tiltCamera()

/*!
  This method rotates the camera \a delta degrees around the up direction.
*/

void
SoAnyConstrainedViewer::rotateCamera(
  const float delta ) const
{
  SoCamera * const camera = viewer->getCamera();
  if ( camera == NULL ) { return; } // if there's no scenegraph, for instance

  camera->orientation = camera->orientation.getValue() *
                        SbRotation( viewer->getUpDirection(), -delta );
} // rotateCamera()

// *************************************************************************

SbBool
SoAnyConstrainedViewer::processSoEvent(
  SoEvent * const event )
{
  return FALSE;
} // processSoEvent()

// *************************************************************************

#if SO@GUI@_DEBUG
static const char * getSoAnyConstrainedViewerRCSId(void) { return rcsid; }
#endif // SO@GUI@_DEBUG

