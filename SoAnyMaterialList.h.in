/**************************************************************************\
 *
 *  This file is part of the Coin family of 3D visualization libraries.
 *  Copyright (C) 1998-2004 by Systems in Motion.  All rights reserved.
 *
 *  This library is free software; you can redistribute it and / or
 *  modify it under the terms of the GNU General Public License
 *  version 2 as published by the Free Software Foundation.  See the
 *  file LICENSE.GPL at the root directory of this source distribution
 *  for more details.
 *
 *  If you desire to use this library in software that is incompatible
 *  with the GNU GPL, and / or you would like to take advantage of the
 *  additional benefits with regard to our support services, please
 *  contact Systems in Motion about acquiring a Coin Professional
 *  Edition License.  See <URL:http://www.coin3d.org> for more
 *  information.
 *
 *  Systems in Motion, Abels gate 5, Teknobyen, 7030 Trondheim, NORWAY
 *  <URL:http://www.sim.no>, <mailto:support@sim.no>
 *
\**************************************************************************/

// @configure_input@

#ifndef SOANY_MATERIALLIST_H
#define SOANY_MATERIALLIST_H

#include <Inventor/@Gui@/So@Gui@MaterialList.h>

class SbPList;
class SoMaterial;

// *************************************************************************

#define SO@GUI@_BUILTIN_MATERIALS 0x0001

struct So@Gui@Material {
  const char * name;
  const char * data;
};

struct So@Gui@MaterialGroup {
  const char * name;
  short numMaterials;
  So@Gui@Material ** materials;
  @WIDGET@ menuitem;
};

struct So@Gui@MaterialDirectory {
  short flags;
  short numGroups;
  So@Gui@MaterialGroup ** groups;
  short current;
};

// *************************************************************************

class SO@GUI@_DLL_API SoAnyMaterialList {
public:
  SoAnyMaterialList(const char * const dir);
  ~SoAnyMaterialList(void);

  void addCallback(
    So@Gui@MaterialListCB * const callback, void * const closure);
  void removeCallback(
    So@Gui@MaterialListCB * const callback, void * const closure);
  void invokeCallbacks(SoMaterial * material);

  const char * getMaterialDirectoryPath(void) const;
  So@Gui@MaterialDirectory * getMaterialDirectory(void);

private:
  void setupBuiltinMaterials(So@Gui@MaterialDirectory * const index) const;
  void freeMaterialDirectory(void);

  static char ** getNonemptySubdirs(const char * const path);
  static char ** getRegularFiles(const char * const path);

  static int qsort_comparator(const void * itemA, const void * itemB);

private:
  SbPList * callbacks;
  char * dirpath;
  So@Gui@MaterialDirectory * directory;

}; // class SoAnyMaterialList

// *************************************************************************

#endif // ! SOANY_MATERIALLIST_H
