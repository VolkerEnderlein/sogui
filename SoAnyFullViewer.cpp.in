/**************************************************************************\
 *
 *  Copyright (C) 2000 by Systems in Motion.  All rights reserved.
 *
 *  This file is part of the Coin library.
 *
 *  This file may be distributed under the terms of the Q Public License
 *  as defined by Troll Tech AS of Norway and appearing in the file
 *  LICENSE.QPL included in the packaging of this file.
 *
 *  If you want to use Coin in applications not covered by licenses
 *  compatible with the QPL, you can contact SIM to aquire a
 *  Professional Edition license for Coin.
 *
 *  Systems in Motion AS, Prof. Brochs gate 6, N-7030 Trondheim, NORWAY
 *  http://www.sim.no/ sales@sim.no Voice: +47 22114160 Fax: +47 67172912
 *
\**************************************************************************/

// @configure_input@

static const char rcsid[] =
  "$Id$";

/*!
  \class SoAnyFullViewer SoAnyFullViewer.h
  \brief The SoAnyFullViewer class is a collection of common functions for
  all the FullViewer components for Coin.
*/

#include <Inventor/errors/SoDebugError.h>

#include <Inventor/@GUI@/So@GUI@Component.h>
#include <Inventor/@GUI@/widgets/So@GUI@PopupMenu.h>
#include <Inventor/@GUI@/viewers/SoAnyFullViewer.h>
#include <Inventor/@GUI@/viewers/So@GUI@FullViewer.h>

#include <assert.h>

// ************************************************************************

/*!
  Constructor.
*/

SoAnyFullViewer::SoAnyFullViewer(
  So@GUI@FullViewer * container )
: viewer( container )
{
  assert( container != NULL );
} // SoAnyFullViewer()

/*!
  Destructor.
*/

SoAnyFullViewer::~SoAnyFullViewer(
  void )
{
} // ~SoAnyFullViewer()

// ************************************************************************

SoAnyPopupMenu *
SoAnyFullViewer::setupStandardPopupMenu(
  void )
{
  SoAnyPopupMenu * menu = new So@GUI@PopupMenu;

  menu->NewMenu( "rootmenu", ROOT_MENU );

  menu->NewMenu( "functionsmenu", FUNCTIONS_MENU );
  menu->SetMenuTitle( FUNCTIONS_MENU, "Functions" );
  menu->NewMenu( "drawstylesmenu", DRAWSTYLES_MENU );
  menu->SetMenuTitle( DRAWSTYLES_MENU, "Draw Styles" );
  menu->NewMenuItem( "examining", EXAMINING_ITEM );
  menu->SetMenuItemTitle( EXAMINING_ITEM, "Viewing" );
  menu->NewMenuItem( "decoration", DECORATION_ITEM );
  menu->SetMenuItemTitle( DECORATION_ITEM, "Decorations" );
  menu->NewMenuItem( "headlight", HEADLIGHT_ITEM );
  menu->SetMenuItemTitle( HEADLIGHT_ITEM, "Headlight" );
  menu->NewMenuItem( "preferences", PREFERENCES_ITEM );
  menu->SetMenuItemTitle( PREFERENCES_ITEM, "Preferences..." );

  menu->AddMenu( ROOT_MENU, FUNCTIONS_MENU );
  menu->AddMenu( ROOT_MENU, DRAWSTYLES_MENU );
  menu->AddMenuItem( ROOT_MENU, EXAMINING_ITEM );
  menu->AddMenuItem( ROOT_MENU, DECORATION_ITEM );
  menu->AddMenuItem( ROOT_MENU, HEADLIGHT_ITEM );
  menu->AddSeparator( ROOT_MENU );
  menu->AddMenuItem( ROOT_MENU, PREFERENCES_ITEM );

  menu->NewMenuItem( "help", HELP_ITEM );
  menu->SetMenuItemTitle( HELP_ITEM, "Help" );
  menu->NewMenuItem( "home", HOME_ITEM );
  menu->SetMenuItemTitle( HOME_ITEM, "Home" );
  menu->NewMenuItem( "set_home", SET_HOME_ITEM );
  menu->SetMenuItemTitle( SET_HOME_ITEM, "Set Home" );
  menu->NewMenuItem( "view_all", VIEW_ALL_ITEM );
  menu->SetMenuItemTitle( VIEW_ALL_ITEM, "View All" );
  menu->NewMenuItem( "seek", SEEK_ITEM );
  menu->SetMenuItemTitle( SEEK_ITEM, "Seek" );
  menu->NewMenuItem( "copy_view", COPY_VIEW_ITEM );
  menu->SetMenuItemTitle( COPY_VIEW_ITEM, "Copy View" );
  menu->NewMenuItem( "paste_view", PASTE_VIEW_ITEM );
  menu->SetMenuItemTitle( PASTE_VIEW_ITEM, "Paste View" );

  menu->AddMenuItem( FUNCTIONS_MENU, HELP_ITEM );
  menu->AddMenuItem( FUNCTIONS_MENU, HOME_ITEM );
  menu->AddMenuItem( FUNCTIONS_MENU, SET_HOME_ITEM );
  menu->AddMenuItem( FUNCTIONS_MENU, VIEW_ALL_ITEM );
  menu->AddMenuItem( FUNCTIONS_MENU, SEEK_ITEM );
  menu->AddSeparator( FUNCTIONS_MENU );
  menu->AddMenuItem( FUNCTIONS_MENU, COPY_VIEW_ITEM );
  menu->AddMenuItem( FUNCTIONS_MENU, PASTE_VIEW_ITEM );

  menu->NewMenuItem( "as_is", AS_IS_ITEM );
  menu->SetMenuItemTitle( AS_IS_ITEM, "as is" );
  menu->NewMenuItem( "hidden_line", HIDDEN_LINE_ITEM );
  menu->SetMenuItemTitle( HIDDEN_LINE_ITEM, "hidden line" );
  menu->NewMenuItem( "no_textures", NO_TEXTURE_ITEM );
  menu->SetMenuItemTitle( NO_TEXTURE_ITEM, "no texture" );
  menu->NewMenuItem( "low_resolution", LOW_RESOLUTION_ITEM );
  menu->SetMenuItemTitle( LOW_RESOLUTION_ITEM, "low resolution" );
  menu->NewMenuItem( "wireframe", WIREFRAME_ITEM );
  menu->SetMenuItemTitle( WIREFRAME_ITEM, "wireframe" );
  menu->NewMenuItem( "points", POINTS_ITEM );
  menu->SetMenuItemTitle( POINTS_ITEM, "points" );
  menu->NewMenuItem( "bounding_box", BOUNDING_BOX_ITEM );
  menu->SetMenuItemTitle( BOUNDING_BOX_ITEM, "bounding box (no depth)" );

  menu->NewRadioGroup( STILL_GROUP );
  menu->AddRadioGroupItem( STILL_GROUP, AS_IS_ITEM );
  menu->AddRadioGroupItem( STILL_GROUP, HIDDEN_LINE_ITEM );
  menu->AddRadioGroupItem( STILL_GROUP, NO_TEXTURE_ITEM );
  menu->AddRadioGroupItem( STILL_GROUP, LOW_RESOLUTION_ITEM );
  menu->AddRadioGroupItem( STILL_GROUP, WIREFRAME_ITEM );
  menu->AddRadioGroupItem( STILL_GROUP, POINTS_ITEM );
  menu->AddRadioGroupItem( STILL_GROUP, BOUNDING_BOX_ITEM );
  menu->SetMenuItemMarked( AS_IS_ITEM, TRUE );

  menu->NewMenuItem( "move_same_as_still", MOVE_SAME_AS_STILL_ITEM );
  menu->SetMenuItemTitle( MOVE_SAME_AS_STILL_ITEM, "move same as still" );
  menu->NewMenuItem( "move_no_texture", MOVE_NO_TEXTURE_ITEM );
  menu->SetMenuItemTitle( MOVE_NO_TEXTURE_ITEM, "move no texture" );
  menu->NewMenuItem( "move_low_res", MOVE_LOW_RES_ITEM );
  menu->SetMenuItemTitle( MOVE_LOW_RES_ITEM, "move low resolution" );
  menu->NewMenuItem( "move_wireframe", MOVE_WIREFRAME_ITEM );
  menu->SetMenuItemTitle( MOVE_WIREFRAME_ITEM, "move wireframe" );
  menu->NewMenuItem( "move_low_res_wireframe", MOVE_LOW_RES_WIREFRAME_ITEM );
  menu->SetMenuItemTitle( MOVE_LOW_RES_WIREFRAME_ITEM,
    "move low res wireframe (no depth)" );
  menu->NewMenuItem( "move_points", MOVE_POINTS_ITEM );
  menu->SetMenuItemTitle( MOVE_POINTS_ITEM, "move points" );
  menu->NewMenuItem( "move_low_res_points", MOVE_LOW_RES_POINTS_ITEM );
  menu->SetMenuItemTitle( MOVE_LOW_RES_POINTS_ITEM,
    "move low res points (no depth)" );
  menu->NewMenuItem( "move_bounding_box", MOVE_BOUNDING_BOX_ITEM );
  menu->SetMenuItemTitle( MOVE_BOUNDING_BOX_ITEM, "move bounding box (no depth)" );

  menu->NewRadioGroup( MOVE_GROUP );
  menu->AddRadioGroupItem( MOVE_GROUP, MOVE_SAME_AS_STILL_ITEM );
  menu->AddRadioGroupItem( MOVE_GROUP, MOVE_NO_TEXTURE_ITEM );
  menu->AddRadioGroupItem( MOVE_GROUP, MOVE_LOW_RES_ITEM );
  menu->AddRadioGroupItem( MOVE_GROUP, MOVE_WIREFRAME_ITEM );
  menu->AddRadioGroupItem( MOVE_GROUP, MOVE_LOW_RES_WIREFRAME_ITEM );
  menu->AddRadioGroupItem( MOVE_GROUP, MOVE_POINTS_ITEM );
  menu->AddRadioGroupItem( MOVE_GROUP, MOVE_LOW_RES_POINTS_ITEM );
  menu->AddRadioGroupItem( MOVE_GROUP, MOVE_BOUNDING_BOX_ITEM );
  menu->SetMenuItemMarked( MOVE_SAME_AS_STILL_ITEM, TRUE );

  menu->NewMenuItem( "single_buffer", SINGLE_BUFFER_ITEM );
  menu->SetMenuItemTitle( SINGLE_BUFFER_ITEM, "single buffer" );
  menu->NewMenuItem( "double_buffer", DOUBLE_BUFFER_ITEM );
  menu->SetMenuItemTitle( DOUBLE_BUFFER_ITEM, "double buffer" );
  menu->NewMenuItem( "interactive_buffer", INTERACTIVE_BUFFER_ITEM );
  menu->SetMenuItemTitle( INTERACTIVE_BUFFER_ITEM, "interactive buffer" );

  menu->NewRadioGroup( BUFFER_GROUP );
  menu->AddRadioGroupItem( BUFFER_GROUP, SINGLE_BUFFER_ITEM );
  menu->AddRadioGroupItem( BUFFER_GROUP, DOUBLE_BUFFER_ITEM );
  menu->AddRadioGroupItem( BUFFER_GROUP, INTERACTIVE_BUFFER_ITEM );
  menu->SetMenuItemMarked( DOUBLE_BUFFER_ITEM, TRUE );

  menu->AddMenuItem( DRAWSTYLES_MENU, AS_IS_ITEM );
  menu->AddMenuItem( DRAWSTYLES_MENU, HIDDEN_LINE_ITEM );
  menu->AddMenuItem( DRAWSTYLES_MENU, NO_TEXTURE_ITEM );
  menu->AddMenuItem( DRAWSTYLES_MENU, LOW_RESOLUTION_ITEM );
  menu->AddMenuItem( DRAWSTYLES_MENU, WIREFRAME_ITEM );
  menu->AddMenuItem( DRAWSTYLES_MENU, POINTS_ITEM );
  menu->AddMenuItem( DRAWSTYLES_MENU, BOUNDING_BOX_ITEM );
  menu->AddSeparator( DRAWSTYLES_MENU );
  menu->AddMenuItem( DRAWSTYLES_MENU, MOVE_SAME_AS_STILL_ITEM );
  menu->AddMenuItem( DRAWSTYLES_MENU, MOVE_NO_TEXTURE_ITEM );
  menu->AddMenuItem( DRAWSTYLES_MENU, MOVE_LOW_RES_ITEM );
  menu->AddMenuItem( DRAWSTYLES_MENU, MOVE_WIREFRAME_ITEM );
  menu->AddMenuItem( DRAWSTYLES_MENU, MOVE_LOW_RES_WIREFRAME_ITEM );
  menu->AddMenuItem( DRAWSTYLES_MENU, MOVE_POINTS_ITEM );
  menu->AddMenuItem( DRAWSTYLES_MENU, MOVE_LOW_RES_POINTS_ITEM );
  menu->AddMenuItem( DRAWSTYLES_MENU, MOVE_BOUNDING_BOX_ITEM );
  menu->AddSeparator( DRAWSTYLES_MENU );
  menu->AddMenuItem( DRAWSTYLES_MENU, SINGLE_BUFFER_ITEM );
  menu->AddMenuItem( DRAWSTYLES_MENU, DOUBLE_BUFFER_ITEM );
  menu->AddMenuItem( DRAWSTYLES_MENU, INTERACTIVE_BUFFER_ITEM );

  int toggle;
  toggle = menu->NewRadioGroup();
  menu->AddRadioGroupItem( toggle, EXAMINING_ITEM );
  toggle = menu->NewRadioGroup();
  menu->AddRadioGroupItem( toggle, DECORATION_ITEM );
  toggle = menu->NewRadioGroup();
  menu->AddRadioGroupItem( toggle, HEADLIGHT_ITEM );

  menu->AddMenuSelectionCallback( SoAnyFullViewer::menuSelectionCallback,
    (void *) this );

  return menu;
} // buildPopupMenu()

// ************************************************************************

void
SoAnyFullViewer::menuSelection( // virtual
  int menuitemid )
{
  switch ( menuitemid ) {
  case -1:
    // means no item was selected
#if SO@uGUI@_DEBUG
    SoDebugError::postInfo( "So@GUI@FullViewer::menuSelection",
      "-1 not appropriate on callback usage" );
#endif // SO@uGUI@_DEBUG
    break;

  case EXAMINING_ITEM:
    viewer->setViewing( viewer->isViewing() ? FALSE : TRUE );
    break;
  case DECORATION_ITEM:
    viewer->setDecoration( viewer->isDecoration() ? FALSE : TRUE );
    break;
  case HEADLIGHT_ITEM:
    viewer->setHeadlight( viewer->isHeadlight() ? FALSE : TRUE );
    break;
  case PREFERENCES_ITEM:
    viewer->selectedPrefs();
    break;

  case HELP_ITEM:
    viewer->openViewerHelpCard();
    break;
  case HOME_ITEM:
    viewer->resetToHomePosition();
    break;
  case SET_HOME_ITEM:
    viewer->saveHomePosition();
    break;
  case VIEW_ALL_ITEM:
    viewer->viewAll();
    break;
  case SEEK_ITEM:
    viewer->seekbuttonClicked();
    break;
  case COPY_VIEW_ITEM:
    viewer->copyView( SbTime::getTimeOfDay() );

    break;
  case PASTE_VIEW_ITEM:
    viewer->pasteView( SbTime::getTimeOfDay() );
    break;

  case AS_IS_ITEM:
  case HIDDEN_LINE_ITEM:
  case NO_TEXTURE_ITEM:
  case LOW_RESOLUTION_ITEM:
  case WIREFRAME_ITEM:
  case POINTS_ITEM:
  case BOUNDING_BOX_ITEM:
    this->drawstyleActivated( menuitemid );
    break;

  case MOVE_SAME_AS_STILL_ITEM:
  case MOVE_NO_TEXTURE_ITEM:
  case MOVE_LOW_RES_ITEM:
  case MOVE_WIREFRAME_ITEM:
  case MOVE_LOW_RES_WIREFRAME_ITEM:
  case MOVE_POINTS_ITEM:
  case MOVE_LOW_RES_POINTS_ITEM:
  case MOVE_BOUNDING_BOX_ITEM:
    this->drawstyleActivated( menuitemid );
    break;

  case SINGLE_BUFFER_ITEM:
  case DOUBLE_BUFFER_ITEM:
  case INTERACTIVE_BUFFER_ITEM:
    this->drawstyleActivated( menuitemid );
    break;

  default:
    SoDebugError::postInfo( "So@GUI@FullViewer::menuSelection",
      "popup menu handling for item %d is not implemented", menuitemid );
    break;
  } // switch ( menuitemid )
} // menuSelection()


// ************************************************************************

void
SoAnyFullViewer::menuSelectionCallback( // static
  int menuitemid,
  void * userdata )
{
  SoAnyFullViewer * viewer = (SoAnyFullViewer *) userdata;
  viewer->menuSelection( menuitemid );
} // menuSelectionCallback()

// ************************************************************************

/*!
 \internal
*/

void
SoAnyFullViewer::setDrawStyleMenuActivation(
  So@GUI@Viewer::DrawType type,
  So@GUI@Viewer::DrawStyle value )
{
  assert( viewer->prefmenu != NULL );

  switch ( type ) {
  case So@GUI@Viewer::STILL:
    switch ( value ) {
    case So@GUI@Viewer::VIEW_AS_IS:
      viewer->prefmenu->SetMenuItemMarked( AS_IS_ITEM, TRUE );
      break;
    case So@GUI@Viewer::VIEW_HIDDEN_LINE:
      viewer->prefmenu->SetMenuItemMarked( HIDDEN_LINE_ITEM, TRUE );
      break;
    case So@GUI@Viewer::VIEW_NO_TEXTURE:
      viewer->prefmenu->SetMenuItemMarked( NO_TEXTURE_ITEM, TRUE );
      break;
    case So@GUI@Viewer::VIEW_LOW_COMPLEXITY:
      viewer->prefmenu->SetMenuItemMarked( LOW_RESOLUTION_ITEM, TRUE );
      break;
    case So@GUI@Viewer::VIEW_LINE:
      viewer->prefmenu->SetMenuItemMarked( WIREFRAME_ITEM, TRUE );
      break;
    case So@GUI@Viewer::VIEW_POINT:
      viewer->prefmenu->SetMenuItemMarked( POINTS_ITEM, TRUE );
      break;
    case So@GUI@Viewer::VIEW_BBOX:
      viewer->prefmenu->SetMenuItemMarked( BOUNDING_BOX_ITEM, TRUE );
      break;
    default:
      assert( 0 && "unsupported default switch-case" );
      break;
    } // switch ( value )
    break;

  case So@GUI@Viewer::INTERACTIVE:
    switch ( value ) {
    case So@GUI@Viewer::VIEW_SAME_AS_STILL:
      viewer->prefmenu->SetMenuItemMarked( MOVE_SAME_AS_STILL_ITEM, TRUE );
      break;
    case So@GUI@Viewer::VIEW_NO_TEXTURE:
      viewer->prefmenu->SetMenuItemMarked( MOVE_NO_TEXTURE_ITEM, TRUE );
      break;
    case So@GUI@Viewer::VIEW_LOW_COMPLEXITY:
      viewer->prefmenu->SetMenuItemMarked( MOVE_LOW_RES_ITEM, TRUE );
      break;
    case So@GUI@Viewer::VIEW_LINE:
      viewer->prefmenu->SetMenuItemMarked( MOVE_WIREFRAME_ITEM, TRUE );
      break;
    case So@GUI@Viewer::VIEW_LOW_RES_LINE:
      viewer->prefmenu->SetMenuItemMarked( MOVE_LOW_RES_WIREFRAME_ITEM, TRUE );
      break;
    case So@GUI@Viewer::VIEW_POINT:
      viewer->prefmenu->SetMenuItemMarked( MOVE_POINTS_ITEM, TRUE );
      break;
    case So@GUI@Viewer::VIEW_LOW_RES_POINT:
      viewer->prefmenu->SetMenuItemMarked( MOVE_LOW_RES_POINTS_ITEM, TRUE );
      break;
    case So@GUI@Viewer::VIEW_BBOX:
      viewer->prefmenu->SetMenuItemMarked( MOVE_BOUNDING_BOX_ITEM, TRUE );
      break;
    default:
      assert( 0 && "unsupported default switch-case" );
      break;
    } // switch ( value )
    break;

  default:
    assert( 0 && "unsupported default switch-case" );
    break;
  } // switch ( type )
} // setDrawStyleMenuActivation()

// ************************************************************************

/*!
  \internal
*/

void
SoAnyFullViewer::drawstyleActivated(
  int menuitemid )
{
  switch ( menuitemid ) {
  case SINGLE_BUFFER_ITEM:
    viewer->setBufferingType( So@GUI@Viewer::BUFFER_SINGLE );
    return;
  case DOUBLE_BUFFER_ITEM:
    viewer->setBufferingType( So@GUI@Viewer::BUFFER_DOUBLE );
    return;
  case INTERACTIVE_BUFFER_ITEM:
    viewer->setBufferingType( So@GUI@Viewer::BUFFER_INTERACTIVE );
    return;
  default:
    break;
  } // switch ( menuitemid )

  So@GUI@Viewer::DrawStyle val = So@GUI@Viewer::VIEW_AS_IS;
  switch ( menuitemid ) {
  case AS_IS_ITEM:
    val = So@GUI@Viewer::VIEW_AS_IS;
    break;
  case HIDDEN_LINE_ITEM:
    val = So@GUI@Viewer::VIEW_HIDDEN_LINE;
    break;
  case NO_TEXTURE_ITEM:
    val = So@GUI@Viewer::VIEW_NO_TEXTURE;
    break;
  case LOW_RESOLUTION_ITEM:
    val = So@GUI@Viewer::VIEW_LOW_COMPLEXITY;
    break;
  case WIREFRAME_ITEM:
    val = So@GUI@Viewer::VIEW_LINE;
    break;
  case POINTS_ITEM:
    val = So@GUI@Viewer::VIEW_POINT;
    break;
  case BOUNDING_BOX_ITEM:
    val = So@GUI@Viewer::VIEW_BBOX;
    break;

  case MOVE_SAME_AS_STILL_ITEM:
    val = So@GUI@Viewer::VIEW_SAME_AS_STILL;
    break;
  case MOVE_NO_TEXTURE_ITEM:
    val = So@GUI@Viewer::VIEW_NO_TEXTURE;
    break;
  case MOVE_LOW_RES_ITEM:
    val = So@GUI@Viewer::VIEW_LOW_COMPLEXITY;
    break;
  case MOVE_WIREFRAME_ITEM:
    val = So@GUI@Viewer::VIEW_LINE;
    break;
  case MOVE_LOW_RES_WIREFRAME_ITEM:
    val = So@GUI@Viewer::VIEW_LOW_RES_LINE;
    break;
  case MOVE_POINTS_ITEM:
    val = So@GUI@Viewer::VIEW_POINT;
    break;
  case MOVE_LOW_RES_POINTS_ITEM:
    val = So@GUI@Viewer::VIEW_LOW_RES_POINT;
    break;
  case MOVE_BOUNDING_BOX_ITEM:
    val = So@GUI@Viewer::VIEW_BBOX;
    break;

  default:
    assert( 0 );
    break;
  } // switch ( menuitemid )

  So@GUI@Viewer::DrawType type = So@GUI@Viewer::STILL;

  switch ( menuitemid ) {
  case AS_IS_ITEM:
  case HIDDEN_LINE_ITEM:
  case NO_TEXTURE_ITEM:
  case LOW_RESOLUTION_ITEM:
  case WIREFRAME_ITEM:
  case POINTS_ITEM:
  case BOUNDING_BOX_ITEM:
    type = So@GUI@Viewer::STILL;
    break;

  case MOVE_SAME_AS_STILL_ITEM:
  case MOVE_NO_TEXTURE_ITEM:
  case MOVE_LOW_RES_ITEM:
  case MOVE_WIREFRAME_ITEM:
  case MOVE_LOW_RES_WIREFRAME_ITEM:
  case MOVE_POINTS_ITEM:
  case MOVE_LOW_RES_POINTS_ITEM:
  case MOVE_BOUNDING_BOX_ITEM:
    type = So@GUI@Viewer::INTERACTIVE;
    break;

  default:
    assert( 0 );
    break;
  } // switch ( menuitemid )

  viewer->setDrawStyle( type, val );
} // drawstyleActivated()

// ************************************************************************

static const char * getSoAnyFullViewerRCSId(void) { return rcsid; }

