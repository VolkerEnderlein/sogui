#ifndef COIN_SO@GUI@MATERIALEDITOR_H
#define COIN_SO@GUI@MATERIALEDITOR_H

/**************************************************************************\
 *
 *  This file is part of the Coin family of 3D visualization libraries.
 *  Copyright (C) 1998-2003 by Systems in Motion.  All rights reserved.
 *
 *  This library is free software; you can redistribute it and / or
 *  modify it under the terms of the GNU General Public License
 *  version 2 as published by the Free Software Foundation.  See the
 *  file LICENSE.GPL at the root directory of this source distribution
 *  for more details.
 *
 *  If you desire to use this library in software that is incompatible
 *  with the GNU GPL, and / or you would like to take advantage of the
 *  additional benefits with regard to our support services, please
 *  contact Systems in Motion about acquiring a Coin Professional
 *  Edition License.  See <URL:http://www.coin3d.org> for more
 *  information.
 *
 *  Systems in Motion, Abels gate 5, Teknobyen, 7030 Trondheim, NORWAY
 *  <URL:http://www.sim.no>, <mailto:support@sim.no>
 *
\**************************************************************************/

#include <Inventor/@Gui@/nodes/SoGuiMaterialEditor.h>
#include <Inventor/@Gui@/So@Gui@RenderArea.h>

class SoMaterial;
class SoVRMLMaterial;

// *************************************************************************

typedef void So@Gui@MaterialEditorCB(void * userdata, const SoMaterial * material);

class SO@GUI@_DLL_API So@Gui@MaterialEditor : public So@Gui@RenderArea {
  SO@GUI@_OBJECT_HEADER(So@Gui@MaterialEditor, So@Gui@RenderArea);

public:
  So@Gui@MaterialEditor(@WIDGET@ parent = NULL, const char * name = NULL, SbBool embed = TRUE);
  ~So@Gui@MaterialEditor(void);

  enum UpdateFrequency {
    CONTINUOUS = SoGuiMaterialEditor::CONTINUOUS,
    AFTER_ACCEPT = SoGuiMaterialEditor::AFTER_ACCEPT
  };

  void attach(SoMaterial * material, int index = 0);
  void attach(SoVRMLMaterial * material);
  void detach(void);
  SbBool isAttached(void);

  void addMaterialChangedCallback(
    So@Gui@MaterialEditorCB * callback, void * closure = NULL);
  void removeMaterialChangedCallback(
    So@Gui@MaterialEditorCB * callback, void * closure = NULL);

  void setUpdateFrequency(So@Gui@MaterialEditor::UpdateFrequency frequency);
  So@Gui@MaterialEditor::UpdateFrequency getUpdateFrequency(void) const;

  void setMaterial(const SoMaterial & material);
  void setMaterial(const SoVRMLMaterial & material);
  const SoMaterial & getMaterial(void) const;
  SbBool isAttachedVRML(void);

protected:
  So@Gui@MaterialEditor(@WIDGET@ parent, const char * const name, SbBool embed, SbBool build);

  virtual const char * getDefaultWidgetName(void) const;
  virtual const char * getDefaultTitle(void) const;
  virtual const char * getDefaultIconTitle(void) const;

private:
  void * internals;

}; // class So@Gui@MaterialEditor

// *************************************************************************

#endif // !COIN_SO@GUI@MATERIALEDITOR_H
