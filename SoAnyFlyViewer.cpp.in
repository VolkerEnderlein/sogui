/**************************************************************************
 *
 *  This file is part of the Coin GUI binding libraries.
 *  Copyright (C) 2000 by Systems in Motion.  All rights reserved.
 *
 *  The libraries this file is part of is free software; you can
 *  redistribute them and/or modify them under the terms of the GNU
 *  Lesser General Public License version 2.1 as published by the
 *  Free Software Foundation.  See the file LICENSE.LGPL at the root
 *  directory of the distribution for all the details.
 *
 *  If you want to use the Coin GUI binding libraries for applications
 *  not compatible with the LGPL, contact SIM about acquiring a
 *  Professional Edition License.
 *
 *  Systems in Motion, Prof Brochs gate 6, N-7030 Trondheim, NORWAY
 *  http://www.sim.no/ support@sim.no Voice: +47 22114160 Fax: +47 22207097
 *
 **************************************************************************/

// @configure_input@

static const char rcsid[] =
  "$Id$";

/*!
  \class SoAnyFlyViewer SoAnyFlyViewer.h
  \brief The SoAnyFlyViewer class is a collection of common functions
  for all the FlyViewer components for Coin.
*/

#if HAVE_CONFIG_H
#include <config.h>
#endif

#include <assert.h>

#include <Inventor/errors/SoDebugError.h>
#include <Inventor/nodes/SoCamera.h>

#include <so@gui@defs.h>
#include <Inventor/@Gui@/viewers/SoAnyFlyViewer.h>
#include <Inventor/@Gui@/viewers/So@Gui@FlyViewer.h>

// ************************************************************************

/*!
*/

SoAnyFlyViewer::SoAnyFlyViewer(
  So@Gui@FlyViewer * const _viewer )
: viewer( _viewer )
{
  assert( _viewer != NULL );
} // SoAnyFlyViewer()

/*!
*/

SoAnyFlyViewer::~SoAnyFlyViewer(
  void )
{
} // ~SoAnyFlyViewer()

// *************************************************************************

/*!
  This method dollies the camera back and forth in the scene.
*/

void
SoAnyFlyViewer::dolly(
  const float delta ) const
{
  SoCamera * const camera = viewer->getCamera();
  assert( camera != NULL );
  SbPlane walkplane( viewer->getUpDirection(), camera->position.getValue() );
  SbVec3f campos = camera->position.getValue();
  SbVec3f camvec;
  camera->orientation.getValue().multVec( SbVec3f( 0, 0, -1 ), camvec );
  SbLine cross( campos + camvec,
                campos + camvec + viewer->getUpDirection() );
  SbVec3f intersect;
  walkplane.intersect( cross, intersect );
  SbVec3f dir = intersect - campos;
  dir.normalize();

  camera->position = campos - dir * delta;
} // dolly()

// *************************************************************************

SbBool
SoAnyFlyViewer::processSoEvent(
  const SoEvent * const event )
{
  return FALSE;
} // processSoEvent()

// *************************************************************************

#if SO@GUI@_DEBUG
static const char * getSoAnyFlyViewerRCSId(void) { return rcsid; }
#endif // SO@GUI@_DEBUG

