/**************************************************************************\
 *
 *  This file is part of the Coin GUI toolkit libraries.
 *  Copyright (C) 1998-2002 by Systems in Motion.  All rights reserved.
 *
 *  This library is free software; you can redistribute it and/or
 *  modify it under the terms of the GNU Lesser General Public License
 *  version 2.1 as published by the Free Software Foundation.  See the
 *  file LICENSE.LGPL at the root directory of this source distribution
 *  for more details.
 *
 *  If you want to use this library with software that is incompatible
 *  licensewise with the LGPL, and / or you would like to take
 *  advantage of the additional benefits with regard to our support
 *  services, please contact Systems in Motion about acquiring a Coin
 *  Professional Edition License.  See <URL:http://www.coin3d.org> for
 *  more information.
 *
 *  Systems in Motion, Prof Brochs gate 6, 7030 Trondheim, NORWAY
 *  <URL:http://www.sim.no>, <mailto:support@sim.no>
 *
\**************************************************************************/

/*!
  \class So@Gui@Spaceball So@Gui@Spaceball.h Inventor/@Gui@/devices/So@Gui@Spaceball.h
  \brief The So@Gui@Spaceball class is the spaceball input device abstraction.
  \ingroup devices

  The So@Gui@Spaceball class is the glue between native spaceball
  handling and how those events translates to generic events for the
  Inventor API scenegraph.
*/

// *************************************************************************

#if HAVE_CONFIG_H
#include <config.h>
#endif // HAVE_CONFIG_H

#include <Inventor/@Gui@/devices/So@Gui@Spaceball.h>
#include <Inventor/@Gui@/devices/So@Gui@SpaceballP.h>

// *************************************************************************

SO@GUI@_OBJECT_SOURCE(So@Gui@Spaceball);

// *************************************************************************

/*!
  \enum So@Gui@Spaceball::DeviceType

  Enumeration of spaceball input device types.
*/
/*!
  \enum So@Gui@Spaceball::Mask
  Enumeration of spaceball input device event types.
*/

/*!
  \fn So@Gui@Spaceball::So@Gui@Spaceball(int mask)

  Public constructor. The \a mask argument specifies which events we
  are interested in.
*/

/*!
  \fn So@Gui@Spaceball::~So@Gui@Spaceball()
  Destructor.
*/

// *************************************************************************

/*!
  This method sets the scale factor for the spaceball rotation vectors.
*/
void
So@Gui@Spaceball::setRotationScaleFactor(float f)
{
  PRIVATE(this)->rotationscale = f;
}

/*!
  This method returns the scale factor for the spaceball rotation vectors.
*/
float
So@Gui@Spaceball::getRotationScaleFactor(void) const
{
  return PRIVATE(this)->rotationscale;
}

/*!
  This method sets the scale factor for the spaceball translation vectors.
*/
void
So@Gui@Spaceball::setTranslationScaleFactor(float f)
{
  PRIVATE(this)->translationscale = f;
}

/*!
  This method returns the scale factor for the spaceball translation vectors.
*/
float
So@Gui@Spaceball::getTranslationScaleFactor(void) const
{
  return PRIVATE(this)->translationscale;
}

// *************************************************************************

/*!
  \fn SbBool So@Gui@Spaceball::exists(void)

  Returns \c TRUE iff there could be a device of this type available
  on the system.

  Note that a return value of \c TRUE does \e not signify that there
  is such a device active.
*/

// *************************************************************************

/*!
  \fn void So@Gui@Spaceball::setFocusToWindow(SbBool flag)
  FIXME: write function documentation
*/

/*!
  \fn SbBool So@Gui@Spaceball::isFocusToWindow(void) const
  FIXME: write function documentation
*/

// *************************************************************************

SoGuiSpaceballP::SoGuiSpaceballP(So@Gui@Spaceball * p)
{
  this->pub = p;
}

SoGuiSpaceballP::~SoGuiSpaceballP()
{
}

// *************************************************************************
