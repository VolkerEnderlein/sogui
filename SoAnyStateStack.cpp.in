/**************************************************************************
 *
 *  Copyright (C) 2000 by Systems in Motion.  All rights reserved.
 *
 *  This file is part of the Coin library.
 *
 *  This file may be distributed under the terms of the Q Public License
 *  as defined by Troll Tech AS of Norway and appearing in the file
 *  LICENSE.QPL included in the packaging of this file.
 *
 *  If you want to use Coin in applications not covered by licenses
 *  compatible with the QPL, you can contact SIM to aquire a
 *  Professional Edition license for Coin.
 *
 *  Systems in Motion AS, Prof. Brochs gate 6, N-7030 Trondheim, NORWAY
 *  http://www.sim.no/ sales@sim.no Voice: +47 22114160 Fax: +47 67172912
 *
 **************************************************************************/

// @configure_input@

#if SO@GUI@_DEBUG
static const char rcsid[] =
  "$Id$";
#endif // SO@GUI@_DEBUG

#include <assert.h>

#include <Inventor/errors/SoDebugError.h>
#include <Inventor/SbPList.h>

#include <Inventor/@Gui@/widgets/SoAnyStateStack.h>

#define SOANY_ANYSTATE      -1

#define SOANY_STATEENTER  0x01
#define SOANY_STATEEXIT   0x02

typedef struct _CallbackData {
  int state;
  int flags;
  SoAnyStateChangeCB * callback;
  void * userdata;
} CallbackData;

// *************************************************************************

/*!
*/

SoAnyStateStack::SoAnyStateStack(
  void )
{
  this->states = NULL;

  this->callbacks = new SbPList;
  assert( this->callbacks != NULL );
} // SoAnyStateStack()

/*!
*/

SoAnyStateStack::~SoAnyStateStack(
  void )
{
  int i;
  delete this->states;

  const int numCallbacks = this->callbacks->getLength();
  for ( i = 0; i < numCallbacks; i++ )
    delete (CallbackData *) (*this->callbacks)[i];
  delete this->callbacks;
} // ~SoAnyStateStack()

// *************************************************************************

/*!
*/

int
SoAnyStateStack::getCurrentState(
  void ) const
{
  if ( this->states->getLength() == 0 )
    return this->defaultstate;
  return (int) (*this->states)[this->states->getLength()-1];
} // getState()

// *************************************************************************

/*!
*/

void
SoAnyStateStack::addStateChangeCallback(
  SoAnyStateChangeCB * callback,
  void * user )
{
  CallbackData * data = new CallbackData;
  data->state = SOANY_ANYSTATE;
  data->flags = SOANY_STATEENTER;
  data->callback = callback;
  data->userdata = user;
  this->callbacks->append( data );
} // addStateChangeCallback()

/*!
*/

void
SoAnyStateStack::removeStateChangeCallback(
  SoAnyStateChangeCB * callback,
  void * user )
{
  CallbackData * data;
  int numCallbacks = this->callbacks->getLength();
  for ( int i = 0; i < numCallbacks; i++ ) {
    data = (CallbackData *) (*this->callbacks)[i];
    if ( (data->state == SOANY_ANYSTATE) &&
         (data->callback == callback) &&
         (data->userdata == user) &&
         (data->flags == SOANY_STATEENTER) ) {
      delete data;
      this->callbacks->remove(i);
      i--;
      numCallbacks--;
    }
  }
} // removeStateChangeCallback()

/*!
*/

void
SoAnyStateStack::addStateEnterCallback(
  int state,
  SoAnyStateChangeCB * callback,
  void * user )
{
  CallbackData * data = new CallbackData;
  data->state = state;
  data->flags = SOANY_STATEENTER;
  data->callback = callback;
  data->userdata = user;
  this->callbacks->append( data );
} // addStateEnterCallback()

/*!
*/

void
SoAnyStateStack::removeStateEnterCallback(
  int state,
  SoAnyStateChangeCB * callback,
  void * user )
{
  CallbackData * data;
  int numCallbacks = this->callbacks->getLength();
  for ( int i = 0; i < numCallbacks; i++ ) {
    data = (CallbackData *) (*this->callbacks)[i];
    if ( (data->state == state) &&
         (data->callback == callback) &&
         (data->userdata == user) &&
         (data->flags == SOANY_STATEENTER) ) {
      delete data;
      this->callbacks->remove(i);
      i--;
      numCallbacks--;
    }
  }
} // removeStateEnterCallback()

/*!
*/

void
SoAnyStateStack::addStateExitCallback(
  int state,
  SoAnyStateChangeCB * callback,
  void * user )
{
  CallbackData * data = new CallbackData;
  data->state = state;
  data->flags = SOANY_STATEEXIT;
  data->callback = callback;
  data->userdata = user;
  this->callbacks->append( data );
} // addStateExitCallback()

/*!
*/

void
SoAnyStateStack::removeStateExitCallback(
  int state,
  SoAnyStateChangeCB * callback,
  void * user )
{
  CallbackData * data;
  int numCallbacks = this->callbacks->getLength();
  for ( int i = 0; i < numCallbacks; i++ ) {
    data = (CallbackData *) (*this->callbacks)[i];
    if ( (data->state == state) &&
         (data->callback == callback) &&
         (data->userdata == user) &&
         (data->flags == SOANY_STATEEXIT) ) {
      delete data;
      this->callbacks->remove(i);
      i--;
      numCallbacks--;
    }
  }
} // removeStateExitCallback()

// *************************************************************************

/*!
  This method invokes every callback that should be sent for a given state
  transition.
*/

void
SoAnyStateStack::invokeTransitionCallbacks(
  const int oldstate,
  const int newstate ) const
{
  if ( ! this->callbacks )
    return;
  const CallbackData * cbdata;
  const int numCallbacks = this->callbacks->getLength();
  int i;
  // exit callbacks
  for ( i = 0; i < numCallbacks; i++ ) {
    cbdata = (CallbackData *) (*this->callbacks)[i];
    if ( (cbdata->state == oldstate) &&
         (cbdata->flags & SOANY_STATEEXIT) ) {
      cbdata->callback( cbdata->userdata, newstate, oldstate );
    }
  }
  // statechange callbacks
  for ( i = 0; i < numCallbacks; i++ ) {
    cbdata = (CallbackData *) (*this->callbacks)[i];
    if ( (cbdata->state == SOANY_ANYSTATE) &&
         (cbdata->flags & SOANY_STATEENTER) ) {
      cbdata->callback( cbdata->userdata, newstate, oldstate );
    }
  }
  // enter callbacks
  for ( i = 0; i < numCallbacks; i++ ) {
    cbdata = (CallbackData *) (*this->callbacks)[i];
    if ( (cbdata->state == newstate) &&
         (cbdata->flags & SOANY_STATEENTER) ) {
      cbdata->callback( cbdata->userdata, newstate, oldstate );
    }
  }
} // invokeTransitionCallbacks()

// *************************************************************************

#if SO@GUI@_DEBUG
static const char * getSoAnyStateStackRCSId(void) { return rcsid; }
#endif // SO@GUI@_DEBUG

