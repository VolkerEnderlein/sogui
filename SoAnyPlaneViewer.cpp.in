/**************************************************************************\
 *
 *  Copyright (C) 2000 by Systems in Motion.  All rights reserved.
 *
 *  This file is part of the Coin library.
 *
 *  This file may be distributed under the terms of the Q Public License
 *  as defined by Troll Tech AS of Norway and appearing in the file
 *  LICENSE.QPL included in the packaging of this file.
 *
 *  If you want to use Coin in applications not covered by licenses
 *  compatible with the QPL, you can contact SIM to aquire a
 *  Professional Edition license for Coin.
 *
 *  Systems in Motion AS, Prof. Brochs gate 6, N-7030 Trondheim, NORWAY
 *  http://www.sim.no/ sales@sim.no Voice: +47 22114160 Fax: +47 67172912
 *
\**************************************************************************/

// @configure_input@

#if SO@GUI@_DEBUG
static const char rcsid[] =
  "$Id$";
#endif // SO@GUI@_DEBUG

/*!
  \class SoAnyPlaneViewer SoAnyPlaneViewer.h
  \brief The SoAnyPlaneViewer class is a collection of common functions for
  all the PlaneViewer components for Coin.
  \ingroup common
*/

#include <assert.h>
#include <math.h>

#ifdef _WIN32
#include <windows.h>
#endif // _WIN32
#include <GL/gl.h>

#include <Inventor/errors/SoDebugError.h>
#include <Inventor/nodes/SoCamera.h>

#include <Inventor/@Gui@/viewers/SoAnyPlaneViewer.h>
#include <Inventor/@Gui@/viewers/So@Gui@PlaneViewer.h>

#ifndef M_PI
#define M_PI 3.1415926535f
#endif // ! M_PI

// ************************************************************************

/*!
*/

SoAnyPlaneViewer::SoAnyPlaneViewer(
  So@Gui@PlaneViewer * const _viewer )
: viewer( _viewer )
{
  assert( viewer != NULL );
  this->canvas = SbVec2s( 0, 0 );
  this->pointer.now = SbVec2s( 0, 0 );
  this->pointer.then = SbVec2s( 0, 0 );
} // SoAnyPlaneViewer()

/*!
*/

SoAnyPlaneViewer::~SoAnyPlaneViewer(
  void )
{
} // ~SoAnyPlaneViewer()

// *************************************************************************

/*!
*/

void
SoAnyPlaneViewer::translateX(
  const float delta ) const
{
  SoCamera * const camera = viewer->getCamera();
  assert( camera != NULL );
  SbVec3f dir;
  camera->orientation.getValue().multVec( SbVec3f( 1, 0, 0 ), dir );
  camera->position = camera->position.getValue() - dir * delta *
    camera->focalDistance.getValue() / 2.5f;
} // translateX()

/*!
*/

void
SoAnyPlaneViewer::translateY(
  const float delta ) const
{
  SoCamera * const camera = viewer->getCamera();
  assert( camera != NULL );
  SbVec3f dir;
  camera->orientation.getValue().multVec( SbVec3f( 0, 1, 0 ), dir );
  camera->position = camera->position.getValue() + dir * delta *
    camera->focalDistance.getValue() / 2.5f;
} // translateY()

/*!
*/

void
SoAnyPlaneViewer::rotateZ(
  const float angle ) const
{
  SoCamera * const camera = viewer->getCamera();
  assert( camera != NULL );
  SbVec3f dir;
  camera->orientation.getValue().multVec( SbVec3f( 0, 0, -1 ), dir );
  camera->orientation =
    camera->orientation.getValue() * SbRotation( dir, angle );
} // rotateZ()

// *************************************************************************

/*!
*/

void
SoAnyPlaneViewer::viewPlaneX(
  void ) const
{
  SoCamera * const camera = viewer->getCamera();
  assert( camera != NULL );
  SbVec3f dir;
  camera->orientation.getValue().multVec( SbVec3f( 0, 0, -1 ), dir );
  SbVec3f focalpoint = camera->position.getValue() +
    camera->focalDistance.getValue() * dir;
  camera->position = focalpoint +
    camera->focalDistance.getValue() * SbVec3f( 1, 0, 0 );
  camera->orientation = SbRotation( SbVec3f( 0, 1, 0 ), M_PI/2.0f );
} // viewPlaneX()

/*!
*/

void
SoAnyPlaneViewer::viewPlaneY(
  void ) const
{
  SoCamera * const camera = viewer->getCamera();
  assert( camera != NULL );
  SbVec3f dir;
  camera->orientation.getValue().multVec( SbVec3f( 0, 0, -1 ), dir );
  SbVec3f focalpoint = camera->position.getValue() +
    camera->focalDistance.getValue() * dir;
  camera->position = focalpoint +
    camera->focalDistance.getValue() * SbVec3f( 0, 1, 0 );
  camera->orientation = SbRotation( SbVec3f( 1, 0, 0 ), -M_PI/2.0f );
} // viewPlaneY()

/*!
*/

void
SoAnyPlaneViewer::viewPlaneZ(
  void ) const
{
  SoCamera * const camera = viewer->getCamera();
  assert( camera != NULL );
  SbVec3f dir;
  camera->orientation.getValue().multVec( SbVec3f( 0, 0, -1 ), dir );
  SbVec3f focalpoint = camera->position.getValue() +
    camera->focalDistance.getValue() * dir;
  camera->position = focalpoint +
    camera->focalDistance.getValue() * SbVec3f( 0, 0, 1 );
  camera->orientation = SbRotation( SbVec3f( 0, 1, 0 ), 0 );
} // viewPlaneZ()

// *************************************************************************

/*!
  old
*/

void
SoAnyPlaneViewer::viewPlaneX(
  SoCamera * const camera )
{
  assert( camera != NULL );
  SbVec3f dir;
  camera->orientation.getValue().multVec( SbVec3f( 0, 0, -1 ), dir );
  SbVec3f focalpoint = camera->position.getValue() +
    camera->focalDistance.getValue() * dir;
  camera->position = focalpoint +
    camera->focalDistance.getValue() * SbVec3f( 1, 0, 0 );
  camera->orientation = SbRotation( SbVec3f( 0, 1, 0 ), M_PI/2.0f );
} // viewPlaneX()

/*!
  old
*/

void
SoAnyPlaneViewer::viewPlaneY(
  SoCamera * const camera )
{
  assert( camera != NULL );
  SbVec3f dir;
  camera->orientation.getValue().multVec( SbVec3f( 0, 0, -1 ), dir );
  SbVec3f focalpoint = camera->position.getValue() +
    camera->focalDistance.getValue() * dir;
  camera->position = focalpoint +
    camera->focalDistance.getValue() * SbVec3f( 0, 1, 0 );
  camera->orientation = SbRotation( SbVec3f( 1, 0, 0 ), -M_PI/2.0f );
} // viewPlaneY()

/*!
  old
*/

void
SoAnyPlaneViewer::viewPlaneZ(
  SoCamera * const camera )
{
  assert( camera != NULL );
  SbVec3f dir;
  camera->orientation.getValue().multVec( SbVec3f( 0, 0, -1 ), dir );
  SbVec3f focalpoint = camera->position.getValue() +
    camera->focalDistance.getValue() * dir;
  camera->position = focalpoint +
    camera->focalDistance.getValue() * SbVec3f( 0, 0, 1 );
  camera->orientation = SbRotation( SbVec3f( 0, 1, 0 ), 0 );
} // viewPlaneZ()

// ************************************************************************

/*!
*/

void
SoAnyPlaneViewer::setCanvasSize(
  const SbVec2s size )
{
  this->canvas = size;
} // setCanvasSize()

/*!
*/

void
SoAnyPlaneViewer::setPointerLocation(
  const SbVec2s position )
{
  this->pointer.then = this->pointer.now;
  this->pointer.now = position;
} // setPointerLocation()

/*!
*/

int
SoAnyPlaneViewer::getPointerXMotion(
  void ) const
{
  return this->pointer.now[0] - this->pointer.then[0];
} // getPointerXMotion()

/*!
*/

int
SoAnyPlaneViewer::getPointerYMotion(
  void ) const
{
  return this->pointer.now[1] - this->pointer.then[1];
} // getPointerYMotion()

/*!
*/

float
SoAnyPlaneViewer::getPointerOrigoAngle(
  void ) const
{
  SbVec2s now = this->pointer.now;
  now[0] -= this->canvas[0] / 2;
  now[1] -= this->canvas[1] / 2;

  float nowradval = atan( fabs( (float) now[1] / (float) now[0] ) );
  if ( now[0] < 0 ) nowradval = M_PI - nowradval;
  if ( now[1] < 0 ) nowradval = 2 * M_PI - nowradval;

  return nowradval;
} // getPointerOrigoAngle()

/*!
*/

float
SoAnyPlaneViewer::getPointerOrigoMotionAngle(
  void ) const
{
  if ( this->pointer.then == this->pointer.now )
    return 0.0f;

  SbVec2s now = this->pointer.now;
  now[0] -= this->canvas[0] / 2;
  now[1] -= this->canvas[1] / 2;

  SbVec2s then = this->pointer.then;
  then[0] -= this->canvas[0] / 2;
  then[1] -= this->canvas[1] / 2;

  float nowradval = atan( fabs( (float) now[1] / (float) now[0] ) );
  if ( now[0] < 0 ) nowradval = M_PI - nowradval;
  if ( now[1] < 0 ) nowradval = 2 * M_PI - nowradval;

  float thenradval = atan( fabs( (float) then[1] / (float) then[0] ) );
  if ( then[0] < 0 ) thenradval = M_PI - thenradval;
  if ( then[1] < 0 ) thenradval = 2 * M_PI - thenradval;

  return nowradval - thenradval;
} // getPointerMotionAngle()

// ************************************************************************

/*!
  This method draws the rotate mode graphics...
*/

void
SoAnyPlaneViewer::drawRotateGraphics(
  void ) const
{
  glPushAttrib(GL_LIGHTING_BIT|GL_DEPTH_BUFFER_BIT|GL_TRANSFORM_BIT|
               GL_VIEWPORT_BIT|GL_LINE_BIT|GL_ENABLE_BIT);
  GLfloat depthrange[2];
  glGetFloatv(GL_DEPTH_RANGE, depthrange);
  GLdouble projectionmatrix[16];
  glGetDoublev(GL_PROJECTION_MATRIX, projectionmatrix);

  glDepthFunc(GL_ALWAYS);
  glDepthMask(GL_TRUE);
  glDepthRange(0, 0);
  glEnable(GL_DEPTH_TEST);
  glDisable(GL_LIGHTING);
  glEnable(GL_COLOR_MATERIAL);

  // draw gfx

  // Reset original state.
  glDepthRange(depthrange[0], depthrange[1]);
  glMatrixMode(GL_PROJECTION);
  glLoadMatrixd(projectionmatrix);
  glPopAttrib();
} // drawRotateGraphics()

// ************************************************************************

SbBool
SoAnyPlaneViewer::processSoEvent(
  const SoEvent * const event )
{
  return FALSE;
} // processSoEvent()

// ************************************************************************

#if SO@GUI@_DEBUG
static const char * getSoAnyPlaneViewerRCSId(void) { return rcsid; }
#endif // SO@GUI@_DEBUG

