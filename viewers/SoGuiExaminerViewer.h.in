/**************************************************************************
 *
 *  This file is part of the Coin So@Gui@ GUI binding library.
 *  Copyright (C) 1998-2000 by Systems in Motion.  All rights reserved.
 *
 *  This library is free software; you can redistribute it and/or modify
 *  it under the terms of the GNU Lesser General Public License version
 *  2.1 as published by the Free Software Foundation.  See the file
 *  LICENSE.LGPL at the root directory of the distribution for all the
 *  details.
 *
 *  If you want to use Coin So@Gui@ for applications not compatible with the
 *  LGPL, please contact SIM to acquire a Professional Edition License.
 *
 *  Systems in Motion, Prof Brochs gate 6, N-7030 Trondheim, NORWAY
 *  http://www.sim.no/ support@sim.no Voice: +47 22114160 Fax: +47 22207097
 *
 **************************************************************************/

// $Id$

#ifndef SO@GUI@_EXAMINERVIEWER_H
#define SO@GUI@_EXAMINERVIEWER_H

// FIXME: just a tmp thing to get hold of __COIN_SO*__
// defines. 20020109 mortene.
#include <Inventor/@Gui@/So@Gui@Basic.h>

// FIXME!: merge the So*ExaminerViewer.h in properly. 20020109 mortene.

#ifdef __COIN_SOWIN__

#include <Inventor/Win/viewers/SoWinFullViewer.h>

class SoWinThumbWheel;
class SoAnyExaminerViewer;
class SoWinExaminerViewerP;

// *************************************************************************

class SOWIN_DLL_API SoWinExaminerViewer : public SoWinFullViewer {
  
  SOWIN_OBJECT_HEADER(SoWinExaminerViewer, SoWinFullViewer);
  friend class SoAnyExaminerViewer;
  friend class SoWinExaminerViewerP;
  
public:
  
  SoWinExaminerViewer(
    HWND parent = NULL,
    const char * name = NULL,
    SbBool embed = TRUE,
    SoWinFullViewer::BuildFlag flag = BUILD_ALL,
    SoWinViewer::Type type = BROWSER);
  ~SoWinExaminerViewer(void);

  void setAnimationEnabled(const SbBool enable);
  SbBool isAnimationEnabled(void) const;

  void stopAnimating(void);
  SbBool isAnimating(void) const;

  void setFeedbackVisibility(const SbBool enable);
  SbBool isFeedbackVisible(void) const;

  void setFeedbackSize(const int size);
  int getFeedbackSize(void) const;

  virtual void setViewing(SbBool enable);
  virtual void setCamera(SoCamera * camera);
  virtual void setCursorEnabled(SbBool enable);
  virtual void resetToHomePosition(void);
  virtual void viewAll(void);

protected:
  
  SoWinExaminerViewer(
    HWND parent,
    const char * name,
    SbBool embed,
    SoWinFullViewer::BuildFlag flag,
    SoWinViewer::Type type,
    SbBool build);

  virtual void leftWheelMotion(float val);
  virtual void bottomWheelMotion(float val);
  virtual void rightWheelMotion(float val);

  virtual const char * getDefaultWidgetName(void) const;
  virtual const char * getDefaultTitle(void) const;
  virtual const char * getDefaultIconTitle(void) const;

  virtual void openViewerHelpCard(void);
  virtual SbBool processSoEvent(const SoEvent * const event);
  virtual LRESULT onCommand(HWND window, UINT message, WPARAM wparam, LPARAM lparam);
  virtual void setSeekMode(SbBool enable);
  virtual void actualRedraw(void);
  virtual void afterRealizeHook(void);
  virtual void createPrefSheet(void);
  virtual void buildViewerButtonsEx(HWND parent, int x, int y, int size);

  void setCursorRepresentation(int mode); // Used by SoAnyExaminerViewer. mariusbu 20010724.
  
private:

  SoAnyExaminerViewer * common;
  SoWinExaminerViewerP * pimpl;
  
};

#endif // ! __COIN_SOWIN__

#ifdef __COIN_SOQT__

#include <Inventor/SbLinear.h>
#include <Inventor/Qt/viewers/SoQtFullViewer.h>

class SoSeparator;
class SoSwitch;
class SoTranslation;
class SoScale;

class QPushButton;
class QLabel;
class QLineEdit;
class QPixmap;
class QTimer;

class SoQtThumbWheel;
class SoAnyExaminerViewer;

// *************************************************************************

class SOQT_DLL_API SoQtExaminerViewer : public SoQtFullViewer {
  SOQT_OBJECT_HEADER(SoQtExaminerViewer, SoQtFullViewer);
  friend class SoAnyExaminerViewer;
  Q_OBJECT

public:
  SoQtExaminerViewer(
    QWidget * parent = NULL,
    const char * name = NULL,
    SbBool embed = TRUE,
    SoQtFullViewer::BuildFlag flag = BUILD_ALL,
    SoQtViewer::Type type = BROWSER);
  ~SoQtExaminerViewer(void);

  void setAnimationEnabled(const SbBool enable);
  SbBool isAnimationEnabled(void) const;

  void stopAnimating(void);
  SbBool isAnimating(void) const;

  void setFeedbackVisibility(const SbBool enable);
  SbBool isFeedbackVisible(void) const;

  void setFeedbackSize(const int size);
  int getFeedbackSize(void) const;

  virtual void setViewing(SbBool enable);
  virtual void setCamera(SoCamera * camera);
  virtual void setCursorEnabled(SbBool enable);
  virtual void resetToHomePosition(void);
  virtual void viewAll(void);

protected:
  SoQtExaminerViewer(
    QWidget * parent,
    const char * name,
    SbBool embed,
    SoQtFullViewer::BuildFlag flag,
    SoQtViewer::Type type,
    SbBool build);


  virtual void leftWheelMotion(float val);
  virtual void bottomWheelMotion(float val);
  virtual void rightWheelMotion(float val);

  virtual QWidget * makeSubPreferences(QWidget * parent);
  virtual void createViewerButtons(QWidget * parent, SbPList * buttonlist);

  virtual const char * getDefaultWidgetName(void) const;
  virtual const char * getDefaultTitle(void) const;
  virtual const char * getDefaultIconTitle(void) const;

  virtual void openViewerHelpCard(void);

  virtual SbBool processSoEvent(const SoEvent * const event);
  virtual void processEvent(QEvent * anyevent);
  virtual void setSeekMode(SbBool enable);
  virtual void actualRedraw(void);

  virtual void afterRealizeHook(void);

private:
  QPixmap * orthopixmap, * perspectivepixmap;

  void constructor(SbBool buildNow);
  void visibilityCallback(SbBool visible);
  static void visibilityCB(void * data, SbBool visible);

  QTimer * spindetecttimer;

  void setCursorRepresentation(int mode);
  QCursor * defaultcursor;

  QPushButton * cameratogglebutton;
  QLabel * feedbacklabel1, * feedbacklabel2;
  SoQtThumbWheel * feedbackwheel;
  QLineEdit * feedbackedit;
  void setEnableFeedbackControls(const SbBool flag);

private slots:

// preferences window:
  void spinAnimationToggled(bool);
  void feedbackVisibilityToggle(bool);
  void feedbackEditPressed(void);
  void feedbackWheelPressed(void);
  void feedbackSizeChanged(float val);
  void feedbackWheelReleased(void);

// viewer buttons row:
  void cameratoggleClicked(void);

private:
  SoAnyExaminerViewer * const common;

};

#endif // ! __COIN_SOQT__

#ifdef __COIN_SOGTK__

#include <Inventor/SbLinear.h>
#include <Inventor/Gtk/viewers/SoGtkFullViewer.h>

// *************************************************************************

class SOGTK_DLL_API SoGtkExaminerViewer : public SoGtkFullViewer {
  SOGTK_OBJECT_HEADER(SoGtkExaminerViewer, SoGtkFullViewer);

public:
  SoGtkExaminerViewer(
    GtkWidget * parent = (GtkWidget *) NULL,
    const char * name = (char *) NULL,
    SbBool embed = TRUE,
    SoGtkFullViewer::BuildFlag flags = SoGtkFullViewer::BUILD_ALL,
    SoGtkViewer::Type type = SoGtkViewer::BROWSER);
  ~SoGtkExaminerViewer(void);

  void setAnimationEnabled(const SbBool enable);
  SbBool isAnimationEnabled(void) const;

  void stopAnimating(void);
  SbBool isAnimating(void) const;

  void setFeedbackVisibility(const SbBool enable);
  SbBool isFeedbackVisible(void) const;

  void setFeedbackSize(const int size);
  int getFeedbackSize(void) const;

  // overloaded
  virtual void setViewing(SbBool enable);
  virtual void setCamera(SoCamera * newCamera);
  virtual void setCursorEnabled(SbBool enable);

protected:
  SoGtkExaminerViewer(
    GtkWidget * parent,
    const char * name,
    SbBool embed,
    SoGtkFullViewer::BuildFlag flags,
    SoGtkViewer::Type type,
    SbBool build);

  virtual void actualRedraw(void);

  virtual void setSeekMode(SbBool enable);

  virtual void processEvent(GdkEvent * event);
  virtual void afterRealizeHook(void);

  virtual SbBool processSoEvent(const SoEvent * const event);

  virtual void leftWheelStart(void);
  virtual void leftWheelMotion(float value);
  virtual void bottomWheelStart(void);
  virtual void bottomWheelMotion(float value);
  virtual void rightWheelMotion(float value);

  virtual GtkWidget * makeSubPreferences(GtkWidget * parent);
  virtual void createViewerButtons(GtkWidget * parent, SbPList * buttonlist);

  virtual const char * getDefaultWidgetName(void) const;
  virtual const char * getDefaultTitle(void) const;
  virtual const char * getDefaultIconTitle(void) const;

  virtual void openViewerHelpCard(void);

private:
  void constructor(const SbBool build);

  void setCursorRepresentation(int mode);

private:
  // friends and family
  class SoAnyExaminerViewer * common;
  friend class SoAnyExaminerViewer;
  class SoGtkExaminerViewerP * pimpl;
  friend class SoGtkExaminerViewerP;

};

#endif // ! __COIN_SOGTK__

#ifdef __COIN_SOXT__

#include <Inventor/Xt/viewers/SoXtFullViewer.h>

class SbRotation;
class SoTimerSensor;
class SoAnyExaminerViewer;

// *************************************************************************

class SOXT_DLL_API SoXtExaminerViewer : public SoXtFullViewer {
  SOXT_OBJECT_HEADER(SoXtExaminerViewer, SoXtFullViewer);
  friend class SoAnyExaminerViewer;

public:
  SoXtExaminerViewer(
    Widget parent = (Widget) NULL,
    const char * name = NULL,
    SbBool embed = TRUE,
    SoXtFullViewer::BuildFlag flags = BUILD_ALL,
    SoXtViewer::Type type = BROWSER);
  ~SoXtExaminerViewer(void);

  virtual void setViewing(SbBool enable);

  void setAnimationEnabled(const SbBool enable);
  SbBool isAnimationEnabled(void) const;

  void stopAnimating(void);
  SbBool isAnimating(void) const;

  void setFeedbackVisibility(const SbBool enable);
  SbBool isFeedbackVisible(void) const;

  void setFeedbackSize(const int size);
  int getFeedbackSize(void) const;

  virtual void setCamera(SoCamera * camera);

protected:
  SoXtExaminerViewer(
    Widget parent,
    const char * name,
    SbBool embed,
    SoXtFullViewer::BuildFlag flags,
    SoXtViewer::Type type,
    SbBool build);

  virtual void actualRedraw(void);

  virtual void setSeekMode(SbBool enable);

  virtual void processEvent(XAnyEvent * event);

  virtual void afterRealizeHook(void);

  virtual SbBool processSoEvent(const SoEvent * const event);

  virtual void leftWheelStart(void);
  virtual void leftWheelMotion(float value);
  virtual void bottomWheelStart(void);
  virtual void bottomWheelMotion(float value);
  virtual void rightWheelMotion(float value);

  void openViewerHelpCard(void);

  virtual const char * getDefaultWidgetName(void) const;
  virtual const char * getDefaultTitle(void) const;
  virtual const char * getDefaultIconTitle(void) const;

  virtual void createViewerButtons(Widget parent, SbPList * buttonlist);
  void camerabuttonClicked(void);
  static void camerabuttonCB(Widget, XtPointer, XtPointer);

  virtual void createPrefSheet(void);

  Widget createFramedSpinAnimPrefSheetGuts(Widget parent);
  Widget createSpinAnimPrefSheetGuts(Widget parent);
  Widget spinanimtoggle;
  void spinanimtoggled(void);
  static void spinanimtoggledCB(Widget, XtPointer, XtPointer);

  Widget createRotAxisPrefSheetGuts(Widget parent);
  Widget createFramedRotAxisPrefSheetGuts(Widget parent);
  Widget rotpointaxestoggle, rotaxesoverlaytoggle, axessizewheel, axessizefield;
  void rotpointtoggled(void);
  static void rotpointtoggledCB(Widget, XtPointer, XtPointer);
  void rotaxesoverlaytoggled(void);
  static void rotaxesoverlaytoggledCB(Widget, XtPointer, XtPointer);
  void axeswheelmoved(int ticks);
  static void axeswheelmovedCB(Widget, XtPointer, XtPointer);
  void axesfieldchanged(void);
  static void axesfieldchangedCB(Widget, XtPointer, XtPointer);

private:
  void constructor(const SbBool build);

  void setCursorRepresentation(int mode);

  Widget camerabutton;
  struct {
    Pixmap ortho, ortho_ins;
    Pixmap perspective, perspective_ins;
    Pixmap nocam, nocam_ins;
  } camerapixmaps;

  Widget * prefparts;
  int numprefparts;

  SoAnyExaminerViewer * const common;

};

#endif // ! __COIN_SOXT__

#endif // ! SO@GUI@_EXAMINERVIEWER_H
