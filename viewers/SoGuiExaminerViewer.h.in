/**************************************************************************
 *
 *  This file is part of the Coin So@Gui@ GUI binding library.
 *  Copyright (C) 1998-2000 by Systems in Motion.  All rights reserved.
 *
 *  This library is free software; you can redistribute it and/or modify
 *  it under the terms of the GNU Lesser General Public License version
 *  2.1 as published by the Free Software Foundation.  See the file
 *  LICENSE.LGPL at the root directory of the distribution for all the
 *  details.
 *
 *  If you want to use Coin So@Gui@ for applications not compatible with the
 *  LGPL, please contact SIM to acquire a Professional Edition License.
 *
 *  Systems in Motion, Prof Brochs gate 6, N-7030 Trondheim, NORWAY
 *  http://www.sim.no/ support@sim.no Voice: +47 22114160 Fax: +47 22207097
 *
 **************************************************************************/

// $Id$

#ifndef SO@GUI@_EXAMINERVIEWER_H
#define SO@GUI@_EXAMINERVIEWER_H

#include <Inventor/SbLinear.h>
#include <Inventor/@Gui@/viewers/So@Gui@FullViewer.h>

class SoSeparator;
class SoSwitch;
class SoTranslation;
class SoScale;

class So@Gui@ThumbWheel;
class SoAnyExaminerViewer;

// *************************************************************************

class SO@GUI@_DLL_API So@Gui@ExaminerViewer : public So@Gui@FullViewer {
  SO@GUI@_OBJECT_HEADER(So@Gui@ExaminerViewer, So@Gui@FullViewer);
  friend class SoAnyExaminerViewer;
  @COMPONENTHEADER@

public:
  So@Gui@ExaminerViewer(@WIDGET@ parent = NULL,
                        const char * name = NULL,
                        SbBool embed = TRUE,
                        So@Gui@FullViewer::BuildFlag flag = BUILD_ALL,
                        So@Gui@Viewer::Type type = BROWSER);
  ~So@Gui@ExaminerViewer();

  void setAnimationEnabled(const SbBool enable);
  SbBool isAnimationEnabled(void) const;

  void stopAnimating(void);
  SbBool isAnimating(void) const;

  void setFeedbackVisibility(const SbBool enable);
  SbBool isFeedbackVisible(void) const;

  void setFeedbackSize(const int size);
  int getFeedbackSize(void) const;

  virtual void setViewing(SbBool enable);
  virtual void setCamera(SoCamera * camera);
  virtual void setCursorEnabled(SbBool enable);
  virtual void resetToHomePosition(void);
  virtual void viewAll(void);

protected:
  So@Gui@ExaminerViewer(@WIDGET@ parent,
                        const char * name,
                        SbBool embed,
                        So@Gui@FullViewer::BuildFlag flag,
                        So@Gui@Viewer::Type type,
                        SbBool build);

  virtual void leftWheelMotion(float val);
  virtual void bottomWheelMotion(float val);
  virtual void rightWheelMotion(float val);

  virtual @WIDGET@ makeSubPreferences(@WIDGET@ parent);
  virtual void createViewerButtons(@WIDGET@ parent, SbPList * buttonlist);

  virtual const char * getDefaultWidgetName(void) const;
  virtual const char * getDefaultTitle(void) const;
  virtual const char * getDefaultIconTitle(void) const;

  virtual void openViewerHelpCard(void);

  virtual SbBool processSoEvent(const SoEvent * const event);
  virtual void processEvent(@EVENT@ anyevent);
  virtual void setSeekMode(SbBool enable);
  virtual void actualRedraw(void);

  virtual void afterRealizeHook(void);


//// FIXME!: merge the So*ExaminerViewer defines properly. 20020109 mortene.

#ifdef __COIN_SOQT__

private:
  QPixmap * orthopixmap, * perspectivepixmap;

  void constructor(SbBool buildNow);
  void visibilityCallback(SbBool visible);
  static void visibilityCB(void * data, SbBool visible);

  QTimer * spindetecttimer;

  void setCursorRepresentation(int mode);
  QCursor * defaultcursor;

  QPushButton * cameratogglebutton;
  QLabel * feedbacklabel1, * feedbacklabel2;
  SoQtThumbWheel * feedbackwheel;
  QLineEdit * feedbackedit;
  void setEnableFeedbackControls(const SbBool flag);

private slots:

// preferences window:
  void spinAnimationToggled(bool);
  void feedbackVisibilityToggle(bool);
  void feedbackEditPressed(void);
  void feedbackWheelPressed(void);
  void feedbackSizeChanged(float val);
  void feedbackWheelReleased(void);

// viewer buttons row:
  void cameratoggleClicked(void);

private:
  SoAnyExaminerViewer * const common;
#endif // ! __COIN_SOQT__


#ifdef __COIN_SOWIN__
protected:

  virtual LRESULT onCommand(HWND window, UINT message, WPARAM wparam, LPARAM lparam);
  virtual void buildViewerButtonsEx(HWND parent, int x, int y, int size);
  
private:
  SoAnyExaminerViewer * common;
  SoWinExaminerViewerP * pimpl;
#endif // ! __COIN_SOWIN__


#ifdef __COIN_SOGTK__
protected:
  virtual void leftWheelStart(void);
  virtual void bottomWheelStart(void);

  virtual GtkWidget * makeSubPreferences(GtkWidget * parent);

private:
  void constructor(const SbBool build);
  void setCursorRepresentation(int mode);

private:
  // friends and family
  class SoAnyExaminerViewer * common;
  friend class SoAnyExaminerViewer;
  class SoGtkExaminerViewerP * pimpl;
  friend class SoGtkExaminerViewerP;
#endif // ! __COIN_SOGTK__

#ifdef __COIN_SOXT__
  virtual void leftWheelStart(void);
  virtual void bottomWheelStart(void);

  void camerabuttonClicked(void);
  static void camerabuttonCB(Widget, XtPointer, XtPointer);

  virtual void createPrefSheet(void);

  Widget createFramedSpinAnimPrefSheetGuts(Widget parent);
  Widget createSpinAnimPrefSheetGuts(Widget parent);
  Widget spinanimtoggle;
  void spinanimtoggled(void);
  static void spinanimtoggledCB(Widget, XtPointer, XtPointer);

  Widget createRotAxisPrefSheetGuts(Widget parent);
  Widget createFramedRotAxisPrefSheetGuts(Widget parent);
  Widget rotpointaxestoggle, rotaxesoverlaytoggle, axessizewheel, axessizefield;
  void rotpointtoggled(void);
  static void rotpointtoggledCB(Widget, XtPointer, XtPointer);
  void rotaxesoverlaytoggled(void);
  static void rotaxesoverlaytoggledCB(Widget, XtPointer, XtPointer);
  void axeswheelmoved(int ticks);
  static void axeswheelmovedCB(Widget, XtPointer, XtPointer);
  void axesfieldchanged(void);
  static void axesfieldchangedCB(Widget, XtPointer, XtPointer);

private:
  void constructor(const SbBool build);

  void setCursorRepresentation(int mode);

  Widget camerabutton;
  struct {
    Pixmap ortho, ortho_ins;
    Pixmap perspective, perspective_ins;
    Pixmap nocam, nocam_ins;
  } camerapixmaps;

  Widget * prefparts;
  int numprefparts;

  SoAnyExaminerViewer * const common;
#endif // ! __COIN_SOXT__
};

#endif // ! SO@GUI@_EXAMINERVIEWER_H
