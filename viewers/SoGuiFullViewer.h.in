/**************************************************************************\
 *
 *  This file is part of the Coin GUI toolkit libraries.
 *  Copyright (C) 1998-2002 by Systems in Motion.  All rights reserved.
 *
 *  This library is free software; you can redistribute it and/or
 *  modify it under the terms of the GNU Lesser General Public License
 *  version 2.1 as published by the Free Software Foundation.  See the
 *  file LICENSE.LGPL at the root directory of this source distribution
 *  for more details.
 *
 *  If you want to use this library with software that is incompatible
 *  licensewise with the LGPL, and / or you would like to take
 *  advantage of the additional benefits with regard to our support
 *  services, please contact Systems in Motion about acquiring a Coin
 *  Professional Edition License.  See <URL:http://www.coin3d.org> for
 *  more information.
 *
 *  Systems in Motion, Prof Brochs gate 6, 7030 Trondheim, NORWAY
 *  <URL:http://www.sim.no>, <mailto:support@sim.no>
 *
\**************************************************************************/

#ifndef SO@GUI@_FULLVIEWER_H
#define SO@GUI@_FULLVIEWER_H

#include <Inventor/@Gui@/viewers/So@Gui@Viewer.h>

// FIXME: get rid of non-templatized code. 20020108 mortene.
#ifdef __COIN_SOWIN__
typedef void AppPushButtonCB(HWND hwnd, int id, void * buttonData, void * userData);
typedef void RedrawAppPushButtonCB(LPDRAWITEMSTRUCT lpdis, void * userData);
typedef void CreateAppPushButtonCB(LPMEASUREITEMSTRUCT lpmis, void * userData);
#endif // ! __COIN_SOWIN__


class So@Gui@PopupMenu;

// *************************************************************************

class SO@GUI@_DLL_API So@Gui@FullViewer : public So@Gui@Viewer {
  SO@GUI@_OBJECT_ABSTRACT_HEADER(So@Gui@FullViewer, So@Gui@Viewer);

public:
  enum BuildFlag {
    BUILD_NONE       = 0x00,
    BUILD_DECORATION = 0x01,
    BUILD_POPUP      = 0x02,
    BUILD_ALL        = (BUILD_DECORATION | BUILD_POPUP)
  };

  void setDecoration(const SbBool on);
  SbBool isDecoration(void) const;

  void setPopupMenuEnabled(const SbBool on);
  SbBool isPopupMenuEnabled(void) const;

  @WIDGET@ getAppPushButtonParent(void) const;
  void addAppPushButton(@WIDGET@ newButton);
  void insertAppPushButton(@WIDGET@ newButton, int index);
  void removeAppPushButton(@WIDGET@ oldButton);
  int findAppPushButton(@WIDGET@ oldButton) const;
  int lengthAppPushButton(void) const;

  @WIDGET@ getRenderAreaWidget(void) const;

  virtual void setViewing(SbBool on);
  virtual void setCamera(SoCamera * cam);
  virtual void hide(void);

  virtual void setComponentCursor(const So@Gui@Cursor & cursor);

protected:
  So@Gui@FullViewer(@WIDGET@ parent,
                    const char * name,
                    SbBool embed,
                    BuildFlag flag,
                    Type type,
                    SbBool build);
  ~So@Gui@FullViewer();

  virtual void sizeChanged(const SbVec2s & size);

  @WIDGET@ buildWidget(@WIDGET@ parent);

  virtual void buildDecoration(@WIDGET@ parent);
  virtual @WIDGET@ buildLeftTrim(@WIDGET@ parent);
  virtual @WIDGET@ buildBottomTrim(@WIDGET@ parent);
  virtual @WIDGET@ buildRightTrim(@WIDGET@ parent);
  @WIDGET@ buildAppButtons(@WIDGET@ parent);
  @WIDGET@ buildViewerButtons(@WIDGET@ parent);
  virtual void createViewerButtons(@WIDGET@ parent, SbPList * buttonlist);

  virtual void buildPopupMenu(void);
  virtual void setPopupMenuString(const char * title);
  virtual void openPopupMenu(const SbVec2s position);

  void setPrefSheetString(const char * title);

  virtual void leftWheelStart(void);
  virtual void leftWheelMotion(float);
  virtual void leftWheelFinish(void);
  float getLeftWheelValue(void) const;
  void setLeftWheelValue(const float value);

  virtual void bottomWheelStart(void);
  virtual void bottomWheelMotion(float);
  virtual void bottomWheelFinish(void);
  float getBottomWheelValue(void) const;
  void setBottomWheelValue(const float value);

  virtual void rightWheelStart(void);
  virtual void rightWheelMotion(float);
  virtual void rightWheelFinish(void);
  float getRightWheelValue(void) const;
  void setRightWheelValue(const float value);

  void setLeftWheelString(const char * const name);
  @WIDGET@ getLeftWheelLabelWidget(void) const;
  void setBottomWheelString(const char * const name);
  @WIDGET@ getBottomWheelLabelWidget(void) const;
  void setRightWheelString(const char * const name);
  @WIDGET@ getRightWheelLabelWidget(void) const;

  virtual SbBool processSoEvent(const SoEvent * const event);

  virtual void openViewerHelpCard(void);

  virtual void createPrefSheet(void);

protected:
  @WIDGET@ leftDecoration;
  @WIDGET@ rightDecoration;
  @WIDGET@ bottomDecoration;

  @WIDGET@ leftWheelLabel;
  char * leftWheelStr;
  float leftWheelVal;

  @WIDGET@ rightWheelLabel;
  char * rightWheelStr;
  float rightWheelVal;

  @WIDGET@ bottomWheelLabel;
  char * bottomWheelStr;
  float bottomWheelVal;

  So@Gui@PopupMenu * prefmenu;

private:
  // Private class for implementation hiding. The idiom we're using is
  // a variant of what is known as the "Cheshire Cat", and is also
  // described as the "Bridge" pattern in «Design Patterns» by Gamma
  // et al (aka The Gang Of Four).
  class So@Gui@FullViewerP * pimpl;
  friend class SoGuiFullViewerP;
  friend class So@Gui@FullViewerP;


// FIXME: get rid of non-templatized code. 20020108 mortene.

#ifdef __COIN_SOQT__
protected:
  @WIDGET@ leftWheel;
  @WIDGET@ rightWheel;
  @WIDGET@ bottomWheel;

  virtual bool eventFilter(QObject * obj, QEvent * e);
  virtual void afterRealizeHook(void);
  virtual @WIDGET@ makeSubPreferences(@WIDGET@ parent);
#endif // __COIN_SOQT__

#ifdef __COIN_SOXT__ // FIXME: get rid of non-templatized code. 20020108 mortene.
protected:
  @WIDGET@ leftWheel;
  @WIDGET@ rightWheel;
  @WIDGET@ bottomWheel;

  Widget buildAppButtonsForm(Widget parent);

  Widget buildFunctionsSubmenu(Widget popup);
  Widget buildDrawStyleSubmenu(Widget popup);

  char * prefstring;
  char * popupTitle;
  SbBool popupEnabled;
  SbPList * viewerButtonWidgets;

  Widget prefshell;
  Widget prefsheet;

  void createPrefSheetShellAndForm(Widget & shell, Widget & form);
  void createDefaultPrefSheetParts(Widget * widgets, int & num, Widget form);
  void layoutPartsAndMapPrefSheet(Widget * widgets, int num, Widget form, Widget shell);

  Widget createSeekPrefSheetGuts(Widget parent);
  Widget createSeekDistPrefSheetGuts(Widget parent);
  Widget createZoomPrefSheetGuts(Widget parent);
  Widget createClippingPrefSheetGuts(Widget parent);
  Widget createStereoPrefSheetGuts(Widget parent);
  Widget createSpeedPrefSheetGuts(Widget parent);

  Widget createFramedSeekPrefSheetGuts(Widget parent);
  Widget createFramedSeekDistPrefSheetGuts(Widget parent);
  Widget createFramedZoomPrefSheetGuts(Widget parent);
  Widget createFramedClippingPrefSheetGuts(Widget parent);
  Widget createFramedStereoPrefSheetGuts(Widget parent);
  Widget createFramedSpeedPrefSheetGuts(Widget parent);

  void prefSheetDestroy(void);
  static void prefSheetDestroyCB(Widget, XtPointer, XtPointer);
  void seekPrefSheetField(void);
  static void seekPrefSheetFieldCB(Widget, XtPointer, XtPointer);
  void seekPrefSheetToggle1(void);
  static void seekPrefSheetToggle1CB(Widget, XtPointer, XtPointer);
  void seekPrefSheetToggle2(void);
  static void seekPrefSheetToggle2CB(Widget, XtPointer, XtPointer);

private:
  static void leftWheelStartCB(Widget, XtPointer, XtPointer);
  static void leftWheelMotionCB(Widget, XtPointer, XtPointer);
  static void leftWheelFinishCB(Widget, XtPointer, XtPointer);

  static void bottomWheelStartCB(Widget, XtPointer, XtPointer);
  static void bottomWheelMotionCB(Widget, XtPointer, XtPointer);
  static void bottomWheelFinishCB(Widget, XtPointer, XtPointer);

  static void rightWheelStartCB(Widget, XtPointer, XtPointer);
  static void rightWheelMotionCB(Widget, XtPointer, XtPointer);
  static void rightWheelFinishCB(Widget, XtPointer, XtPointer);

  void selectedViewing(void);
  void selectedDecoration(void);
  void selectedHeadlight(void);
  void selectedPrefs(void);
  void interactbuttonClicked(Boolean set);
  static void interactbuttonCB(Widget, XtPointer, XtPointer);
  void examinebuttonClicked(Boolean set);
  static void examinebuttonCB(Widget, XtPointer, XtPointer);
  void helpbuttonClicked(void);
  static void helpbuttonCB(Widget, XtPointer, XtPointer);
  void homebuttonClicked(void);
  static void homebuttonCB(Widget, XtPointer, XtPointer);
  void sethomebuttonClicked(void);
  static void sethomebuttonCB(Widget, XtPointer, XtPointer);
  void viewallbuttonClicked(void);
  static void viewallbuttonCB(Widget, XtPointer, XtPointer);
  void seekbuttonClicked(void);
  static void seekbuttonCB(Widget, XtPointer, XtPointer);
  void copyviewSelected(void);
  void pasteviewSelected(void);

  Widget seektimefield;
  Widget pointtoggle, objecttoggle;
  void seektimechanged(void);
  static void seektimechangedCB(Widget, XtPointer, XtPointer);
  void pointtoggled(void);
  static void pointtoggledCB(Widget, XtPointer, XtPointer);
  void objecttoggled(void);
  static void objecttoggledCB(Widget, XtPointer, XtPointer);
  Widget seekdistancefield;
  Widget percenttoggle, absolutetoggle;
  void seekdistancechanged(void);
  static void seekdistancechangedCB(Widget, XtPointer, XtPointer);
  void percenttoggled(void);
  static void percenttoggledCB(Widget, XtPointer, XtPointer);
  void absolutetoggled(void);
  static void absolutetoggledCB(Widget, XtPointer, XtPointer);

  SbVec2f zoomrange;
  Widget zoomfrom, zoomslider, zoomto, zoomvalue;
  void zoomfromchanged(void);
  static void zoomfromchangedCB(Widget, XtPointer, XtPointer);
  void zoomtochanged(void);
  static void zoomtochangedCB(Widget, XtPointer, XtPointer);
  void zoomsliderchanged(void);
  static void zoomsliderchangedCB(Widget, XtPointer, XtPointer);
  void zoomvaluechanged(void);
  static void zoomvaluechangedCB(Widget, XtPointer, XtPointer);

  void setCameraZoom(float zoom);
  float getCameraZoom(void);

  // clipping preferences widgets
  Widget autocliptoggle, nearwheel, farwheel, nearvalue, farvalue;

  void autocliptoggled(void);
  static void autocliptoggledCB(Widget, XtPointer, XtPointer);
  void nearwheelvaluechanged(void);
  static void nearwheelvaluechangedCB(Widget, XtPointer, XtPointer);
  void farwheelvaluechanged(void);
  static void farwheelvaluechangedCB(Widget, XtPointer, XtPointer);
  void nearvaluechanged(void);
  static void nearvaluechangedCB(Widget, XtPointer, XtPointer);
  void farvaluechanged(void);
  static void farvaluechangedCB(Widget, XtPointer, XtPointer);

  Widget stereotoggle;
  void stereotoggled(void);
  static void stereotoggledCB(Widget, XtPointer, XtPointer);

  void increaseInteractiveCount(void);
  static void increaseInteractiveCountCB(Widget, XtPointer, XtPointer);
  void decreaseInteractiveCount(void);
  static void decreaseInteractiveCountCB(Widget, XtPointer, XtPointer);

  Widget incspeedbutton, decspeedbutton;
  void speedInc(void);
  static void speedIncCB(Widget, XtPointer, XtPointer);
  void speedDec(void);
  static void speedDecCB(Widget, XtPointer, XtPointer);

  SbBool decorations;

  Widget viewerbase, canvas;

  Widget mainlayout;
  void showDecorationWidgets(SbBool enable);

  Widget appButtonsForm;
  SbPList * appButtonsList;
  void layoutAppPushButtons(Widget parent);

  Widget viewerButtonsForm;

  struct {
    Widget pick, view, help, home, set_home, view_all, seek;
  } viewerbuttons;

  struct {
    Pixmap pick, pick_ins;
    Pixmap view, view_ins;
    Pixmap help, help_ins;
    Pixmap home, home_ins;
    Pixmap set_home, set_home_ins;
    Pixmap view_all, view_all_ins;
    Pixmap seek, seek_ins;
  } pixmaps;

  struct {
    Widget leftwheel, bottomwheel, rightwheel;
  } labels;

  float seekdistance;
  SbBool seekdistaspercentage;
#endif // __COIN_SOXT__

#ifdef __COIN_SOGTK__ // FIXME: get rid of non-templatized code. 20020108 mortene.
protected:
  @WIDGET@ leftWheel;
  @WIDGET@ rightWheel;
  @WIDGET@ bottomWheel;

  virtual SbBool eventFilter(GtkWidget * object, GdkEvent * event);
  virtual GtkWidget * makeSubPreferences(GtkWidget * parent);

private:
  // hooks for SoAnyFullViewer
  // (FIXME: SoAnyFullViewer has been phased out. 20020111 mortene.)

  // menu selections
  void selectedPrefs(void);
  void selectedViewing(void);
  void selectedDecoration(void);
  void selectedHeadlight(void);
  void copyviewSelected(void);
  void pasteviewSelected(void);

  // button selections
  void interactbuttonClicked(void);
  void viewbuttonClicked(void);
  void helpbuttonClicked(void);
  void homebuttonClicked(void);
  void sethomebuttonClicked(void);
  void viewallbuttonClicked(void);
  void seekbuttonClicked(void);
#endif // __COIN_SOGTK__

#ifdef __COIN_SOWIN__ // FIXME: get rid of non-templatized code. 20020108 mortene.
public:
  enum ButtonId {
    VIEWERBUTTON_PICK,
    VIEWERBUTTON_VIEW,
    VIEWERBUTTON_HELP,
    VIEWERBUTTON_HOME,
    VIEWERBUTTON_SET_HOME,
    VIEWERBUTTON_VIEW_ALL,
    VIEWERBUTTON_SEEK
  };

  static void setDoButtonBar(SbBool enable);
  static SbBool isDoButtonBar(void);

  void addAppPushButtonCallback(AppPushButtonCB * callback,
                                 void * data = NULL);
  void addRedrawAppPushButtonCallback(RedrawAppPushButtonCB * callback,
                                       void * data = NULL);
  void addCreateAppPushButtonCallback(CreateAppPushButtonCB * callback,
                                       void * data = NULL);

  virtual void buildViewerButtonsEx(HWND parent, int x, int y, int size);

  virtual void selectedPrefs(void);

  virtual LRESULT onCommand(HWND window, UINT message, WPARAM wparam, LPARAM lparam);
  virtual LRESULT onDrawItem(HWND window, UINT message, WPARAM wparam, LPARAM lparam);
  virtual LRESULT onMeasureItem(HWND window, UINT message, WPARAM wparam, LPARAM lparam);

  void seekbuttonClicked(void);

  class SoFieldSensor * zoomSensor;

  class SoWinThumbWheel * rightWheel;
  class SoWinThumbWheel * bottomWheel;
  class SoWinThumbWheel * leftWheel;

  SbVec2f zoomrange;
  class SoWinViewerPrefSheet * prefsheet;

  SbPList * viewerButtonList;
  SbPList * appButtonList;

  HWND viewerWidget;
  HWND renderAreaWidget;

protected:
  void showDecorationWidgets(SbBool onOff);

private:
  HWND buildLeftWheel(HWND parent);
  HWND buildBottomWheel(HWND parent);
  HWND buildRightWheel(HWND parent);

  float getCameraZoom(void);
  void setCameraZoom(float zoom);

  // FIXME: quick hack done while merging all the header file
  // definitions for So*FullViewer. 20020111 mortene.
  friend class SoWinViewerPrefSheet;
#endif // __COIN_SOWIN__
};

// *************************************************************************

#endif // ! SO@GUI@_FULLVIEWER_H
