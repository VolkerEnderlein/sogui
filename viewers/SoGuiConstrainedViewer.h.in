/**************************************************************************\
 *
 *  This file is part of the Coin GUI toolkit libraries.
 *  Copyright (C) 1998-2002 by Systems in Motion.  All rights reserved.
 *
 *  This library is free software; you can redistribute it and/or
 *  modify it under the terms of the GNU Lesser General Public License
 *  version 2.1 as published by the Free Software Foundation.  See the
 *  file LICENSE.LGPL at the root directory of this source distribution
 *  for more details.
 *
 *  If you want to use this library with software that is incompatible
 *  licensewise with the LGPL, and / or you would like to take
 *  advantage of the additional benefits with regard to our support
 *  services, please contact Systems in Motion about acquiring a Coin
 *  Professional Edition License.  See <URL:http://www.coin3d.org> for
 *  more information.
 *
 *  Systems in Motion, Prof Brochs gate 6, 7030 Trondheim, NORWAY
 *  <URL:http://www.sim.no>, <mailto:support@sim.no>
 *
\**************************************************************************/

// @configure_input@
// $Id$

#ifndef SO@GUI@_CONSTRAINEDVIEWER_H
#define SO@GUI@_CONSTRAINEDVIEWER_H

#include <Inventor/@Gui@/viewers/So@Gui@FullViewer.h>

// ************************************************************************

class SO@GUI@_DLL_API So@Gui@ConstrainedViewer : public So@Gui@FullViewer {
  SO@GUI@_OBJECT_ABSTRACT_HEADER(So@Gui@ConstrainedViewer, So@Gui@FullViewer);
  @COMPONENTHEADER@

public:
  void setUpDirection(const SbVec3f & dir);
  const SbVec3f & getUpDirection(void) const;

  virtual void setCamera(SoCamera * newcam);
  virtual void saveHomePosition(void);
  virtual void resetToHomePosition(void);
  virtual void recomputeSceneSize(void);

protected:
  So@Gui@ConstrainedViewer(
    @WIDGET@ parent,
    const char * const name,
    SbBool embed,
    So@Gui@FullViewer::BuildFlag flag, 
    So@Gui@Viewer::Type type, 
    SbBool build);

  ~So@Gui@ConstrainedViewer();

  SbVec3f upVector;
  float sceneHeight;
  
  virtual void tiltCamera(float delta);
  virtual void bottomWheelMotion(float value);
  virtual void leftWheelMotion(float value);

  virtual void changeCameraValues(SoCamera * camera);
  void findUpDirection(SbVec2s mouselocation);
  void checkForCameraUpConstrain(void);

private:
  class So@Gui@ConstrainedViewerP * pimpl;

  void rotateCamera(const float delta) const;

}; // class So@Gui@ConstrainedViewer

// ************************************************************************

#endif // ! SO@GUI@_CONSTRAINEDVIEWER_H
