/**************************************************************************
 *
 *  This file is part of the Coin GUI binding libraries.
 *  Copyright (C) 2000-2001 by Systems in Motion.  All rights reserved.
 *
 *  The libraries this file is part of is free software; you can
 *  redistribute them and/or modify them under the terms of the GNU
 *  Lesser General Public License version 2.1 as published by the
 *  Free Software Foundation.  See the file LICENSE.LGPL at the root
 *  directory of the distribution for all the details.
 *
 *  If you want to use the Coin GUI binding libraries for applications
 *  not compatible with the LGPL, contact SIM about acquiring a
 *  Professional Edition License.
 *
 *  Systems in Motion, Prof Brochs gate 6, N-7030 Trondheim, NORWAY
 *  http://www.sim.no/ support@sim.no Voice: +47 22114160 Fax: +47 22207097
 *
 **************************************************************************/

// @configure_input@

#if SO@GUI@_DEBUG
static const char rcsid[] =
  "$Id$";
#endif // SO@GUI@_DEBUG

// *************************************************************************

/*!
  \class So@Gui@Viewer Inventor/@Gui@/viewers/So@Gui@Viewer.h
  \brief The So@Gui@Viewer class is the top level base viewer class.
  \ingroup components viewers common

  FIXME: document properly
  ...overview of what this class provides over parent class...
  ...keyboard combinations: Home, s, arrow keys (but only during
  viewing), Esc...
  ...explain pan, rotate, zoom, dolly, seek...
  ..explain the fact that we're moving the camera, not the scene...
  ...viewer modes (examine vs interact) w/ explanation of what they are
  useful for...
*/

// NOTE: The So@Gui@Viewer.cpp sourcecode file is completely
// autogenerated from "templatized" source code.

// *************************************************************************

#if HAVE_CONFIG_H
#include <config.h>
#endif // HAVE_CONFIG_H

#ifdef SOQT_INTERNAL
#include <qmetaobject.h>
#include <moc_SoQtViewer.cpp>
#endif // SOQT_INTERNAL

#include <stdlib.h>
#include <string.h>
#include <math.h>

#include <Inventor/@Gui@/common/gl.h>

#include <Inventor/SoDB.h>

#include <Inventor/nodes/SoBaseColor.h>
#include <Inventor/nodes/SoComplexity.h>
#include <Inventor/nodes/SoDirectionalLight.h>
#include <Inventor/nodes/SoDrawStyle.h>
#include <Inventor/nodes/SoLightModel.h>
#include <Inventor/nodes/SoLocateHighlight.h>
#include <Inventor/nodes/SoMaterialBinding.h>
#include <Inventor/nodes/SoOrthographicCamera.h>
#include <Inventor/nodes/SoPerspectiveCamera.h>
#include <Inventor/nodes/SoSeparator.h>
#include <Inventor/nodes/SoSwitch.h>

#include <Inventor/actions/SoGetBoundingBoxAction.h>
#include <Inventor/actions/SoSearchAction.h>
#include <Inventor/actions/SoRayPickAction.h>

#include <Inventor/errors/SoDebugError.h>
#include <Inventor/misc/SoCallbackList.h>
#include <Inventor/sensors/SoTimerSensor.h>
#include <Inventor/events/SoKeyboardEvent.h>
#include <Inventor/SoSceneManager.h>
#include <Inventor/SoPickedPoint.h>
#include <Inventor/SoLists.h>

#include <so@gui@defs.h>
#include <Inventor/@Gui@/So@Gui@.h>
#include <Inventor/@Gui@/viewers/So@Gui@Viewer.h>

#if HAVE_SOPOLYGONOFFSET
#include <Inventor/nodes/SoPolygonOffset.h>
#endif // HAVE_SOPOLYGONOFFSET

#ifndef M_PI
#define M_PI 3.1415926535f
#endif // ! M_PI

// environment variables
static int UNINITIALIZED_ENVVAR = -1; // value of envvars before tested
static int COIN_SHOW_FPS_COUNTER = UNINITIALIZED_ENVVAR;

// *************************************************************************

// The private data for the So@Gui@Viewer.
class So@Gui@ViewerP {
public:
  So@Gui@ViewerP(So@Gui@Viewer * publ);
  ~So@Gui@ViewerP(void);

  SoSeparator * createSuperScene(void);
  SoSeparator * createFPSSuperimposition(void);

  // Seek functionality
  SoTimerSensor * seeksensor;
  float seekperiod;
  SbBool inseekmode;
  SbBool seektopoint;
  SbVec3f camerastartposition, cameraendposition;
  float seekdistance;
  SbBool seekdistanceabs;

  // Camera handling
  SbBool deletecamera;
  SbVec3f storedposition;
  SbRotation storedorientation;
  float storedheightval;

  SoDirectionalLight * headlight;

  // Drawstyles
  So@Gui@Viewer::DrawStyle drawstyles[2];
  SoSwitch * drawstyleroot, * hiddenlineroot, * polygonoffsetparent;
  SoBaseColor * sobasecolor;
  SoComplexity * socomplexity;
  SoDrawStyle * sodrawstyle;
  SoLightModel * solightmodel;
  SoMaterialBinding * somaterialbinding;
  SoSeparator * usersceneroot;
  SoSwitch * superimpositionroot;
#if HAVE_SOPOLYGONOFFSET
  SoPolygonOffset * sopolygonoffset;
#endif // HAVE_SOPOLYGONOFFSET
  // Automatic setting of clipping planes
  SbBool adjustclipplanes;

  SoSeparator * fpsRoot;

  // Keep track of the frames-per-second counter.
  // Const value trick for old compilers.
  enum Constants { FRAMESARRAY_SIZE = 100 };
  double lasttimeofday;
  double frames[FRAMESARRAY_SIZE];
  double totalval;
  double currentframetime;
  int framecount;

  // Misc
  SoType cameratype;
  SbBool cursoron, localsetbuffertype;
  SoCallbackList * interactionstartCallbacks, * interactionendCallbacks;
  int interactionnesting;
  So@Gui@Viewer::BufferType buffertype;
  SbBool stereoviewing;
  float stereooffset;

  void reallyRedraw(const SbBool clearcol, const SbBool clearz = TRUE);

  // Seek functionality
  static void seeksensorCB(void * data, SoSensor *);

  // Drawstyles
  void changeDrawStyle(So@Gui@Viewer::DrawStyle style);
  SbBool drawInteractiveAsStill(void) const;
  SbBool drawAsHiddenLine(void) const;
  SbBool drawAsWireframeOverlay(void) const;
  So@Gui@Viewer::DrawStyle currentDrawStyle(void) const;

  // Automatic setting of clipping planes
  void setClippingPlanes(void);

  // Methods to keep track of frames-per-second value.
  void resetFrameCounter(void);
  void addFrametime(const double ft);
  void recordFPS(void);

  // Misc
  static void interactivestartCB(void *, So@Gui@Viewer * thisp);
  static void interactiveendCB(void *, So@Gui@Viewer * thisp);
  void moveCameraScreen(const SbVec2f & screenpos);

  SoSearchAction * searchaction;
  SbPList * superimpositions;
  SbIntList * superimpositionsenabled;
  So@Gui@Viewer * pub;
};

So@Gui@ViewerP::So@Gui@ViewerP(
  So@Gui@Viewer * publ)
{
  this->pub = publ;
  this->searchaction = new SoSearchAction;
  this->superimpositions = NULL;
  this->superimpositionsenabled = NULL;
} // So@Gui@ViewerP()

So@Gui@ViewerP::~So@Gui@ViewerP(void)
{
  if (this->superimpositions) {
    delete this->superimpositions;
    delete this->superimpositionsenabled;
    this->superimpositions = NULL;
  }
  delete this->searchaction;
}

SoSeparator *
So@Gui@ViewerP::createSuperScene(void)
{
  static const char * superSceneGraph[] =
  {
    "#Inventor V2.1 ascii",
    "",
    "Separator {",
    "  renderCaching OFF",
    "  renderCulling OFF",
    "  pickCulling OFF",
    "  boundingBoxCaching OFF",
    
    // Headlight. By inserting this before any scenegraph camera, the
    // light will always be pointing in the correct direction.
    "  DEF so@gui@->headlight DirectionalLight {",
    "    direction 1 -1 -10",
    "  }",
    "  DEF so@gui@->drawstyleroot Switch {",
    "    whichChild -1",
    "    DEF so@gui@->lightmodel LightModel {",
    "      model BASE_COLOR",
    "    }",
    "    DEF so@gui@->drawstyle DrawStyle {",
    "      pointSize ~",
    "      lineWidth ~",
    "      linePattern ~",
    "    }",
    "    DEF so@gui@->complexity Complexity {",
    "      textureQuality 0.0",
    "      value 0.1",
    "    }",
    "  }",
    "  DEF so@gui@->hiddenlineroot Switch {",
    "    whichChild -1",
    "    DEF so@gui@->basecolor BaseColor { }",
    "    DEF so@gui@->materialbinding MaterialBinding {",
    "      value OVERALL",
    "    }",
    "    DEF so@gui@->polygonoffsetparent Switch {",
    "      whichChild -1",
#if HAVE_SOPOLYGONOFFSET
    "      DEF so@gui@->polygonoffset PolygonOffset { }",
#endif // HAVE_SOPOLYGONOFFSET
    "    }",
    "  }",
    "  DEF so@gui@->userscenegraphroot Separator {",
    "  }",
    "}",
    NULL
  };

  int i, bufsize;
  for (i = bufsize = 0; superSceneGraph[i]; i++)
    bufsize += strlen(superSceneGraph[i]) + 1;
  char * buf = new char [bufsize + 1];
  for (i = bufsize = 0; superSceneGraph[i]; i++) {
    strcpy(buf + bufsize, superSceneGraph[i]);
    bufsize += strlen(superSceneGraph[i]);
    buf[bufsize] = '\n';
    bufsize++;
  }
  SoInput * input = new SoInput;
  input->setBuffer(buf, bufsize);
  SoNode * root = NULL;
  SbBool ok = SoDB::read(input, root);
  delete input;
  delete [] buf;
  if (!ok) {
    SoDebugError::post("So@Gui@Viewer::So@Gui@Viewer",
		       "couldn't create viewer superscene");
    return NULL;
  }
  assert(root->isOfType(SoSeparator::getClassTypeId()));
  root->ref();

  this->searchaction->reset();
  this->searchaction->setSearchingAll(TRUE);
  this->searchaction->setInterest(SoSearchAction::FIRST);

#define LOCATE_NODE(member, type, name) \
  do { \
    member = NULL; \
    this->searchaction->setName(SbName(name)); \
    this->searchaction->apply(root); \
    if (this->searchaction->isFound()) { \
      SoNode * node = this->searchaction->getPath()->getTail(); \
      assert(node != NULL); \
      if (node->isOfType(type::getClassTypeId())) \
        member = (type *) node; \
    } else { \
      SoDebugError::post("So@Gui@ViewerP::createSuperScene", \
                         "didn't locate node \"%s\"", name); \
    } \
  } while (FALSE)

  LOCATE_NODE(this->headlight, SoDirectionalLight, "so@gui@->headlight");
  LOCATE_NODE(this->drawstyleroot, SoSwitch, "so@gui@->drawstyleroot");
  LOCATE_NODE(this->hiddenlineroot, SoSwitch, "so@gui@->hiddenlineroot");
  LOCATE_NODE(this->polygonoffsetparent, SoSwitch,
	      "so@gui@->polygonoffsetparent");
  LOCATE_NODE(this->usersceneroot, SoSeparator, "so@gui@->userscenegraphroot");

  LOCATE_NODE(this->sobasecolor, SoBaseColor, "so@gui@->basecolor");
  LOCATE_NODE(this->socomplexity, SoComplexity, "so@gui@->complexity");
  LOCATE_NODE(this->sodrawstyle, SoDrawStyle, "so@gui@->drawstyle");
  LOCATE_NODE(this->solightmodel, SoLightModel, "so@gui@->lightmodel");
  LOCATE_NODE(this->somaterialbinding, SoMaterialBinding, "so@gui@->materialbinding");
  if (this->sobasecolor) this->sobasecolor->setOverride(TRUE);
  if (this->socomplexity) this->socomplexity->setOverride(TRUE);
  if (this->sodrawstyle) this->sodrawstyle->setOverride(TRUE);
  if (this->solightmodel) this->solightmodel->setOverride(TRUE);
  if (this->somaterialbinding) this->somaterialbinding->setOverride(TRUE);
#ifdef HAVE_POLYGONOFFSET
  LOCATE_NODE(this->sopolygonoffset, SoPolygonOffset, "so@gui@->polygonoffset");
  if (this->sopolygonoffset) this->sopolygonoffset->setOverride(TRUE);
#endif

#undef LOCATE_NODE
  this->searchaction->reset();

  root->unrefNoDelete();
  return (SoSeparator *) root;
}

SoSeparator *
So@Gui@ViewerP::createFPSSuperimposition(void)
{
  static const char * fpsSceneGraph[] =
  {
    "#Inventor V2.1 ascii",
    "",
    "Separator {",
    "  renderCaching OFF",
    "  renderCulling OFF",
    "  pickCulling OFF",
    "  boundingBoxCaching OFF",
    "}",
    NULL
  };

  int i, bufsize;
  for (i = bufsize = 0; fpsSceneGraph[i]; i++)
    bufsize += strlen(fpsSceneGraph[i]) + 1;
  char * buf = new char [bufsize + 1];
  for (i = bufsize = 0; fpsSceneGraph[i]; i++) {
    strcpy(buf + bufsize, fpsSceneGraph[i]);
    bufsize += strlen(fpsSceneGraph[i]);
    buf[bufsize] = '\n';
    bufsize++;
  }
  SoInput * input = new SoInput;
  input->setBuffer(buf, bufsize);
  SoNode * root = NULL;
  SbBool ok = SoDB::read(input, root);
  delete input;
  delete [] buf;
  if (!ok) {
    SoDebugError::post("So@Gui@Viewer::So@Gui@Viewer",
		       "couldn't create viewer superscene");
    return NULL;
  }
  assert(root->isOfType(SoSeparator::getClassTypeId()));
  root->ref();

  root->unrefNoDelete();
  return NULL;
  return (SoSeparator *) root;
}


#define PRIVATE(ptr) (ptr->pimpl)

// *************************************************************************

SO@GUI@_OBJECT_ABSTRACT_SOURCE(So@Gui@Viewer);

// *************************************************************************

/*!
  \enum So@Gui@Viewer::Type

  Hints about what context the viewer will be used in.  Usually not
  very interesting for the application programmer, it doesn't matter
  much which value is used for the viewer type.  This "feature" of the
  viewer is included just to be compatible with the old SGI Inventor
  API.
*/
/*!
  \var So@Gui@Viewer::Type So@Gui@Viewer::BROWSER

  If a user-supplied scenegraph passed into the setSceneGraph()
  function does not contain a camera, setting the viewer type to
  BROWSER will make the viewer in that case automatically set up a
  camera outside the scene, as part of the viewer's private and hidden
  "supergraph".
*/
/*!
  \var So@Gui@Viewer::Type So@Gui@Viewer::EDITOR

  If a user-supplied scenegraph passed into the setSceneGraph)
  function does not contain a camera, setting the viewer type to
  EDITOR will make the viewer in that case automatically set up a
  camera \e in the user-supplied scene.

  So if you want to avoid having the So@Gui@Viewer class muck about
  with your supplied scenegraph, set the type-flag to
  So@Gui@Viewer::BROWSER instead.
*/

/*!
  \enum So@Gui@Viewer::DecimationStrategy
  FIXME: write documentation for enum
*/
/*!
  \var So@Gui@Viewer::DecimationStrategy So@Gui@Viewer::NORMAL
  FIXME: write documentation for enum definition
*/
/*!
  \var So@Gui@Viewer::DecimationStrategy So@Gui@Viewer::FIXED_NUM_TRIANGLES
  FIXME: write documentation for enum definition
*/
/*!
  \var So@Gui@Viewer::DecimationStrategy So@Gui@Viewer::FRAMES_PER_SECOND
  FIXME: write documentation for enum definition
*/
/*!
  \var So@Gui@Viewer::DecimationStrategy So@Gui@Viewer::FIXED_PERCENTAGE
  FIXME: write documentation for enum definition
*/

/*!
  \enum So@Gui@Viewer::DrawStyle
  FIXME: write documentation for enum
*/
/*!
  \var So@Gui@Viewer::DrawStyle So@Gui@Viewer::VIEW_AS_IS
  FIXME: write documentation for enum definition
*/
/*!
  \var So@Gui@Viewer::DrawStyle So@Gui@Viewer::VIEW_HIDDEN_LINE
  FIXME: write documentation for enum definition
*/
/*!
  \var So@Gui@Viewer::DrawStyle So@Gui@Viewer::VIEW_WIREFRAME_OVERLAY
  FIXME: write documentation for enum definition
*/
/*!
  \var So@Gui@Viewer::DrawStyle So@Gui@Viewer::VIEW_NO_TEXTURE
  FIXME: write documentation for enum definition
*/
/*!
  \var So@Gui@Viewer::DrawStyle So@Gui@Viewer::VIEW_LOW_COMPLEXITY
  FIXME: write documentation for enum definition
*/
/*!
  \var So@Gui@Viewer::DrawStyle So@Gui@Viewer::VIEW_LINE
  FIXME: write documentation for enum definition
*/
/*!
  \var So@Gui@Viewer::DrawStyle So@Gui@Viewer::VIEW_POINT
  FIXME: write documentation for enum definition
*/
/*!
  \var So@Gui@Viewer::DrawStyle So@Gui@Viewer::VIEW_BBOX
  FIXME: write documentation for enum definition
*/
/*!
  \var So@Gui@Viewer::DrawStyle So@Gui@Viewer::VIEW_LOW_RES_LINE
  FIXME: write documentation for enum definition
*/
/*!
  \var So@Gui@Viewer::DrawStyle So@Gui@Viewer::VIEW_LOW_RES_POINT
  FIXME: write documentation for enum definition
*/
/*!
  \var So@Gui@Viewer::DrawStyle So@Gui@Viewer::VIEW_SAME_AS_STILL
  FIXME: write documentation for enum definition
*/

/*!
  \enum So@Gui@Viewer::DrawType
  FIXME: write documentation for enum
*/
/*!
  \var So@Gui@Viewer::DrawType So@Gui@Viewer::STILL
  FIXME: write documentation for enum definition
*/
/*!
  \var So@Gui@Viewer::DrawType So@Gui@Viewer::INTERACTIVE
  FIXME: write documentation for enum definition
*/

/*!
  \enum So@Gui@Viewer::BufferType
  FIXME: write documentation for enum
*/
/*!
  \var So@Gui@Viewer::BufferType So@Gui@Viewer::BUFFER_SINGLE
  FIXME: write documentation for enum definition
*/
/*!
  \var So@Gui@Viewer::BufferType So@Gui@Viewer::BUFFER_DOUBLE
  FIXME: write documentation for enum definition
*/
/*!
  \var So@Gui@Viewer::BufferType So@Gui@Viewer::BUFFER_INTERACTIVE
  FIXME: write documentation for enum definition
*/

/*!
  \var SoCamera * So@Gui@Viewer::camera

  Pointer to the viewer camera.
*/

/*!
  \var So@Gui@Viewer::Type So@Gui@Viewer::type

  (Just included for compatibility reasons. Can safely be ignored.)
*/

/*!
  \var SbBool So@Gui@Viewer::viewingFlag

  Whether the viewer is in view mode or not.
*/

/*!
  \var SoSeparator * So@Gui@Viewer::sceneRoot

  The root of the viewer scene graph.
*/

/*!
  \var SoNode * So@Gui@Viewer::sceneGraph

  The root of the user scene graph.
*/

/*!
  \var SbBool So@Gui@Viewer::altSwitchBack

  Flag on returning from alt in pick mode?
*/

/*!
  \var SoGetBoundingBoxAction So@Gui@Viewer::autoClipBboxAction

  Action for getting the scene bounding box, for setting the clip planes.
*/

/*!
  \var float So@Gui@Viewer::minimumNearPlane

  Percentage of distance to far plane for distance to near plane.
*/

// *************************************************************************

/*!
  \internal

  Return the parent node in the scene graph of the given \a node.
  NB: this is just a quick'n'dirty thing for often executed code,
  and doesn't cover cases where nodes have multiple parents.
*/

static SoGroup *
get_parent_of_node(So@Gui@ViewerP * pimpl, SoNode * root, SoNode * node)
{
  assert(node && root && "get_parent_of_node() called with null argument");
  if (pimpl == NULL) {
    SoSearchAction search;
    search.setSearchingAll(TRUE);
    search.setNode(node);
    search.apply(root);
    assert(search.getPath() && "node not found in scenegraph");
    SoNode * parent = ((SoFullPath *)search.getPath())->getNodeFromTail(1);
    assert(parent && "couldn't find parent");
    return (SoGroup *)parent;
  } else {
    pimpl->searchaction->reset();
    pimpl->searchaction->setSearchingAll(TRUE);
    pimpl->searchaction->setNode(node);
    pimpl->searchaction->apply(root);
    assert(pimpl->searchaction->getPath() && "node not found in scenegraph");
    SoNode * parent =
      ((SoFullPath *) pimpl->searchaction->getPath())->getNodeFromTail(1);
    assert(parent && "couldn't find parent");
    pimpl->searchaction->reset();
    return (SoGroup *)parent;
  }
}

// *************************************************************************

/*!
  Constructor. \a parent, \a name and \a embed are passed on to
  So@Gui@RenderArea, so see the documentation for our parent
  constructor for for more information on those.

  The \a t type setting hints about what context the viewer will be
  used in.  Usually not very interesting for the application
  programmer, but if you want to make sure the So@Gui@Viewer class
  doesn't muck about with your supplied scenegraph, set the type-flag
  to So@Gui@Viewer::BROWSER.  (This "feature" of the viewer is
  included just to be compatible with the old SGI Inventor API.)

  The \a build flag decides whether or not to delay building the
  widgets / window which is going to make up the components of the
  viewer.
*/

So@Gui@Viewer::So@Gui@Viewer(
  @WIDGET@ parent,
  const char * name,
  SbBool embed,
  So@Gui@Viewer::Type t,
  SbBool build)
: inherited(parent, name, embed, TRUE, TRUE, FALSE)
{
  PRIVATE(this) = new So@Gui@ViewerP(this);

  // initialization of protected data
  this->type = t;
  this->viewingFlag = TRUE;
  this->camera = NULL;
  this->altSwitchBack = FALSE;
  this->sceneGraph = NULL;

  // initialization of internal data
  PRIVATE(this)->cursoron = TRUE;
  PRIVATE(this)->localsetbuffertype = FALSE;

  PRIVATE(this)->cameratype = SoPerspectiveCamera::getClassTypeId();
  PRIVATE(this)->deletecamera = FALSE;
  PRIVATE(this)->buffertype = this->isDoubleBuffer() ? BUFFER_DOUBLE : BUFFER_SINGLE;

  PRIVATE(this)->interactionstartCallbacks = new SoCallbackList;
  PRIVATE(this)->interactionendCallbacks = new SoCallbackList;
  PRIVATE(this)->interactionnesting = 0;

  PRIVATE(this)->seekdistance = 50.0f;
  PRIVATE(this)->seekdistanceabs = TRUE;
  PRIVATE(this)->seektopoint = TRUE;
  PRIVATE(this)->seekperiod = 2.0f;
  PRIVATE(this)->inseekmode = FALSE;
  PRIVATE(this)->seeksensor = new SoTimerSensor(So@Gui@ViewerP::seeksensorCB, this);

  this->sceneRoot = PRIVATE(this)->createSuperScene();
  this->sceneRoot->ref();

  PRIVATE(this)->drawstyles[STILL] = VIEW_AS_IS;
  PRIVATE(this)->drawstyles[INTERACTIVE] = VIEW_SAME_AS_STILL;

  this->addStartCallback(So@Gui@ViewerP::interactivestartCB);
  this->addFinishCallback(So@Gui@ViewerP::interactiveendCB);

  PRIVATE(this)->adjustclipplanes = TRUE;
  this->autoClipBboxAction = NULL;

  PRIVATE(this)->stereoviewing = FALSE;
  PRIVATE(this)->stereooffset = 0.1f;

  if (build) {
    this->setClassName("So@Gui@Viewer");
    @WIDGET@ widget = this->buildWidget(this->getParentWidget());
    this->setBaseWidget(widget);
  }

  PRIVATE(this)->fpsRoot = PRIVATE(this)->createFPSSuperimposition();
  if (PRIVATE(this)->fpsRoot) {
    this->addSuperimposition(PRIVATE(this)->fpsRoot);
    this->setSuperimpositionEnabled(PRIVATE(this)->fpsRoot, FALSE);
  }
  PRIVATE(this)->resetFrameCounter();
} // So@Gui@Viewer()

// *************************************************************************

/*!
  Destructor.
*/

So@Gui@Viewer::~So@Gui@Viewer(
  void)
{
  delete this->autoClipBboxAction;

  delete PRIVATE(this)->interactionstartCallbacks;
  delete PRIVATE(this)->interactionendCallbacks;

  delete PRIVATE(this)->seeksensor;

  if (this->sceneGraph) this->setSceneGraph(NULL);
  this->sceneRoot->unref();
  if (PRIVATE(this)->superimpositions != NULL) {
    for (int i = PRIVATE(this)->superimpositions->getLength() - 1; i >= 0; i--) {
      SoNode * node = (SoNode *) (*PRIVATE(this)->superimpositions)[i];
      node->unref();
    }
  }
  delete PRIVATE(this);
} // ~So@Gui@Viewer()

// *************************************************************************

/*!
  Set the camera we want to view the scene with.

  The camera passed in as an argument to this method must be part of
  the viewer's scenegraph.

  \sa getCamera()
*/

void
So@Gui@Viewer::setCamera(SoCamera * cam)
{
  if (this->camera) {
    // If we made the camera, detach it. Otherwise just leave it in
    // the graph.
    if (PRIVATE(this)->deletecamera) {
      SoGroup * cameraparent =
	get_parent_of_node(PRIVATE(this), this->sceneRoot, this->camera);
      cameraparent->removeChild(this->camera);
      PRIVATE(this)->deletecamera = FALSE;
    }

    this->camera->unref();
  }

  this->camera = cam;

  if (this->camera) {
    this->camera->ref();
    this->saveHomePosition();
    PRIVATE(this)->cameratype = this->camera->getTypeId();
  }
} // setCamera()

// *************************************************************************

/*!
  Returns the camera currently used by the viewer for the user's main
  viewpoint.

  It \e is possible that this function returns \c NULL, for instance
  if there's no scenegraph present in the viewer.  (This is mostly
  meant as a note for developers extending the So@Gui@ library, as
  application programmers usually controls if and when a viewer
  contains a scenegraph, and therefore know in advance if this method
  will return a valid camera pointer.)

  \sa setCamera()
*/

SoCamera *
So@Gui@Viewer::getCamera(void) const
{
  return this->camera;
} // getCamera()

// *************************************************************************

/*!
  When the viewer has to make its own camera as a result of the graph
  passed to setSceneGraph() not containing any camera nodes, this call
  can be made in advance to decide which type the camera will be of.

  Default is to use an SoPerspectiveCamera.

  If this method is called when there is a scene graph and a camera
  already set up, it will delete the old camera and set up a camera
  with the new type if the \a t type is different from that of the
  current camera.

  \sa getCameraType()
*/

void
So@Gui@Viewer::setCameraType(SoType t)
{
  SoType perspectivetype = SoPerspectiveCamera::getClassTypeId();
  SoType orthotype = SoOrthographicCamera::getClassTypeId();
  SbBool oldisperspective = PRIVATE(this)->cameratype.isDerivedFrom(perspectivetype);
  SbBool newisperspective = t.isDerivedFrom(perspectivetype);

  if ((oldisperspective && newisperspective) ||
       (!oldisperspective && !newisperspective)) // Same old, same old..
    return;

#if SO@GUI@_DEBUG
  SbBool valid = TRUE;
  if (t == SoType::badType()) valid = FALSE;
  if (valid) {
    valid = FALSE;
    if (newisperspective) valid = TRUE;
    if (t.isDerivedFrom(orthotype)) valid = TRUE;
  }

  if (!valid) {
    SoDebugError::post("So@Gui@Viewer::setCameraType",
                       "not a valid camera type: '%s'",
                       t == SoType::badType() ?
                       "badType" : t.getName().getString());
    return;
  }
#endif // SO@GUI@_DEBUG

  if (this->camera != NULL) {
    SoCamera * newcamera = (SoCamera *)t.createInstance();
    newcamera->aspectRatio.setValue(this->camera->aspectRatio.getValue());
    newcamera->focalDistance.setValue(this->camera->focalDistance.getValue());
    newcamera->orientation.setValue(this->camera->orientation.getValue());
    newcamera->position.setValue(this->camera->position.getValue());
    newcamera->viewportMapping.setValue(this->camera->viewportMapping.getValue());

    SoPerspectiveCamera * newpcam = NULL, * oldpcam = NULL;
    SoOrthographicCamera * newocam = NULL, * oldocam = NULL;

    float focaldist = this->camera->focalDistance.getValue();

    if (newisperspective) {
      newpcam = (SoPerspectiveCamera *)newcamera;
      oldocam = (SoOrthographicCamera *)this->camera;

      // focalDistance==0.0f happens for empty scenes.
      if (focaldist != 0.0f) {
        newpcam->heightAngle =
          2.0f * atan(oldocam->height.getValue() / 2.0f / focaldist);
      }
      else {
        newpcam->heightAngle = 0.0f;
      }
    }
    else {
      newocam = (SoOrthographicCamera *)newcamera;
      oldpcam = (SoPerspectiveCamera *)this->camera;
      newocam->height =
        2 * focaldist * tan(oldpcam->heightAngle.getValue() / 2.0f);
    }

    SoGroup * cameraparent =
      get_parent_of_node(PRIVATE(this), this->sceneRoot, this->camera);
    cameraparent->insertChild(newcamera,
                               cameraparent->findChild(this->camera));
    SoCamera * oldcamera = !PRIVATE(this)->deletecamera ? this->camera : NULL;
    this->setCamera(newcamera); // This will set PRIVATE(this)->cameratype.
    PRIVATE(this)->deletecamera = TRUE;
    if (oldcamera) { cameraparent->removeChild(oldcamera); }
  }
  else { // A camera has not been instantiated for the scene.
    PRIVATE(this)->cameratype = t; // No call to setCamera(), so set type explicitly.
  }
} // setCameraType()

// *************************************************************************

/*!
  Returns camera type which will be used when the viewer has to make its
  own camera.

  Note that this call does \e not return the current cameratype, as one
  might expect. Use getCamera() and SoType::getTypeId() for that inquiry.

  \sa setCameraType()
*/

SoType
So@Gui@Viewer::getCameraType(void) const
{
  return PRIVATE(this)->cameratype;
} // getCameraType()

// *************************************************************************

/*!
  Reposition the current camera so we can see the complete scene.
*/

void
So@Gui@Viewer::viewAll(void)
{
  if (this->camera && this->sceneGraph)
    this->camera->viewAll(this->sceneGraph, this->getViewportRegion());
} // viewAll()

// *************************************************************************

/*!
  Store the current camera settings for later retrieval with
  resetToHomePosition().

  \sa resetToHomePosition()
*/

void
So@Gui@Viewer::saveHomePosition(void)
{
  if (! this->camera) return; // probably a scene-less viewer

  PRIVATE(this)->storedorientation = this->camera->orientation.getValue();
  PRIVATE(this)->storedposition = this->camera->position.getValue();

  SoType t = this->camera->getTypeId();
  if (t.isDerivedFrom(SoOrthographicCamera::getClassTypeId())) {
    PRIVATE(this)->storedheightval =
      ((SoOrthographicCamera *)this->camera)->height.getValue();
  }
  else if (t.isDerivedFrom(SoPerspectiveCamera::getClassTypeId())) {
    PRIVATE(this)->storedheightval =
      ((SoPerspectiveCamera *)this->camera)->heightAngle.getValue();
  }
} // saveHomePosition()

// *************************************************************************

/*!
  Restore the saved camera settings.

  \sa saveHomePosition()
*/

void
So@Gui@Viewer::resetToHomePosition(void)
{
  if (! this->camera) return; // probably a scene-less viewer

  this->camera->orientation = PRIVATE(this)->storedorientation;
  this->camera->position = PRIVATE(this)->storedposition;

  SoType t = this->camera->getTypeId();
  if (t.isDerivedFrom(SoOrthographicCamera::getClassTypeId()))
    ((SoOrthographicCamera *)this->camera)->height = PRIVATE(this)->storedheightval;
  else if (t.isDerivedFrom(SoPerspectiveCamera::getClassTypeId()))
    ((SoPerspectiveCamera *)this->camera)->heightAngle = PRIVATE(this)->storedheightval;

  PRIVATE(this)->setClippingPlanes();
  this->camera->focalDistance =
    (this->camera->farDistance.getValue() +
     this->camera->nearDistance.getValue())/2;
} // resetToHomePosition()

// *************************************************************************

/*!
  Turn the camera headlight on or off.

  Default is to have a headlight turned on.

  \sa isHeadlight(), getHeadlight()
*/

void
So@Gui@Viewer::setHeadlight(SbBool on)
{
  PRIVATE(this)->headlight->on = on;
} // setHeadlight()

// *************************************************************************

/*!
  Returns status of the viewer headlight, whether it is on or off.

  \sa setHeadlight(), getHeadlight()
*/

SbBool
So@Gui@Viewer::isHeadlight(void) const
{
  return PRIVATE(this)->headlight->on.getValue();
} // isheadlight()

// *************************************************************************

/*!
  Returns the a pointer to the directional light node which is the
  viewer headlight.

  The fields of the node is available for user editing.

  \sa isHeadlight(), setHeadlight()
*/

SoDirectionalLight *
So@Gui@Viewer::getHeadlight(void) const
{
  return PRIVATE(this)->headlight;
} // getHeadlight()

// *************************************************************************

/*!
  Set up a drawing style. The \a type argument specifies if the given
  \a style should be interpreted as the drawstyle during animation or
  when the camera is static.

  Default values for the drawing style is to render the scene "as is"
  in both still mode and while the camera is moving.

  See the documentation for the \a DrawType and \a DrawStyle for more
  information.

  \sa getDrawStyle()
*/

void
So@Gui@Viewer::setDrawStyle(So@Gui@Viewer::DrawType type,
                            So@Gui@Viewer::DrawStyle style)
{
#if SO@GUI@_DEBUG
  if ((type != STILL) && (type != INTERACTIVE)) {
    SoDebugError::postWarning("So@Gui@Viewer::setDrawStyle",
                              "unknown drawstyle type setting 0x%x", type);
    return;
  }
#endif // SO@GUI@_DEBUG

  if (style == this->getDrawStyle(type)) {
#if SO@GUI@_DEBUG && 0 // SO@GUI@_DEBUG
    SoDebugError::postWarning("So@Gui@Viewer::setDrawStyle",
                              "drawstyle for type 0x%02x already 0x%02x",
                              type, style);
#endif // SO@GUI@_DEBUG
    return;
  }

  PRIVATE(this)->drawstyles[type] = style;
  PRIVATE(this)->changeDrawStyle(PRIVATE(this)->currentDrawStyle());
} // setDrawStyle()

// *************************************************************************

/*!
  Return current drawstyles for the given type (\a STILL or
  \a INTERACTIVE).

  \sa setDrawStyle()
*/

So@Gui@Viewer::DrawStyle
So@Gui@Viewer::getDrawStyle(const So@Gui@Viewer::DrawType type) const
{
#if SO@GUI@_DEBUG
  if ((type != STILL) && (type != INTERACTIVE)) {
    SoDebugError::postWarning("So@Gui@Viewer::setDrawStyle",
                              "unknown drawstyle type setting 0x%x", type);
    return PRIVATE(this)->drawstyles[STILL];
  }
#endif // SO@GUI@_DEBUG
  return PRIVATE(this)->drawstyles[type];
} // getDrawStyle()

// *************************************************************************

/*!
  Set the viewer's buffer type. Available types are \c
  So@Gui@Viewer::BUFFER_SINGLE, \c So@Gui@Viewer::BUFFER_DOUBLE and \c
  So@Gui@Viewer::BUFFER_INTERACTIVE.

  (With a buffer type of \c So@Gui@Viewer::BUFFER_INTERACTIVE, the
  viewer will render with doublebuffering during user interaction and
  with single buffering otherwise.)

  Default is \c So@Gui@Viewer::BUFFER_DOUBLE.

  \sa getBufferingType()
*/

void
So@Gui@Viewer::setBufferingType(So@Gui@Viewer::BufferType type)
{
  if (type == PRIVATE(this)->buffertype) return;

  if (type != BUFFER_SINGLE &&
      type != BUFFER_DOUBLE &&
      type != BUFFER_INTERACTIVE) {
#if SO@GUI@_DEBUG
    SoDebugError::postWarning("So@Gui@Viewer::setBufferingType",
                              "unknown buffer type 0x%x", type);
#endif // SO@GUI@_DEBUG
    return;
  }

  PRIVATE(this)->buffertype = type;

  PRIVATE(this)->localsetbuffertype = TRUE;
  inherited::setDoubleBuffer(type == BUFFER_DOUBLE);
  PRIVATE(this)->localsetbuffertype = FALSE;
} // setBufferingType()

// *************************************************************************

/*!
  Return the viewer's buffer type.

  \sa setBufferingType()
*/

So@Gui@Viewer::BufferType
So@Gui@Viewer::getBufferingType(void) const
{
  return PRIVATE(this)->buffertype;
} // getBufferingType()

// *************************************************************************

/*!
  Set view mode.

  If the view mode is on, user events will be caught and used to
  influence the camera position/orientation. If view mode is off,
  all events in the viewer canvas will be passed along to the scene
  graph.

  Default is to have the view mode active.

  \sa getViewing()
*/

void
So@Gui@Viewer::setViewing(
  SbBool enable)
{
  if (this->viewingFlag == enable) {
#if SO@GUI@_DEBUG
    SoDebugError::postWarning("So@Gui@Viewer::setViewing",
                               "unnecessary called");
#endif // SO@GUI@_DEBUG
    return;
  }

  this->viewingFlag = enable;

  // Turn off the selection indicators when we go back from picking
  // mode into viewing mode.
  if (this->viewingFlag) {
    SoGLRenderAction * action = this->getGLRenderAction();
    if (action != NULL)
      SoLocateHighlight::turnOffCurrentHighlight(action);
  }
} // setViewing()

// *************************************************************************

/*!
  Return state of view mode.

  \sa setViewing()
*/

SbBool
So@Gui@Viewer::isViewing(void) const
{
  return this->viewingFlag;
} // isViewing()

// *************************************************************************

/*!
  Set whether or not the mouse cursor representation should be visible
  in the viewer canvas.

  Default value is on.

  \sa getCursorEnabled()
*/

void
So@Gui@Viewer::setCursorEnabled(SbBool on)
{
  PRIVATE(this)->cursoron = on;
} // setCursorEnabled()

// *************************************************************************

/*!
  Returns visibility status of mouse cursor.

  \sa setCursorEnabled()
*/

SbBool
So@Gui@Viewer::isCursorEnabled(void) const
{
  return PRIVATE(this)->cursoron;
} // isCursorEnabled()

// *************************************************************************

/*!
  Turn on or off continuous automatic adjustments of the near
  and far clipping planes.

  Automatic clipping is on as default.

  \sa getAutoClipping()
*/

void
So@Gui@Viewer::setAutoClipping(
  SbBool enable)
{
#if SO@GUI@_DEBUG
  if (PRIVATE(this)->adjustclipplanes == enable) {
    SoDebugError::postWarning("So@Gui@Viewer::setAutoClipping",
                              "unnecessary called");
    return;
  }
#endif // SO@GUI@_DEBUG
  PRIVATE(this)->adjustclipplanes = enable;
  if (enable) this->scheduleRedraw();
} // setAutoClipping()

// *************************************************************************

/*!
  Return value of the automatic near/far clipplane adjustment indicator.

  \sa setAutoClipping()
*/

SbBool
So@Gui@Viewer::isAutoClipping(
  void) const
{
  return PRIVATE(this)->adjustclipplanes;
} // isAutoClipping()

// *************************************************************************

/*!
  Turn stereo viewing on or off.

  \sa isStereoViewing()
*/

void
So@Gui@Viewer::setStereoViewing(// virtual
  SbBool enable)
{
  PRIVATE(this)->stereoviewing = enable;
  this->scheduleRedraw();
} // setStereoViewing()

// *************************************************************************

/*!
  Returns a boolean indicating whether or not we're in stereo viewing
  mode.

  NOTE: in the original InventorXt API, this method was virtual.  It is not
  virtual here.

  \sa setStereoViewing()
*/

SbBool
So@Gui@Viewer::isStereoViewing(
  void) const
{
  return PRIVATE(this)->stereoviewing;
} // setStereoViewing()

// *************************************************************************

/*!
  Set the offset between the two viewpoints when in stereo mode.

  NOTE: In the original InventorXt API, this method was not virtual.

  \sa getStereoOffset()
*/

void
So@Gui@Viewer::setStereoOffset(// virtual
  const float dist)
{
  PRIVATE(this)->stereooffset = dist;
  this->scheduleRedraw();
} // setStereoOffset()

/*!
  Return the offset distance between the two viewpoints when in stereo mode.

  \sa setStereoOffset()
*/

float
So@Gui@Viewer::getStereoOffset(
  void) const
{
  return PRIVATE(this)->stereooffset;
} // getStereoOffset()

// *************************************************************************

/*!
  Toggle between seeking to a point or seeking to an object.

  Default is to seek to a point.

  \sa isDetailSeek()
*/

void
So@Gui@Viewer::setDetailSeek(const SbBool on)
{
#if SO@GUI@_DEBUG
  if (PRIVATE(this)->seektopoint == on) {
    SoDebugError::postWarning("So@Gui@Viewer::setDetailSeek",
                              "unnecessary called");
    return;
  }
#endif // SO@GUI@_DEBUG
  PRIVATE(this)->seektopoint = on;
} // setDetailSeek()

// *************************************************************************

/*!
  Returns a value indicating whether or not seeks will be performed
  to the exact point of picking or just towards the picked object.

  \sa setDetailSeek()
*/

SbBool
So@Gui@Viewer::isDetailSeek(void) const
{
  return PRIVATE(this)->seektopoint;
} // isDetailSeek()

// *************************************************************************

/*!
  Set the duration of animating the camera repositioning
  after a successful seek. Call with \a seconds equal to \a 0.0 to make
  the camera jump immediately to the correct spot.

  Default value is 2 seconds.

  \sa getSeekTime()
*/

void
So@Gui@Viewer::setSeekTime(const float seconds)
{
  if (seconds < 0.0f) {
#if SO@GUI@_DEBUG
    SoDebugError::postWarning("So@Gui@Viewer::setSeekTime",
                              "an attempt was made to set a negative seek "
                              "time duration");
#endif // SO@GUI@_DEBUG
    return;
  }
  PRIVATE(this)->seekperiod = seconds;
} // setSeekTime()

// *************************************************************************

/*!
  Returns the camera repositioning duration following a seek action.

  \sa setSeekTime()
*/

float
So@Gui@Viewer::getSeekTime(void) const
{
  return PRIVATE(this)->seekperiod;
} // getSeekTime()

// *************************************************************************

/*!
  Add a function to call when user interaction with the scene starts.

  \sa removeStartCallback(), addFinishCallback()
*/

void
So@Gui@Viewer::addStartCallback(So@Gui@ViewerCB * func, void * data)
{
  PRIVATE(this)->interactionstartCallbacks->addCallback((SoCallbackListCB *)func, data);
} // addStartCallback()

/*!
  Remove one of the functions which has been set up to be called when user
  interaction with the scene starts.

  \sa addStartCallback(), removeFinishCallback()
*/

void
So@Gui@Viewer::removeStartCallback(So@Gui@ViewerCB * func, void * data)
{
  PRIVATE(this)->interactionstartCallbacks->removeCallback((SoCallbackListCB *)func,
                                                  data);
} // removeStartCallback()

// *************************************************************************

/*!
  Add a function to call when user interaction with the scene ends.

  \sa removeFinishCallback(), addStartCallback()
*/

void
So@Gui@Viewer::addFinishCallback(So@Gui@ViewerCB * func, void * data)
{
  PRIVATE(this)->interactionendCallbacks->addCallback((SoCallbackListCB *)func, data);
} // addFinishCallback()

/*!
  Remove one of the functions which has been set up to be called when user
  interaction with the scene ends.

  \sa addFinishCallback(), removeStartCallback()
*/

void
So@Gui@Viewer::removeFinishCallback(So@Gui@ViewerCB * func, void * data)
{
  PRIVATE(this)->interactionendCallbacks->removeCallback((SoCallbackListCB *)func,
                                                data);
} // removeFinishCallback()

// *************************************************************************

/*!
  Copy the current camera to the system clipboard. This makes it
  easy to synchronize camera settings over different applications.

  Note: has not been implemented yet.

  \sa pasteView()
*/

void
So@Gui@Viewer::copyView(const SbTime eventTime)
{
  // FIXME: Needs So@Gui@Clipboard implementation first. 19990507 mortene.
  SO@GUI@_STUB();
} // copyView()

// *************************************************************************

/*!
  Set a new camera from the system clipboard.

  Note: has not been implemented yet.

  \sa copyView()
*/

void
So@Gui@Viewer::pasteView(const SbTime eventTime)
{
  // FIXME: Needs So@Gui@Clipboard implementation first. 19990507 mortene.
  SO@GUI@_STUB();
} // pasteView()

// *************************************************************************

/*!
  Not used, only included for compatibility reasons.
*/

void
So@Gui@Viewer::recomputeSceneSize(
  void)
{
  // FIXME: implement and use SO@GUI@_OBSOLETED(). 20010815 mortene.
  SoDebugError::postInfo("So@Gui@Viewer::recomputeSceneSize",
                         "this method is obsoleted, don't use it");
} // recomputeSceneSize()

// *************************************************************************

/*!
  Large Model Visualization; not implemented yet.
*/

void
So@Gui@Viewer::setDecimationStrategy(const So@Gui@Viewer::DecimationStrategy /*strategy*/)
{
  SO@GUI@_STUB();
} // setDecimationStrategy()

// *************************************************************************

/*!
  Large Model Visualization; not implemented yet.
*/

So@Gui@Viewer::DecimationStrategy
So@Gui@Viewer::getDecimationStrategy(void) const
{
  SO@GUI@_STUB();
  return NORMAL;
}

// *************************************************************************

/*!
  Large Model Visualization; not implemented yet.
*/

void
So@Gui@Viewer::setGoalNumberOfTriangles(const int32_t /*goal*/)
{
  SO@GUI@_STUB();
} // setGoalNumberOfTriangles()

// *************************************************************************

/*!
  Large Model Visualization; not implemented yet.
*/

int32_t
So@Gui@Viewer::getGoalNumberOfTriangles(void) const
{
  SO@GUI@_STUB();
  return -1;
} // getGoalNumberOfTriangles()

// *************************************************************************

/*!
  Large Model Visualization; not implemented yet.
*/

void
So@Gui@Viewer::setGoalFramesPerSecond(const float /*goal*/)
{
  SO@GUI@_STUB();
} // setGoalFramesPerSecond()

// *************************************************************************

/*!
  Large Model Visualization; not implemented yet.
*/

float
So@Gui@Viewer::getGoalFramesPerSecond(void) const
{
  SO@GUI@_STUB();
  return 72.0f;
} // getGoalFramesPerSecond()

// *************************************************************************

/*!
  Large Model Visualization; not implemented yet.
*/

void
So@Gui@Viewer::setFixedPercentage(const float /*percent*/)
{
  SO@GUI@_STUB();
} // setFixedPercentage()

// *************************************************************************

/*!
  Large Model Visualization; not implemented yet.
*/

float
So@Gui@Viewer::getFixedPercentage(void) const
{
  SO@GUI@_STUB();
  return 100.0f;
} // getFixedPercentage()

// *************************************************************************

/*!
  Large Model Visualization; not implemented yet.
*/

void
So@Gui@Viewer::enableFullRenderingWhenStill(const SbBool /*on*/)
{
  SO@GUI@_STUB();
} // enableFullRendering()

// *************************************************************************

/*!
  Large Model Visualization; not implemented yet.
*/

SbBool
So@Gui@Viewer::isFullRenderingWhenStill(void) const
{
  SO@GUI@_STUB();
  return TRUE;
} // isFullRendering()

/*!
  Large Model Visualization; not implemented yet.
*/

SbBool
So@Gui@Viewer::isStillNow(void) const
{
  SO@GUI@_STUB();
  return this->getInteractiveCount() == 0;
} // isStillNow()

// *************************************************************************

/*!
  Large Model Visualization; not implemented yet.
*/

void
So@Gui@Viewer::setFramesPerSecondCallback(So@Gui@ViewerFPSCB * /*callback*/, void * /*data*/)
{
  SO@GUI@_STUB();
} // setFramesPerSecond()

// *************************************************************************

/*!
  Large Model Visualization; not implemented yet.
*/

void
So@Gui@Viewer::setNumSamples(const int /*numFrames*/)
{
  SO@GUI@_STUB();
} // setNumSamples()

// *************************************************************************

/*!
  Large Model Visualization; not implemented yet.
*/

int
So@Gui@Viewer::getNumSamples(void) const
{
  SO@GUI@_STUB();
  return 10;
} // getNumSamples()

// *************************************************************************

/*!
  Large Model Visualization; not implemented yet.
*/

void
So@Gui@Viewer::setDecimationPercentageCallback(So@Gui@ViewerDecimationPercentageCB * /*cb*/, void * /*data*/)
{
  SO@GUI@_STUB();
} // setDecimationPercentageCallback()

// *************************************************************************

/*!
  Large Model Visualization; not implemented yet.
*/

float
So@Gui@Viewer::getCurrentDecimationPercentage(void) const
{
  SO@GUI@_STUB();
  return 100.0f;
} // getCurrentDecimateionPercentage()

// *************************************************************************

/*!
  Overloaded to update the local bufferingtype variable.

  \sa setBufferingType(), getBufferingType()
*/

void
So@Gui@Viewer::setDoubleBuffer(const SbBool on)
{
  if (!PRIVATE(this)->localsetbuffertype)
    PRIVATE(this)->buffertype = on ? BUFFER_DOUBLE : BUFFER_SINGLE;

  inherited::setDoubleBuffer(on);
} // setDoubleBuffer()

// *************************************************************************

/*!
  Give the viewer a scenegraph to render and interact with. Overloaded
  from parent class so the viewer can add it's own nodes to control
  rendering in different styles, rendering with a headlight, etc.

  The \a root node will be inserted under the \e viewer's root node,
  which also covers the nodes necessary to implement the different
  preferences drawing style settings.

  If no camera is part of the scene graph under \a root, one will be
  added automatically.

  \sa getSceneGraph(), setCameraType()
*/

void
So@Gui@Viewer::setSceneGraph(SoNode * root)
{
  if (root == this->sceneGraph) {
#if SO@GUI@_DEBUG
    SoDebugError::postWarning("So@Gui@Viewer::setSceneGraph",
                               "called with the same root as already set");
#endif // SO@GUI@_DEBUG
    return;
  }

  // If the So@Gui@RenderArea hasn't yet set up its pointer to the
  // So@Gui@Viewer "viewer root" (i.e. the viewer-generated root above
  // the user-supplied root), do that first.
  if (!inherited::getSceneGraph())
    inherited::setSceneGraph(this->sceneRoot);

  if (this->sceneGraph) {
    if (this->getCamera())
      this->setCamera(NULL);
    // Release the old user-supplied graph.
    PRIVATE(this)->usersceneroot->removeChild(this->sceneGraph);
    // old: this->sceneRoot->removeChild(this->sceneGraph);
  }

  this->sceneGraph = root;
  if (!root) return;

  PRIVATE(this)->usersceneroot->addChild(this->sceneGraph);
  // old: this->sceneRoot->addChild(this->sceneGraph);

  // Search for a camera in the user-supplied scenegraph.
  // SoSearchAction search;
  // search.setType(SoCamera::getClassTypeId());
  // search.apply(this->sceneGraph);
  PRIVATE(this)->searchaction->reset();
  PRIVATE(this)->searchaction->setType(SoCamera::getClassTypeId());
  PRIVATE(this)->searchaction->apply(this->sceneGraph);
  SoCamera * scenecamera = NULL;
  if (PRIVATE(this)->searchaction->isFound()) {
    SoFullPath * fullpath =
      (SoFullPath *) PRIVATE(this)->searchaction->getPath();
    scenecamera = (SoCamera *)fullpath->getTail();
  }

#if 0 // debug
  SoDebugError::postInfo("So@Gui@Viewer::setSceneGraph",
                         "camera %sfound in graph",
                         scenecamera ? "" : "not ");
#endif // debug

  // Make our own camera if none was available.
  if (!scenecamera) {
    scenecamera = (SoCamera *) PRIVATE(this)->cameratype.createInstance();
    PRIVATE(this)->deletecamera = TRUE;

    // If type==BROWSER, camera should be inserted in the private
    // viewer "supergraph", if it's equal to EDITOR it should be
    // inserted in the user-supplied scenegraph.
    if (this->type == So@Gui@Viewer::BROWSER) {
      this->sceneRoot->insertChild(scenecamera, 1);
    }
    else { // this->type == So@Gui@Viewer::EDITOR
      if (this->sceneGraph->isOfType(SoGroup::getClassTypeId())) {
        // At the uppermost leftmost position in the user-supplied
        // scenegraph.
        ((SoGroup *)this->sceneGraph)->insertChild(scenecamera, 0);
      }
      else {
        // Make an extra depth level to fit the camera node into the
        // user-scenegraph.
        SoGroup * g = new SoGroup;
        g->addChild(scenecamera);
        g->addChild(this->sceneGraph);
        PRIVATE(this)->usersceneroot->removeChild(this->sceneGraph);
        PRIVATE(this)->usersceneroot->addChild(g);
        this->sceneGraph = g;
      }
    }

    scenecamera->viewAll(this->sceneGraph, this->getViewportRegion());
  }

  this->setCamera(scenecamera);
} // setSceneGraph()

// *************************************************************************

// doc in super
SoNode *
So@Gui@Viewer::getSceneGraph(void)
{
  // Overloaded from parent class to return the root of the scene
  // graph set by the user, without the extras added by the viewer to
  // control rendering.
  return this->sceneGraph;
} // getSceneGraph()

// *************************************************************************

/*!
  Put the viewer in or out of seek mode.

  If the user performs a mouse button click when the viewer is in seek
  mode, the camera will be repositioned so the camera focal point lies
  on the point of the geometry under the mouse cursor.

  \sa isSeekMode(), setDetailSeek()
*/

void
So@Gui@Viewer::setSeekMode(
  SbBool enable)
{
#if SO@GUI@_DEBUG
  // user might have switched mode during seek, so if enable == FALSE,
  // isViewing() is irrelevant.
  if (enable)
    assert(this->isViewing());
#endif // SO@GUI@_DEBUG

  if (! enable && PRIVATE(this)->seeksensor->isScheduled()) {
    PRIVATE(this)->seeksensor->unschedule();
    this->interactiveCountDec();
  }

  PRIVATE(this)->inseekmode = enable;
} // setSeekMode()

// *************************************************************************

/*!
  Return a flag which indicates whether or not the viewer is in seek mode.

  \sa setSeekMode()
*/

SbBool
So@Gui@Viewer::isSeekMode(void) const
{
  return PRIVATE(this)->inseekmode;
} // isSeekMode()

// *************************************************************************

/*!
  Call this method to initiate a seek action towards the 3D intersection
  of the scene and the ray from the screen coordinate's point and in the same
  direction as the camera is pointing.

  Returns \a TRUE if the ray from the \a screenpos position intersect with
  any parts of the onscreen geometry, otherwise FALSE.
*/

SbBool
So@Gui@Viewer::seekToPoint(const SbVec2s screenpos)
{
  if (! this->camera)
    return FALSE;

  SoRayPickAction rpaction(this->getViewportRegion());
  rpaction.setPoint(screenpos);
  rpaction.setRadius(2);
  rpaction.apply(this->sceneRoot);

  SoPickedPoint * picked = rpaction.getPickedPoint();
  if (!picked) {
//    this->setSeekMode(FALSE);
    return FALSE;
  }
//  this->setSeekMode(TRUE);

  SbVec3f hitpoint;
  if (PRIVATE(this)->seektopoint) {
    hitpoint = picked->getPoint();
  } else {
    SoGetBoundingBoxAction bbaction(this->getViewportRegion());
    bbaction.apply(picked->getPath());
    SbBox3f bbox = bbaction.getBoundingBox();
    hitpoint = bbox.getCenter();
  }

  PRIVATE(this)->camerastartposition = this->camera->position.getValue();

  float fd = PRIVATE(this)->seekdistance;
  if (PRIVATE(this)->seekdistanceabs)
    fd *= (hitpoint - this->camera->position.getValue()).length()/100.0f;
  this->camera->focalDistance = fd;

  SbVec3f dir;
  this->camera->orientation.getValue().multVec(SbVec3f(0, 0, -1), dir);
  PRIVATE(this)->cameraendposition = hitpoint - fd * dir;

  if (PRIVATE(this)->seeksensor->isScheduled()) {
    PRIVATE(this)->seeksensor->unschedule();
    this->interactiveCountDec();
  }

  PRIVATE(this)->seeksensor->setBaseTime(SbTime::getTimeOfDay());
  PRIVATE(this)->seeksensor->schedule();
  this->interactiveCountInc();

  return TRUE;
} // seeekToPoint()

// *************************************************************************


void
So@Gui@ViewerP::reallyRedraw(const SbBool clearcol, const SbBool clearz)
{
  if (this->drawAsHiddenLine()) {

    // First pass: render as filled, but with the background color.

    this->solightmodel->model.setIgnored(FALSE); // override as SoLightModel::BASE
    this->sodrawstyle->style.setIgnored(TRUE); // draw as-is filled/lines/points
    this->socomplexity->type.setIgnored(TRUE); // as-is rendering space
    this->socomplexity->value.setIgnored(TRUE); // as-is complexity on non-simple shapes
    // textureQuality field of socomplexity node is always 0.0

    this->sobasecolor->rgb.setValue(pub->getBackgroundColor());
    this->sobasecolor->rgb.setIgnored(FALSE);
    this->somaterialbinding->value.setIgnored(FALSE); // override with OVERALL
    this->polygonoffsetparent->whichChild = SO_SWITCH_ALL;

    pub->getSceneManager()->render(clearcol, clearz);

    // Second pass, render wireframe on top.

    this->sodrawstyle->style = SoDrawStyle::LINES;
    this->sodrawstyle->style.setIgnored(FALSE); // force lines
    this->sobasecolor->rgb.setIgnored(TRUE); // use as-is line colors
    this->somaterialbinding->value.setIgnored(TRUE); // as-is
    this->polygonoffsetparent->whichChild = SO_SWITCH_NONE;

    pub->getSceneManager()->render(FALSE, FALSE);

    return;
  }
  if (this->drawAsWireframeOverlay()) {
    // First pass: render as-is, with polygon offset

    this->solightmodel->model.setIgnored(TRUE);
    this->somaterialbinding->value.setIgnored(TRUE);
    this->sobasecolor->rgb.setIgnored(TRUE);
    this->sodrawstyle->style.setIgnored(TRUE); // draw as-is filled/lines/points
    this->socomplexity->type.setIgnored(TRUE); // as-is rendering space
    this->socomplexity->value.setIgnored(TRUE); // as-is complexity on non-simple shapes
    this->socomplexity->textureQuality.setIgnored(TRUE);

    this->somaterialbinding->value.setIgnored(TRUE); // override with OVERALL
    this->polygonoffsetparent->whichChild = SO_SWITCH_ALL;

    pub->getSceneManager()->render(clearcol, clearz);

    // Second pass, render wireframe on top.
    this->sobasecolor->rgb.setValue(SbColor(1.0f, 0.0f, 0.0f));
    this->sobasecolor->rgb.setIgnored(FALSE);
    this->somaterialbinding->value.setIgnored(FALSE); // override with OVERALL

    this->solightmodel->model.setIgnored(FALSE); // override as SoLightModel::BASE
    this->sodrawstyle->style = SoDrawStyle::LINES;
    this->sodrawstyle->style.setIgnored(FALSE); // force lines
    this->polygonoffsetparent->whichChild = SO_SWITCH_NONE;
    this->socomplexity->textureQuality.setIgnored(FALSE);

    pub->getSceneManager()->render(FALSE, FALSE);

    SbBool oldnot;

    // disable override nodes
    (void) this->sobasecolor->rgb.enableNotify(FALSE);
    this->sobasecolor->rgb.setIgnored(TRUE);
    (void) this->sobasecolor->rgb.enableNotify(TRUE);

    (void) this->somaterialbinding->value.enableNotify(FALSE);
    this->somaterialbinding->value.setIgnored(TRUE);
    (void) this->somaterialbinding->value.enableNotify(TRUE);

    (void) this->solightmodel->model.enableNotify(FALSE);
    this->solightmodel->model.setIgnored(TRUE);
    (void) this->solightmodel->model.enableNotify(TRUE);

    (void) this->socomplexity->textureQuality.enableNotify(FALSE);
    this->socomplexity->textureQuality.setIgnored(TRUE);
    (void) this->socomplexity->textureQuality.enableNotify(TRUE);

    (void) this->sodrawstyle->style.enableNotify(FALSE);
    this->sodrawstyle->style.setIgnored(TRUE);
    (void) this->sodrawstyle->style.enableNotify(TRUE);
    return;
  }

  SbBool clearzbuffer = TRUE;
  So@Gui@Viewer::DrawStyle style = this->currentDrawStyle();
  switch (style) {
  case So@Gui@Viewer::VIEW_LOW_RES_LINE:
  case So@Gui@Viewer::VIEW_LOW_RES_POINT:
  case So@Gui@Viewer::VIEW_BBOX:
    clearzbuffer = FALSE;
  default:
    break; // Include "default:" case to avoid compiler warning.
  }

  pub->getSceneManager()->render(clearcol, clearzbuffer && clearz);
}


/*!
  Overloaded from parent class to be able to do the necessary two-pass
  rendering e.g. if the drawing style is \e hidden \e line.
*/

void
So@Gui@Viewer::actualRedraw(void)
{
  // Recalculate near/far planes.
  if (this->isAutoClipping())
    PRIVATE(this)->setClippingPlanes();

  SbBool clearcol = this->isClearBeforeRender();

  if (this->isStereoViewing()) {
    SbColor bgcol = this->getSceneManager()->getBackgroundColor();

    SbBool quadstereo = this->isQuadBufferStereo();
#ifndef HAVE_SOCAMERA_SETSTEREOMODE
    SoCamera * camera = this->getCamera();
    SbVec3f camerapos = camera->position.getValue();
    SbVec3f cameradir(0.0f, 0.0f, -1.0f);
    SbVec3f offsetvec(1.0f, 0.0f, 0.0f);
    float offset = this->getStereoOffset() * 0.5f;
    SbRotation camerarot = camera->orientation.getValue();
    camerarot.multVec(cameradir, cameradir);
    camerarot.multVec(offsetvec, offsetvec);
    SbVec3f focalpoint = camerapos + cameradir * camera->focalDistance.getValue();

    SbBool notifystore = camera->isNotifyEnabled();
    SbBool positionstore = camera->position.isNotifyEnabled();
    SbBool orientationstore = camera->orientation.isNotifyEnabled();
    // turn off notification to avoid redraws
    camera->enableNotify(FALSE);
    camera->position.enableNotify(FALSE);
    camera->orientation.enableNotify(FALSE);

    camera->position = camerapos - offsetvec * offset;
    SbVec3f dir = focalpoint - camera->position.getValue();
    SbRotation rot(cameradir, dir);
    camera->orientation = camerarot * rot;
    if (quadstereo) {
      if (this->isDoubleBuffer())
        glDrawBuffer(GL_BACK_LEFT);
      else
        glDrawBuffer(GL_FRONT_LEFT);
      PRIVATE(this)->reallyRedraw(clearcol);
    }
    else { // red/cyan
      if (this->isDoubleBuffer())
        glDrawBuffer(GL_BACK);
      else
        glDrawBuffer(GL_FRONT);
      glClearColor(bgcol[0], bgcol[1], bgcol[2], 0.0f);
      glClear(GL_DEPTH_BUFFER_BIT|GL_COLOR_BUFFER_BIT);
      glColorMask(1,0,0,1); // draw red-only
      PRIVATE(this)->reallyRedraw(FALSE, FALSE);
    }

    // right eye
    camera->position = camerapos + offsetvec * offset;
    dir = focalpoint - camera->position.getValue();
    rot.setValue(cameradir, dir);
    camera->orientation = camerarot * rot;

    if (quadstereo) {
      if (this->isDoubleBuffer())
        glDrawBuffer(GL_BACK_RIGHT);
      else
        glDrawBuffer(GL_FRONT_RIGHT);
      PRIVATE(this)->reallyRedraw(clearcol);
    }
    else {
      glColorMask(0,1,1,1); // draw green and blue
      PRIVATE(this)->reallyRedraw(FALSE, TRUE);
    }

    // restore camera values and enable notification
    camera->position = camerapos;
    camera->orientation = camerarot;
    camera->position.enableNotify(positionstore);
    camera->orientation.enableNotify(orientationstore);
    camera->enableNotify(notifystore);
    if (quadstereo) {
      if (this->isDoubleBuffer())
        glDrawBuffer(GL_BACK);
      else
        glDrawBuffer(GL_FRONT);
    }
    else {
      glColorMask(1,1,1,1); // restore GL color mask
    }
#else // HAVE_SOCAMERA_SETSTEREOMODE

    if (!quadstereo) {
      SoCamera * camera = this->getCamera();
   if (this->isDoubleBuffer())
    glDrawBuffer(GL_BACK);
   else
    glDrawBuffer(GL_FRONT);
      glClearColor(bgcol[0], bgcol[1], bgcol[2], 0.0f);
      glClear(GL_DEPTH_BUFFER_BIT|GL_COLOR_BUFFER_BIT);
      glColorMask(1,0,0,1); // draw red-only
      camera->setStereoAdjustment(this->getStereoOffset());
      camera->setStereoMode(SoCamera::LEFT_VIEW);
      PRIVATE(this)->reallyRedraw(FALSE, FALSE);

      camera->setStereoMode(SoCamera::RIGHT_VIEW);
      glColorMask(0,1,1,1); // draw green and blue
      PRIVATE(this)->reallyRedraw(FALSE, TRUE);
      camera->setStereoMode(SoCamera::MONOSCOPIC);
      glColorMask(1,1,1,1); // restore GL color mask
    }
    else {
      SoCamera * camera = this->getCamera();
   if (this->isDoubleBuffer())
    glDrawBuffer(GL_BACK_LEFT);
   else
    glDrawBuffer(GL_FRONT_LEFT);
      camera->setStereoAdjustment(this->getStereoOffset());
      camera->setStereoMode(SoCamera::LEFT_VIEW);
      PRIVATE(this)->reallyRedraw(clearcol);
      camera->setStereoMode(SoCamera::RIGHT_VIEW);
   if (this->isDoubleBuffer())
    glDrawBuffer(GL_BACK_RIGHT);
   else
    glDrawBuffer(GL_FRONT_RIGHT);
      PRIVATE(this)->reallyRedraw(clearcol);
      camera->setStereoMode(SoCamera::MONOSCOPIC);
   if (this->isDoubleBuffer())
    glDrawBuffer(GL_BACK);
   else
    glDrawBuffer(GL_FRONT);
    }
#endif // HAVE_SOCAMERA_SETSTEREOMODE
  }
  else PRIVATE(this)->reallyRedraw(clearcol);

  if (PRIVATE(this)->superimpositions != NULL) {
    SoGLRenderAction * raaction = this->getSceneManager()->getGLRenderAction();
    SbBool first = TRUE;
    SbBool zWasEnabled = FALSE;
    for (int i = 0; i < PRIVATE(this)->superimpositions->getLength(); i++) {
      if ((*PRIVATE(this)->superimpositionsenabled)[i] != FALSE) {
	if (first) {
	  // save Z buffer state and disable
          zWasEnabled = glIsEnabled(GL_DEPTH_TEST) ? TRUE : FALSE;
	  glDisable(GL_DEPTH_TEST);
          first = FALSE;
	}
	SoNode * scene = (SoNode *) (*PRIVATE(this)->superimpositions)[i];
	raaction->apply(scene);
      }
    }
    if (!first && zWasEnabled) glEnable(GL_DEPTH_TEST);
  }

  if (this->getInteractiveCount() > 0)
    PRIVATE(this)->recordFPS();
} // actualRedraw()

// *************************************************************************

/*!
  To be able to trigger callback functions when user interaction starts
  and/or stops, we need to keep track of the viewer state (i.e. are we in
  still mode or in animation mode?).

  So@Gui@Viewer automatically adds callbacks to switch between still and
  moving draw style, and to switch between single/double buffer when
  the buffer type is \a INTERACTIVE.

  \sa interactiveCountDec(), getInteractiveCount()
  \sa addStartCallback(), addFinishCallback()
  \sa removeStartCallback(), removeFinishCallback()
  \sa setDrawStyle(), setBufferingType()
*/

void
So@Gui@Viewer::interactiveCountInc(void)
{
  // Catch problems with missing interactiveCountDec() calls.
  assert(PRIVATE(this)->interactionnesting < 100);

  if (++(PRIVATE(this)->interactionnesting) == 1)
    PRIVATE(this)->interactionstartCallbacks->invokeCallbacks(this);

#if 0 // debug
  SoDebugError::postInfo("So@Gui@Viewer::interactiveCountInc", "%d -> %d",
                         PRIVATE(this)->interactionnesting - 1,
                         PRIVATE(this)->interactionnesting);
#endif // debug
} // interactiveCountInc()

// *************************************************************************

/*!
  To be able to trigger callback functions when user interaction starts
  and/or stops, we need to keep track of the viewer state (i.e. are we in
  still mode or in animation mode?).

  So@Gui@Viewer automatically adds callbacks to switch between still and
  moving draw style, and to switch between single/double buffer when
  the buffer type is \a INTERACTIVE.

  \sa interactiveCountInc(), getInteractiveCount()
  \sa addStartCallback(), addFinishCallback()
  \sa removeStartCallback(), removeFinishCallback()
  \sa setDrawStyle(), setBufferingType()
*/

void
So@Gui@Viewer::interactiveCountDec(void)
{
  // FIXME: The UI toolkits may cause the interactionnesting to go
  // below zero by triggering press and release events in different
  // widgets. mariusbu 20010709.

  // FIXME: just to clarify; this is due to programming mistakes on
  // our behalf and should be cleaned up. We're using a simple
  // work-around / ignore strategy for now, though, as getting this
  // 100% correct is hard (there are so many possible ways of user
  // interaction with a viewer canvas) and the end-user will usually
  // not notice any problems at all. So that's why we are using a
  // warning instead of an assert(). 20010815 mortene.

  // FIXME: here's one known way to trigger the bug: hit "s" in the
  // examinerviewer in EXAMINE mode, then while seeking hit ESC to put
  // the viewer in INTERACT mode. When the seek is completed, the
  // count will become -1.  20010912 mortene.

#if SO@GUI@_DEBUG
  if (PRIVATE(this)->interactionnesting <= 0) {
    SoDebugError::postWarning("So@Gui@Viewer::interactiveCountDec",
                               "interaction count nesting went below zero. "
                               "This is due to an internal So@Gui@ bug.");
  }
#endif // SO@GUI@_DEBUG

  if (--(PRIVATE(this)->interactionnesting) <= 0) {
    PRIVATE(this)->interactionendCallbacks->invokeCallbacks(this);
    PRIVATE(this)->interactionnesting = 0;
    PRIVATE(this)->resetFrameCounter();
  }
} // interactiveCountDec()

// *************************************************************************

/*!
  Return current interaction count nesting. If equal to zero, the viewer
  is in animation mode, otherwise the camera is still.

  \sa interactiveCountInc(), interactiveCountDec()
*/

int
So@Gui@Viewer::getInteractiveCount(void) const
{
  return PRIVATE(this)->interactionnesting;
} // getInteractiveCount()

// *************************************************************************

/*!
  Set the value used for calculating how close the camera and intersection
  hit point should be made at the end of a seek operation.

  The value can be interpreted as an absolute value in the given world
  unit (which typically is meters) or as a percentage value of the
  distance between the camera starting position and the intersection
  hit point. This can be controlled through the
  setSeekValueAsPercentage() method. It is as default used as an
  absolute value.

  Default value is 50 (absolute distance or percent).

  \sa getSeekDistance(), setSeekValueAsPercentage(), setSeekTime()
*/

void
So@Gui@Viewer::setSeekDistance(const float distance)
{
  if (distance <= 0.0f) {
#if SO@GUI@_DEBUG
    SoDebugError::postWarning("So@Gui@Viewer::setSeekDistance",
                              "invalid seek distance value: %f",
                              distance);
#endif // SO@GUI@_DEBUG
    return;
  }
  PRIVATE(this)->seekdistance = distance;
} // setSeekDistance()

// *************************************************************************

/*!
  Returns the current seek distance. Value given as an absolute scalar
  length or as a percentage value of the original distance between
  the hitpoint and the camera starting position.

  \sa setSeekDistance(), isSeekValueAsPercentage()
*/

float
So@Gui@Viewer::getSeekDistance(void) const
{
  return PRIVATE(this)->seekdistance;
} // getSeekDistance()

// *************************************************************************

/*!
  Control whether or not the seek distance value should be interpreted as
  a percentage value or as an absolute distance. See documentation on
  setSeekDistance() for more information.

  \sa setSeekDistance(), isSeekValueAsPercentage()
*/

void
So@Gui@Viewer::setSeekValueAsPercentage(const SbBool on)
{
#if SO@GUI@_DEBUG
  if ((on && this->isSeekValuePercentage()) ||
      (!on && !this->isSeekValuePercentage())) {
    SoDebugError::postWarning("So@Gui@Viewer::setSeekDistanceAsPercentage",
                              "unnecessary called, value already %s",
                              on ? "on" : "off");
    return;
  }
#endif // SO@GUI@_DEBUG
  PRIVATE(this)->seekdistanceabs = on ? FALSE : TRUE;
} // setSeekValkueAsPercentage()

// *************************************************************************

/*!
  Returns an boolean which indicates if the seek distance value from
  getSeekDistance() should be interpreted as a percentage value or
  as an absolute value.

  \sa setSeekValuePercentage(), getSeekDistance()
*/

SbBool
So@Gui@Viewer::isSeekValuePercentage(void) const
{
  return PRIVATE(this)->seekdistanceabs ? FALSE : TRUE;
} // isSeekValuePercentage()

// ************************************************************************

/*!
  This method is obsoleted in Coin So@Gui@.
 */
void
So@Gui@Viewer::computeSeekFinalOrientation(// virtual, protected
  void)
{
  SO@GUI@_OBSOLETED();
}

// *************************************************************************

/*!
  If the current camera is of perspective type, switch to orthographic,
  and vice versa.
*/

void
So@Gui@Viewer::toggleCameraType(void)
{
  SoType perspectivetype = SoPerspectiveCamera::getClassTypeId();
  SoType orthotype = SoOrthographicCamera::getClassTypeId();

  this->setCameraType(PRIVATE(this)->cameratype.isDerivedFrom(perspectivetype)
                       ? orthotype : perspectivetype);
} // toggleCameraType()

// ************************************************************************

/*!
  Copies the settings of \a camera into our current camera.  Cameras
  must be of the same class type.
 */
void
So@Gui@Viewer::changeCameraValues(// virtual, protected
  SoCamera * camera)
{
  assert(camera != NULL);

  SoCamera * cam = this->getCamera();
  if (!cam) {
#if SO@GUI@_DEBUG
    SoDebugError::postWarning("So@Gui@Viewer::changeCameraValues",
                              "no current camera in the scenegraph");
#endif // SO@GUI@_DEBUG
    return;
  }
  if (cam->getTypeId() != camera->getTypeId()) {
#if SO@GUI@_DEBUG
    SoDebugError::postWarning("So@Gui@Viewer::changeCameraValues",
                              "tried to copy data from camera of "
                              "different type");
#endif // SO@GUI@_DEBUG
    return;
  }

  cam->copyFieldValues(camera, FALSE);
}

// *************************************************************************

/*!
  \internal

  Returns a boolean to indicate if the dynamic drawstyle equals
  the static drawstyle.
*/

SbBool
So@Gui@ViewerP::drawInteractiveAsStill(void) const
{
  SbBool moveasstill = this->drawstyles[So@Gui@Viewer::INTERACTIVE] == So@Gui@Viewer::VIEW_SAME_AS_STILL;
  if (! moveasstill)
    moveasstill = this->drawstyles[So@Gui@Viewer::INTERACTIVE] == this->drawstyles[So@Gui@Viewer::STILL];
  if (! moveasstill)
    moveasstill =
      this->drawstyles[So@Gui@Viewer::INTERACTIVE] == So@Gui@Viewer::VIEW_NO_TEXTURE &&
      this->drawstyles[So@Gui@Viewer::STILL] != So@Gui@Viewer::VIEW_AS_IS;
  return moveasstill;
} // drawInteractiveAsStill()

// *************************************************************************

/*!
  \internal

  Returns the current drawing style.
*/

So@Gui@Viewer::DrawStyle
So@Gui@ViewerP::currentDrawStyle(
  void) const
{
  SbBool interactivemode = pub->getInteractiveCount() > 0 ? TRUE : FALSE;

  if (!interactivemode || this->drawInteractiveAsStill())
    return this->drawstyles[So@Gui@Viewer::STILL];
  else
    return this->drawstyles[So@Gui@Viewer::INTERACTIVE];
} // currentDrawStyle()

// *************************************************************************

/*!
  \internal

  Returns a boolean to indicate if the current drawstyle settings implies
  hidden line rendering.
*/

SbBool
So@Gui@ViewerP::drawAsHiddenLine(void) const
{
  return ((this->currentDrawStyle() == So@Gui@Viewer::VIEW_HIDDEN_LINE) ? TRUE : FALSE);
} // drawAsHiddenLine()

/*!
  \internal

  Returns a boolean to indicate if the current drawstyle settings implies
  wirefram overlay rendering.
*/

SbBool
So@Gui@ViewerP::drawAsWireframeOverlay(void) const
{
  return ((this->currentDrawStyle() == So@Gui@Viewer::VIEW_WIREFRAME_OVERLAY) ? TRUE : FALSE);
} // drawAsWireframeOverlay()


// *************************************************************************

/*!
  \internal

  Use the given style setting to set the correct states in the
  rendering control nodes. This will affect the way the scene is
  currently rendered.
*/

void
So@Gui@ViewerP::changeDrawStyle(
  So@Gui@Viewer::DrawStyle style)
{
  // Turn on/off Z-buffering based on the style setting.
  switch (style) {
  case So@Gui@Viewer::VIEW_LOW_RES_LINE:
  case So@Gui@Viewer::VIEW_LOW_RES_POINT:
  case So@Gui@Viewer::VIEW_BBOX:
    pub->glLockNormal();
    // FIXME: shouldn't this be done "lazy", i.e. before we do any
    // actual rendering? 20001126 mortene.
    glDisable(GL_DEPTH_TEST);
    pub->glUnlockNormal();
    break;

  default:
    pub->glLockNormal();
    // FIXME: shouldn't this be done "lazy", i.e. before we do any
    // actual rendering? 20001126 mortene.
    glEnable(GL_DEPTH_TEST);
    pub->glUnlockNormal();
    break;
  }

  // Render everything as its supposed to be done, don't override
  // any of the settings in the ``real'' graph.
  if (style == So@Gui@Viewer::VIEW_AS_IS) {
    this->drawstyleroot->whichChild = SO_SWITCH_NONE;
    return;
  }

  this->drawstyleroot->whichChild = SO_SWITCH_ALL;
  if ((style == So@Gui@Viewer::VIEW_HIDDEN_LINE) ||
      (style == So@Gui@Viewer::VIEW_WIREFRAME_OVERLAY)) {
    this->hiddenlineroot->whichChild = SO_SWITCH_ALL;
    return;
  } else {
    this->hiddenlineroot->whichChild = SO_SWITCH_NONE;
  }

  // Set or unset lightmodel override.
  switch (style) {
  case So@Gui@Viewer::VIEW_NO_TEXTURE:
  case So@Gui@Viewer::VIEW_LOW_COMPLEXITY:
    this->solightmodel->model.setIgnored(TRUE); // as-is BASE or PHONG
    break;

  case So@Gui@Viewer::VIEW_LINE:
  case So@Gui@Viewer::VIEW_POINT:
  case So@Gui@Viewer::VIEW_BBOX:
  case So@Gui@Viewer::VIEW_LOW_RES_LINE:
  case So@Gui@Viewer::VIEW_LOW_RES_POINT:
    this->solightmodel->model.setIgnored(FALSE); // force BASE lighting
    break;

  default:
    assert(FALSE); break;
  }


  // Set or unset drawstyle override.
  switch (style) {
  case So@Gui@Viewer::VIEW_NO_TEXTURE:
  case So@Gui@Viewer::VIEW_LOW_COMPLEXITY:
    this->sodrawstyle->style.setIgnored(TRUE); // as-is drawing style filled/lines/points
    break;

  case So@Gui@Viewer::VIEW_LINE:
  case So@Gui@Viewer::VIEW_LOW_RES_LINE:
  case So@Gui@Viewer::VIEW_BBOX:
    this->sodrawstyle->style = SoDrawStyle::LINES;
    this->sodrawstyle->style.setIgnored(FALSE); // force line rendering
    break;

  case So@Gui@Viewer::VIEW_POINT:
  case So@Gui@Viewer::VIEW_LOW_RES_POINT:
    this->sodrawstyle->style = SoDrawStyle::POINTS;
    this->sodrawstyle->style.setIgnored(FALSE); // force point rendering
    break;

  default:
    assert(FALSE); break;
  }

  // Set or unset complexity value override.
  switch (style) {
  case So@Gui@Viewer::VIEW_NO_TEXTURE:
  case So@Gui@Viewer::VIEW_LINE:
  case So@Gui@Viewer::VIEW_POINT:
  case So@Gui@Viewer::VIEW_BBOX:
    this->socomplexity->value.setIgnored(TRUE); // as-is complexity
    break;

  case So@Gui@Viewer::VIEW_LOW_COMPLEXITY:
  case So@Gui@Viewer::VIEW_LOW_RES_LINE:
  case So@Gui@Viewer::VIEW_LOW_RES_POINT:
    this->socomplexity->value.setIgnored(FALSE); // force complexity setting of 0.1
    break;

  default:
    assert(FALSE); break;
  }

  // Set or unset complexity type override.
  switch (style) {
  case So@Gui@Viewer::VIEW_NO_TEXTURE:
  case So@Gui@Viewer::VIEW_LOW_COMPLEXITY:
  case So@Gui@Viewer::VIEW_LINE:
  case So@Gui@Viewer::VIEW_POINT:
  case So@Gui@Viewer::VIEW_LOW_RES_LINE:
  case So@Gui@Viewer::VIEW_LOW_RES_POINT:
    this->socomplexity->type.setIgnored(TRUE); // as-is
    break;

  case So@Gui@Viewer::VIEW_BBOX:
    this->socomplexity->type = SoComplexity::BOUNDING_BOX;
    this->socomplexity->type.setIgnored(FALSE); // force bounding box rendering
    break;

  default:
    assert(FALSE); break;
  }

#if 0 // debug
  SoDebugError::postInfo("So@Gui@Viewer::changeDrawStyle",
                         "\n"
                         "\tdrawstyle style: 0x%02x (isIgnored() == %s)\n"
                         "\tlightmodel model: 0x%02x, (isIgnored() == %s)\n"
                         "\tcomplexity type: 0x%02x, (isIgnored() == %s)\n"
                         "\tcomplexity value: %f, (isIgnored() == %s)\n"
                         "",
                         this->sodrawstyle->style.getValue(),
                         this->sodrawstyle->style.isIgnored() ? "T" : "F",
                         this->solightmodel->model.getValue(),
                         this->solightmodel->model.isIgnored() ? "T" : "F",
                         this->socomplexity->type.getValue(),
                         this->socomplexity->type.isIgnored() ? "T" : "F",
                         this->socomplexity->value.getValue(),
                         this->socomplexity->value.isIgnored() ? "T" : "F");
#endif // debug
} // changeDrawStyle()

// *************************************************************************

/*!
  \internal

  Position the near and far clipping planes just in front of and behind
  the scene's bounding box. This will give us the optimal utilization of
  the z buffer resolution by shrinking it to its minimum depth.

  Near and far clipping planes are specified in the camera fields
  nearDistance and farDistance.
*/

void
So@Gui@ViewerP::setClippingPlanes(
  void)
{
  // This is necessary to avoid a crash in case there is no scene
  // graph specified by the user.
  if (pub->camera == NULL) return;

  if (pub->autoClipBboxAction == NULL)
    pub->autoClipBboxAction =
      new SoGetBoundingBoxAction(pub->getViewportRegion());
  else
    pub->autoClipBboxAction->setViewportRegion(pub->getViewportRegion());

  pub->autoClipBboxAction->apply(pub->sceneRoot);

  SbXfBox3f xbox = pub->autoClipBboxAction->getXfBoundingBox();
  SbMatrix mat;
  mat.setTranslate(- pub->camera->position.getValue());
  xbox.transform(mat);
  mat = pub->camera->orientation.getValue().inverse();
  xbox.transform(mat);
  SbBox3f box = xbox.project();

  // Bounding box was calculated in camera space, so we need to "flip"
  // the box (because camera is pointing in the (0,0,-1) direction
  // from origo.
  float nearval = -box.getMax()[2];
  float farval = -box.getMin()[2];

  // This factor should really be made dependent on the underlying
  // hardware or software Z buffer resolution.
  const float SLACK = 1.0f/1000.0f;

  // Scene is completely behind us.
  if (farval < SLACK) return;


  float farslack = SLACK * farval;

  if (pub->camera->isOfType(SoPerspectiveCamera::getClassTypeId())) {
    // Disallow negative near clipping plane distance, and make sure the
    // z-buffer depth utilization is kept below a certain threshold.
    nearval = farslack > nearval ? farslack : nearval;
  }

  // Give a bit of slack to avoid artifacts when scene fits exactly
  // inside bounding box.
  pub->camera->nearDistance = nearval * (1.0f - SLACK);
  pub->camera->farDistance = farval * (1.0f + SLACK);

#if 0 // debug
  SoDebugError::postInfo("So@Gui@Viewer::setClippingPlanes",
                         "near, far: %f (%f), %f (%f)",
                         nearval, pub->camera->nearDistance.getValue(),
                         farval, pub->camera->farDistance.getValue());
#endif // debug
} // setClippingPlanes()

// *************************************************************************

/*!
  \internal

  Translate camera a distance equal to the difference in projected,
  normalized screen coordinates given by the argument.
*/

void
So@Gui@ViewerP::moveCameraScreen(
  const SbVec2f & screenpos)
{
  SoCamera * cam = pub->getCamera();
  assert(cam);

#if SO@GUI@_DEBUG && 0 // debug
  SoDebugError::postInfo("So@Gui@Viewer::moveCameraScreen",
                         "screenpos: <%f, %f>, campos: <%f, %f, %f>",
                         screenpos[0], screenpos[1],
                         cam->position.getValue()[0],
                         cam->position.getValue()[1],
                         cam->position.getValue()[2]);
#endif // debug

  SbViewVolume vv = cam->getViewVolume(pub->getGLAspectRatio());
  SbPlane panplane = vv.getPlane(cam->focalDistance.getValue());

  SbLine line;
  vv.projectPointToLine(screenpos + SbVec2f(0.5, 0.5f), line);
  SbVec3f current_planept;
  panplane.intersect(line, current_planept);
  vv.projectPointToLine(SbVec2f(0.5f, 0.5f), line);
  SbVec3f old_planept;
  panplane.intersect(line, old_planept);

  // Reposition camera according to the vector difference between the
  // projected points.
  cam->position = cam->position.getValue() - (current_planept - old_planept);

#if SO@GUI@_DEBUG && 0 // debug
  SoDebugError::postInfo("So@Gui@Viewer::moveCameraScreen",
                         "newcampos: <%f, %f, %f>",
                         cam->position.getValue()[0],
                         cam->position.getValue()[1],
                         cam->position.getValue()[2]);
#endif // debug
} // moveCameraScreen()

// *************************************************************************

/*!
  \internal

  Called when viewer enters interactive mode (animation, drag, ...).
*/

void
So@Gui@ViewerP::interactivestartCB(void *, So@Gui@Viewer * thisp)
{
  // In interactive buffer mode, doublebuffering is used during interaction.
  if (PRIVATE(thisp)->buffertype == So@Gui@Viewer::BUFFER_INTERACTIVE) {
    PRIVATE(thisp)->localsetbuffertype = TRUE;
    thisp->So@Gui@RenderArea::setDoubleBuffer(TRUE);
    PRIVATE(thisp)->localsetbuffertype = FALSE;
  }

  // Use the dynamic drawstyle.
  if (!PRIVATE(thisp)->drawInteractiveAsStill())
    PRIVATE(thisp)->changeDrawStyle(PRIVATE(thisp)->drawstyles[So@Gui@Viewer::INTERACTIVE]);
} // interactivestartCB()

/*!
  \internal

  Called when viewer goes out of interactive mode and into
  "frozen" mode.
*/

void
So@Gui@ViewerP::interactiveendCB(void *, So@Gui@Viewer * thisp)
{
  // In interactive buffer mode, doublebuffering is used during
  // interaction, singelbuffering while the camera is static.
  if (PRIVATE(thisp)->buffertype == So@Gui@Viewer::BUFFER_INTERACTIVE) {
    PRIVATE(thisp)->localsetbuffertype = TRUE;
    thisp->So@Gui@RenderArea::setDoubleBuffer(FALSE);
    PRIVATE(thisp)->localsetbuffertype = FALSE;
  }

  // Back to static drawstyle.
  if (!PRIVATE(thisp)->drawInteractiveAsStill())
    PRIVATE(thisp)->changeDrawStyle(PRIVATE(thisp)->drawstyles[So@Gui@Viewer::STILL]);
} // interactiveendCB()

// *************************************************************************

/*!
  \internal

  Called repeatedly during the seek animation.
*/

void
So@Gui@ViewerP::seeksensorCB(void * data, SoSensor * s)
{
  SbTime currenttime = SbTime::getTimeOfDay();

  So@Gui@Viewer * thisp = (So@Gui@Viewer *)data;
  SoTimerSensor * sensor = (SoTimerSensor *)s;

  float t =
    (currenttime - sensor->getBaseTime()).getValue() / PRIVATE(thisp)->seekperiod;
  if ((t > 1.0f) || (t + sensor->getInterval().getValue() > 1.0f)) t = 1.0f;
  SbBool end = (t == 1.0f);

//  t = 0.5f - cos(M_PI * t) * 0.5f;
  thisp->camera->position = PRIVATE(thisp)->camerastartposition +
    (PRIVATE(thisp)->cameraendposition - PRIVATE(thisp)->camerastartposition) * t;

  if (end) thisp->setSeekMode(FALSE);
} // seeksensorCB()

// *************************************************************************

// doc in super
void
So@Gui@Viewer::sizeChanged(const SbVec2s & size)
{
  inherited::sizeChanged(size);
} // sizeChanged()

// *************************************************************************

/*!
  Reset the frames-per-second counter upon window resize events,
  abnormal delays, etc.

  The methods for recording FPS values are Coin extensions, not
  available in the original Open Inventor API.

  \sa addFrametime(), recordFPS()
*/
void
So@Gui@ViewerP::resetFrameCounter(void)
{
  this->framecount = 0;
  for (int i = 0; i < So@Gui@ViewerP::FRAMESARRAY_SIZE; i++)
    this->frames[i] = 0.0;
  this->totalval = 0.0;
  this->currentframetime = 0.0;
  this->lasttimeofday = 0.0;
}

/*!
  Adds the time spent drawing the last frame to the array of past
  frame times.

  The methods for recording FPS values are Coin extensions, not
  available in the original Open Inventor API.

  \sa resetFrameCounter(), recordFPS()
*/

void
So@Gui@ViewerP::addFrametime(const double ft)
{
  this->framecount++;

  int arrayptr = (this->framecount - 1) % FRAMESARRAY_SIZE;
  double oldval = this->frames[arrayptr];
  this->frames[arrayptr] = ft;
  this->totalval += (ft - oldval);
  this->currentframetime =
    this->totalval / So@Gui@Min(this->framecount, (int) FRAMESARRAY_SIZE);
}

static unsigned char fps2dfont[][12] = {
  {  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0 }, //
  {  0,  0, 12, 12,  0,  8, 12, 12, 12, 12, 12,  0 }, // !
  {  0,  0,  0,  0,  0,  0,  0,  0,  0, 20, 20, 20 }, // \"
  {  0,  0, 18, 18, 18, 63, 18, 18, 63, 18, 18,  0 }, // #
  {  0,  8, 28, 42, 10, 10, 12, 24, 40, 42, 28,  8 }, // $
  {  0,  0,  6, 73, 41, 22,  8, 52, 74, 73, 48,  0 }, // %
  {  0, 12, 18, 18, 12, 25, 37, 34, 34, 29,  0,  0 }, // &
  { 12, 12, 24,  0,  0,  0,  0,  0,  0,  0,  0,  0 }, // '
  {  0,  6,  8,  8, 16, 16, 16, 16, 16,  8,  8,  6 }, // (
  {  0, 48,  8,  8,  4,  4,  4,  4,  4,  8,  8, 48 }, //)
  {  0,  0,  0,  0,  0,  0,  8, 42, 20, 42,  8,  0 }, // *
  {  0,  0,  0,  8,  8,  8,127,  8,  8,  8,  0,  0 }, // +
  {  0, 24, 12, 12,  0,  0,  0,  0,  0,  0,  0,  0 }, // ,
  {  0,  0,  0,  0,  0,  0,127,  0,  0,  0,  0,  0 }, // -
  {  0,  0, 24, 24,  0,  0,  0,  0,  0,  0,  0,  0 }, // .
  {  0, 32, 32, 16, 16,  8,  8,  8,  4,  4,  2,  2 }, // /
  {  0,  0, 28, 34, 34, 34, 34, 34, 34, 34, 28,  0 }, // 0
  {  0,  0,  8,  8,  8,  8,  8,  8, 40, 24,  8,  0 }, // 1
  {  0,  0, 62, 32, 16,  8,  4,  2,  2, 34, 28,  0 }, // 2
  {  0,  0, 28, 34,  2,  2, 12,  2,  2, 34, 28,  0 }, // 3
  {  0,  0,  4,  4,  4,126, 68, 36, 20, 12,  4,  0 }, // 4
  {  0,  0, 28, 34,  2,  2,  2, 60, 32, 32, 62,  0 }, // 5
  {  0,  0, 28, 34, 34, 34, 60, 32, 32, 34, 28,  0 }, // 6
  {  0,  0, 16, 16, 16,  8,  8,  4,  2,  2, 62,  0 }, // 7
  {  0,  0, 28, 34, 34, 34, 28, 34, 34, 34, 28,  0 }, // 8
  {  0,  0, 28, 34,  2,  2, 30, 34, 34, 34, 28,  0 }, // 9
  {  0,  0, 24, 24,  0,  0,  0, 24, 24,  0,  0,  0 }, // :
  {  0, 48, 24, 24,  0,  0,  0, 24, 24,  0,  0,  0 }, // ;
  {  0,  0,  0,  2,  4,  8, 16,  8,  4,  2,  0,  0 }, // <
  {  0,  0,  0,  0,  0,127,  0,127,  0,  0,  0,  0 }, // =
  {  0,  0,  0, 16,  8,  4,  2,  4,  8, 16,  0,  0 }, // >
  {  0,  0, 16, 16,  0, 16, 28,  2,  2,  2, 60,  0 }, // ?
  {  0,  0, 28, 32, 73, 86, 82, 82, 78, 34, 28,  0 }, // @
  {  0,  0, 33, 33, 33, 63, 18, 18, 18, 12, 12,  0 }, // A
  {  0,  0, 60, 34, 34, 34, 60, 34, 34, 34, 60,  0 }, // B
  {  0,  0, 14, 16, 32, 32, 32, 32, 32, 18, 14,  0 }, // C
  {  0,  0, 56, 36, 34, 34, 34, 34, 34, 36, 56,  0 }, // D
  {  0,  0, 62, 32, 32, 32, 60, 32, 32, 32, 62,  0 }, // E
  {  0,  0, 16, 16, 16, 16, 30, 16, 16, 16, 30,  0 }, // F
  {  0,  0, 14, 18, 34, 34, 32, 32, 32, 18, 14,  0 }, // G
  {  0,  0, 34, 34, 34, 34, 62, 34, 34, 34, 34,  0 }, // H
  {  0,  0, 62,  8,  8,  8,  8,  8,  8,  8, 62,  0 }, // I
  {  0,  0,112,  8,  8,  8,  8,  8,  8,  8, 62,  0 }, // J
  {  0,  0, 33, 33, 34, 36, 56, 40, 36, 34, 33,  0 }, // K
  {  0,  0, 30, 16, 16, 16, 16, 16, 16, 16, 16,  0 }, // L
  {  0,  0, 33, 33, 33, 45, 45, 45, 51, 51, 33,  0 }, // M
  {  0,  0, 34, 34, 38, 38, 42, 42, 50, 50, 34,  0 }, // N
  {  0,  0, 12, 18, 33, 33, 33, 33, 33, 18, 12,  0 }, // O
  {  0,  0, 32, 32, 32, 60, 34, 34, 34, 34, 60,  0 }, // P
  {  3,  6, 12, 18, 33, 33, 33, 33, 33, 18, 12,  0 }, // Q
  {  0,  0, 34, 34, 34, 36, 60, 34, 34, 34, 60,  0 }, // R
  {  0,  0, 60,  2,  2,  6, 28, 48, 32, 32, 30,  0 }, // S
  {  0,  0,  8,  8,  8,  8,  8,  8,  8,  8,127,  0 }, // T
  {  0,  0, 28, 34, 34, 34, 34, 34, 34, 34, 34,  0 }, // U
  {  0,  0, 12, 12, 18, 18, 18, 33, 33, 33, 33,  0 }, // V
  {  0,  0, 34, 34, 34, 54, 85, 73, 73, 73, 65,  0 }, // W
  {  0,  0, 34, 34, 20, 20,  8, 20, 20, 34, 34,  0 }, // X
  {  0,  0,  8,  8,  8,  8, 20, 20, 34, 34, 34,  0 }, // Y
  {  0,  0, 62, 32, 16, 16,  8,  4,  4,  2, 62,  0 }, // Z
  {  0, 14,  8,  8,  8,  8,  8,  8,  8,  8,  8, 14 }, // [
  {  0,  2,  2,  4,  4,  8,  8,  8, 16, 16, 32, 32 }, // [backslash]
  {  0, 56,  8,  8,  8,  8,  8,  8,  8,  8,  8, 56 }, // ]
  {  0,  0,  0,  0,  0, 34, 34, 20, 20,  8,  8,  0 }, // ^
  {  0,127,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0 }, // _
  {  0,  0,  0,  0,  0,  0,  0,  0,  0, 24, 24, 12 }, // `
  {  0,  0, 29, 34, 34, 30,  2, 34, 28,  0,  0,  0 }, // a
  {  0,  0, 60, 34, 34, 34, 34, 50, 44, 32, 32, 32 }, // b
  {  0,  0, 14, 16, 32, 32, 32, 16, 14,  0,  0,  0 }, // c
  {  0,  0, 26, 38, 34, 34, 34, 34, 30,  2,  2,  2 }, // d
  {  0,  0, 28, 34, 32, 62, 34, 34, 28,  0,  0,  0 }, // e
  {  0,  0, 16, 16, 16, 16, 16, 16, 62, 16, 16, 14 }, // f
  { 28,  2,  2, 26, 38, 34, 34, 34, 30,  0,  0,  0 }, // g
  {  0,  0, 34, 34, 34, 34, 34, 50, 44, 32, 32, 32 }, // h
  {  0,  0,  8,  8,  8,  8,  8,  8, 56,  0,  8,  8 }, // i
  { 56,  4,  4,  4,  4,  4,  4,  4, 60,  0,  4,  4 }, // j
  {  0,  0, 33, 34, 36, 56, 40, 36, 34, 32, 32, 32 }, // k
  {  0,  0,  8,  8,  8,  8,  8,  8,  8,  8,  8, 56 }, // l
  {  0,  0, 73, 73, 73, 73, 73,109, 82,  0,  0,  0 }, // m
  {  0,  0, 34, 34, 34, 34, 34, 50, 44,  0,  0,  0 }, // n
  {  0,  0, 28, 34, 34, 34, 34, 34, 28,  0,  0,  0 }, // o
  { 32, 32, 60, 34, 34, 34, 34, 50, 44,  0,  0,  0 }, // p
  {  2,  2, 26, 38, 34, 34, 34, 34, 30,  0,  0,  0 }, // q
  {  0,  0, 16, 16, 16, 16, 16, 24, 22,  0,  0,  0 }, // r
  {  0,  0, 60,  2,  2, 28, 32, 32, 30,  0,  0,  0 }, // s
  {  0,  0, 14, 16, 16, 16, 16, 16, 62, 16, 16,  0 }, // t
  {  0,  0, 26, 38, 34, 34, 34, 34, 34,  0,  0,  0 }, // u
  {  0,  0,  8,  8, 20, 20, 34, 34, 34,  0,  0,  0 }, // v
  {  0,  0, 34, 34, 34, 85, 73, 73, 65,  0,  0,  0 }, // w
  {  0,  0, 34, 34, 20,  8, 20, 34, 34,  0,  0,  0 }, // x
  { 48, 16,  8,  8, 20, 20, 34, 34, 34,  0,  0,  0 }, // y
  {  0,  0, 62, 32, 16,  8,  4,  2, 62,  0,  0,  0 }, // z
  {  0,  6,  8,  8,  8,  4, 24,  4,  8,  8,  8,  6 }, // {
  {  0,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8 }, // |
  {  0, 48,  8,  8,  8, 16, 12, 16,  8,  8,  8, 48 }, // }
  {  0,  0,  0,  0,  0,  0, 78, 57,  0,  0,  0,  0 }  // ~
};

static void
printString(const char * s)
{
#if defined(__COIN__)
  int i,n;
  n = strlen(s);
  for (i = 0; i < n; i++)
    glBitmap(8, 12, 0.0, 2.0, 10.0, 0.0, fps2dfont[s[i] - 32]);
#endif
}

static void
Draw2DString(const char * str, SbVec2s glsize, SbVec2f position)
{
  // Store GL state.
  glPushAttrib(GL_ALL_ATTRIB_BITS);

  glDisable(GL_LIGHTING);
  glDisable(GL_DEPTH_TEST);
  glDisable(GL_TEXTURE_2D);
  glMatrixMode(GL_MODELVIEW);
  glPushMatrix();
  glLoadIdentity();

  glMatrixMode(GL_PROJECTION);
  glPushMatrix();
  glLoadIdentity();
  glOrtho(0.0, glsize[0], 0.0, glsize[1], -1, 1);

  glPixelStorei(GL_UNPACK_ALIGNMENT, 1);

  glColor3f(0.0, 0.0, 0.0);
  glRasterPos2f(position[0] + 1, position[1]);
  printString(str);
  glRasterPos2f(position[0] - 1, position[1]);
  printString(str);
  glRasterPos2f(position[0], position[1] + 1);
  printString(str);
  glRasterPos2f(position[0], position[1] - 1);
  printString(str);

  glColor3f(1.0, 1.0, 0.0);
  glRasterPos2f(position[0], position[1]);
  printString(str);

  glMatrixMode(GL_PROJECTION);
  glPopMatrix();
  glMatrixMode(GL_MODELVIEW);
  glPopMatrix();

  glPopAttrib();
}


// FIXME: the following is just a temporary hack to enable the FPS
// counter. We should really write a proper interface against it, so
// applications can set up feedback loops to control scene complexity
// and get a nice and steady maximum framerate, for instance.
//
// For anyone who want to execute that task, check what TGS has done
// first. If their API is fine, use the same approach.
//
// 20001124 mortene.

/*!
  Draw a text string showing the current frame-per-seconds value in
  the lower left corner of the OpenGL canvas (after recording
  information needed to calculate the fps).

  The methods for recording FPS values are Coin extensions, not
  available in the original Open Inventor API.

  \sa resetFrameCounter(), addFrametime()
*/
void
So@Gui@ViewerP::recordFPS(void)
{
  if (COIN_SHOW_FPS_COUNTER == UNINITIALIZED_ENVVAR) {
    char * env = getenv("COIN_SHOW_FPS_COUNTER");
    COIN_SHOW_FPS_COUNTER = env ? atoi(env) : 0;
  }

  if (COIN_SHOW_FPS_COUNTER) {
    double frametime, timeofday = SbTime::getTimeOfDay().getValue();
    if((this->lasttimeofday == 0.0) ||
       ((timeofday - this->lasttimeofday) > 1.0)) {
      this->resetFrameCounter();

      frametime = 0.0;
      this->lasttimeofday = timeofday;
    }
    else {
      frametime = timeofday - this->lasttimeofday;
      this->lasttimeofday = timeofday;
      this->addFrametime(frametime);

      char buffer[64];
      int nr = sprintf(buffer, "%.1f fps", 1.0 / this->currentframetime);
      assert(nr < 64);
      Draw2DString(buffer, pub->getGLSize(), SbVec2f(10, 10));
    }
  }
}

// *************************************************************************

// doc in super
SbBool
So@Gui@Viewer::processSoEvent(// virtual
  const SoEvent * const event)
{
  const SoType type(event->getTypeId());

  if (type.isDerivedFrom(SoKeyboardEvent::getClassTypeId())) {
    do {
      SoKeyboardEvent * const keyevent = (SoKeyboardEvent *) event;

      if (keyevent->getState() != SoButtonEvent::DOWN)
        break;

      // key events for both view and interact mode

      switch (keyevent->getKey()) {
      case SoKeyboardEvent::ESCAPE:
        this->setViewing(this->isViewing() ? FALSE : TRUE);
        return TRUE;
      default:
        break;
      } // switch (keyevent->getKey())

      if (! this->isViewing())
        break;

      // key events just for the view mode

      switch (keyevent->getKey()) {
      case SoKeyboardEvent::S:
        this->setSeekMode(this->isSeekMode() ? FALSE : TRUE);
        return TRUE;
      case SoKeyboardEvent::Q:
        this->hide();
        So@Gui@::exitMainLoop();
        return TRUE;
      case SoKeyboardEvent::HOME:
        this->resetToHomePosition();
        return TRUE;
      case SoKeyboardEvent::LEFT_ARROW:
        PRIVATE(this)->moveCameraScreen(SbVec2f(-0.1f, 0.0f));
        return TRUE;
      case SoKeyboardEvent::UP_ARROW:
        PRIVATE(this)->moveCameraScreen(SbVec2f(0.0f, 0.1f));
        return TRUE;
      case SoKeyboardEvent::RIGHT_ARROW:
        PRIVATE(this)->moveCameraScreen(SbVec2f(0.1f, 0.0f));
        return TRUE;
      case SoKeyboardEvent::DOWN_ARROW:
        PRIVATE(this)->moveCameraScreen(SbVec2f(0.0f, -0.1f));
        return TRUE;
      default:
        break;
      } // switch (keyevent->getKey())
    } while (FALSE);
  }

  if (! this->isViewing())
    return inherited::processSoEvent(event);

  return FALSE;
} // processSoEvent()

// *************************************************************************

/*!
  This method is obsoleted.
*/

SbBool
So@Gui@Viewer::processCommonEvents(
  @EVENT@ event)
{
  if (this->invokeAppCB(event)) return TRUE;
  return FALSE;
} // processCommonEvents()

// *************************************************************************

/*!
  This method is for setting up a superimposed scene graph on top
  of the viewer scene graph.  It will be used for adding spin-rotation
  coordinate systems, fly-viewer speed indicators and similar things.

  This method is not part of the original InventorXt API.
*/

void
So@Gui@Viewer::addSuperimposition(// protected
  SoNode * scene)
{
  if (PRIVATE(this)->superimpositions == NULL) {
    PRIVATE(this)->superimpositions = new SbPList;
    PRIVATE(this)->superimpositionsenabled = new SbIntList;
  }
  PRIVATE(this)->searchaction->reset();
  PRIVATE(this)->searchaction->setType(SoCamera::getClassTypeId());
  PRIVATE(this)->searchaction->setInterest(SoSearchAction::FIRST);
  PRIVATE(this)->searchaction->apply(scene);
  if (!PRIVATE(this)->searchaction->isFound()) {
    // FIXME: set up default environment if there is no camera in the
    // superimposition scene
#if SO@GUI@_DEBUG
    SoDebugError::postInfo("So@Gui@Viewer::addSuperimposition",
                           "cameraless superimpositions are not supported yet");
#endif // SO@GUI@_DEBUG
    return;
  }
  scene->ref();
  PRIVATE(this)->superimpositions->append(scene);
  PRIVATE(this)->superimpositionsenabled->append(TRUE);
} // setSuperimposedSceneGraph()

// *************************************************************************

/*!
  This method is not part of the original InventorXt API.
*/

void
So@Gui@Viewer::removeSuperimposition(// protected
  SoNode * scene)
{
  assert(scene);
  int idx = -1;
  if (PRIVATE(this)->superimpositions == NULL) goto error;
  idx = PRIVATE(this)->superimpositions->find(scene);
  if (idx == -1) goto error;
  assert(PRIVATE(this)->superimpositionsenabled != NULL);
  PRIVATE(this)->superimpositions->remove(idx);
  PRIVATE(this)->superimpositionsenabled->remove(idx);
  scene->unref();
  return;

 error:
#if SO@GUI@_DEBUG
  SoDebugError::post("So@Gui@Viewer::removeSuperimposition",
		     "no such superimposition");
#endif // SO@GUI@_DEBUG
  return;
} // getSuperimposedSceneGraph()

// *************************************************************************

/*!
  This method sets whether the superimposed scene graph should be traversed
  or not.

  This method is not part of the original InventorXt API.
*/

void
So@Gui@Viewer::setSuperimpositionEnabled(// protected
  SoNode * scene,
  const SbBool enable)
{
  int idx = -1;
  if (PRIVATE(this)->superimpositions == NULL) goto error;
  idx = PRIVATE(this)->superimpositions->find(scene);
  if (idx == -1) goto error;
  (*PRIVATE(this)->superimpositionsenabled)[idx] = enable;
  return;

 error:
#if SO@GUI@_DEBUG
  SoDebugError::post("So@Gui@Viewer::setSuperimpositionEnabled",
		     "no such superimposition");
#endif // SO@GUI@_DEBUG
  return;
} // setSuperimposition()

// *************************************************************************

/*!
  This method returns whether the superimposed scene is rendered or not.

  This method is not part of the original InventorXt API.
*/

SbBool
So@Gui@Viewer::getSuperimpositionEnabled(// protected
  SoNode * scene) const
{
  int idx = -1;
  if (PRIVATE(this)->superimpositions == NULL) goto error;
  idx = PRIVATE(this)->superimpositions->find(scene);
  if (idx == -1) goto error;
  return (*PRIVATE(this)->superimpositionsenabled)[idx];

 error:
#if SO@GUI@_DEBUG
  SoDebugError::post("So@Gui@Viewer::getSuperimpositionEnabled",
		     "no such superimposition");
#endif // SO@GUI@_DEBUG
  return FALSE;
} // getSuperimposition()

// *************************************************************************

#if SO@GUI@_DEBUG
static const char * getSo@Gui@ViewerRCSId(void) { return rcsid; }
#endif // SO@GUI@_DEBUG
