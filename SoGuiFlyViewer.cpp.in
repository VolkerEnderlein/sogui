/**************************************************************************
 *
 *  This file is part of the Coin GUI binding libraries.
 *  Copyright (C) 2000 by Systems in Motion.  All rights reserved.
 *
 *  The libraries this file is part of is free software; you can
 *  redistribute them and/or modify them under the terms of the GNU
 *  Lesser General Public License version 2.1 as published by the
 *  Free Software Foundation.  See the file LICENSE.LGPL at the root
 *  directory of the distribution for all the details.
 *
 *  If you want to use the Coin GUI binding libraries for applications
 *  not compatible with the LGPL, contact SIM about acquiring a
 *  Professional Edition License.
 *
 *  Systems in Motion, Prof Brochs gate 6, N-7030 Trondheim, NORWAY
 *  http://www.sim.no/ support@sim.no Voice: +47 22114160 Fax: +47 22207097
 *
 **************************************************************************/

// @configure_input@

#if SO@GUI@_DEBUG
static const char rcsid[] =
  "$Id$";
#endif // SO@GUI@_DEBUG

/*!
  \class So@Gui@FlyViewer Inventor/@Gui@/viewers/So@Gui@FlyViewer.h
  \brief The So@Gui@FlyViewer class implements controls for moving the camera in a "flying" motion.
  \ingroup so@gui@viewers

  Controls:
  <ul>

  <li>"s" puts the viewer in seek mode. Click some geometry with the
      left mouse button to start the seek zoom animation. (Hitting "s"
      again before clicking will cancel the seek operation.)</li>

  <li>"u" puts the viewer in up-vector pick mode. Click some geometry
      with the left mouse button to set the camera's
      up-vector. (Hitting "u" again before clicking will cancel the
      pick operation.) </li>

  </ul>

  FIXME: document (all mouse controls, all keyboard controls, ...)
*/

#include <so@gui@defs.h>
#include <Inventor/@Gui@/viewers/So@Gui@FlyViewer.h>
// #include <Inventor/SbViewportRegion.h>
#include <Inventor/events/SoKeyboardEvent.h>
#include <Inventor/events/SoLocation2Event.h>
#include <Inventor/events/SoMouseButtonEvent.h>
#include <Inventor/nodes/SoCamera.h>
#include <Inventor/nodes/SoCallback.h>
#include <Inventor/nodes/SoCoordinate3.h>
#include <Inventor/nodes/SoSwitch.h>
#include <Inventor/nodes/SoScale.h>
#include <Inventor/nodes/SoTranslation.h>
#if SO@GUI@_DEBUG
#include <Inventor/errors/SoDebugError.h>
#endif // SO@GUI@_DEBUG
#include <Inventor/actions/SoSearchAction.h>
#include <Inventor/actions/SoHandleEventAction.h>

// ************************************************************************

class So@Gui@FlyViewerP {
public:
  So@Gui@FlyViewerP( So@Gui@FlyViewer * owner )
  {
    this->searcher = NULL;
    this->viewer = owner;
    this->viewermode = FLYING;
    this->currentspeed = 0.0f;
    this->maxspeed = 0.0f;
    this->stranslation = NULL;
    this->sscale = NULL;
    this->button1down = FALSE;
    this->button3down = FALSE;
    this->lastrender = NULL;
  }
  ~So@Gui@FlyViewerP(void);

  enum ViewerMode {
    FLYING, WAITING_FOR_SEEK, WAITING_FOR_UP_PICK
  };

  void dolly( const float delta ) const;
  void updateCursorRepresentation( void ); // in SoNativeFlyViewer.cpp
  void setMode( ViewerMode newmode );
  int getMode( void ) { return this->viewermode; }

#define SO@GUI@_MIN_STEP     0.3f
#define SO@GUI@_INC_FACTOR   1.6f
#define SO@GUI@_MAX_SPEED   20.0f

  SbTime * lastrender;
  float currentspeed, maxspeed;

  void updateSpeedIndicator(void);

  SbBool button1down, button3down;

  SoSearchAction * searcher;

  SoNode * superimposition;
  SoScale * sscale;
  SoCoordinate3 * sgeometry;
  SoTranslation * stranslation;
  SoSwitch * smaxspeedswitch, * scurrentspeedswitch;
  void superimpositionevent(SoAction * action);
  static void superimposition_cb(void * closure, SoAction * action);
  SbVec2s mouseloc;

  SoNode * getSuperimpositionNode(const char * name);
private:
  So@Gui@FlyViewer * viewer;
  int viewermode;
};

So@Gui@FlyViewerP::~So@Gui@FlyViewerP(void)
{
  if ( this->searcher )
    delete this->searcher;
  if ( this->lastrender )
    delete this->lastrender;
}

#define PRIVATE( o ) ( o->pimpl )

// ************************************************************************

SO@GUI@_OBJECT_SOURCE(So@Gui@FlyViewer);

// ************************************************************************

/*!
  Public constructor.
*/
So@Gui@FlyViewer::So@Gui@FlyViewer( // public
  @WIDGET@ parent,
  const char * name, 
  SbBool embed, 
  So@Gui@FullViewer::BuildFlag flag,
  So@Gui@Viewer::Type type )
: inherited( parent, name, embed, flag, type, FALSE )
{
  this->constructor( TRUE );
} // So@Gui@FlyViewer()

// ************************************************************************

/*!
  Protected constructor, used by viewer components derived from the
  So@Gui@FlyViewer.
*/
So@Gui@FlyViewer::So@Gui@FlyViewer( // protected
  @WIDGET@ parent,
  const char * const name,
  SbBool embed, 
  So@Gui@FullViewer::BuildFlag flag, 
  So@Gui@Viewer::Type type, 
  SbBool build )
: inherited( parent, name, embed, flag, type, FALSE )
{
  this->constructor( build );
} // So@Gui@FlyViewer()

/*!
  Common constructor code.
*/

void
So@Gui@FlyViewer::constructor( // private
  SbBool build )
{
  PRIVATE( this ) = new So@Gui@FlyViewerP( this );

  this->setClassName( this->getDefaultWidgetName() );

  static char * superimposed[] = {
    "#Inventor V2.1 ascii",
    "",
    "Separator {",
    "  MaterialBinding {",
    "    value OVERALL",
    "  }",
    "  OrthographicCamera {",
    "    height 1",
    "    nearDistance 0",
    "    farDistance 1",
    "  }",
    "  DEF so@gui@->callback Callback { }",
    "  DEF so@gui@->translation Translation {",
    "    translation 0 0 0",
    "  }",
    "  DEF so@gui@->scale Scale {",
    "    scaleFactor 1 1 1",
    "  }",
    "  DEF so@gui@->geometry Coordinate3 {",
    "    point [",
    "     -0.8 -0.04 0,",
    "     -0.8  0    0,",
    "     -0.8  0.04 0,",
    "      0   -0.04 0,",
    "      0    0    0,",
    "      0    0.04 0,",
    "      0.8 -0.04 0,",
    "      0.8  0    0,",
    "      0.8  0.04 0,", 
    "      0    0.02 0,", // idx 9
    "      0.8  0.02 0,",
    "      0.8 -0.02 0,",
    "      0   -0.02 0,",
    "      0    0.01 0,", // idx 13
    "      0.4  0.01 0,",
    "      0.4 -0.01 0,",
    "      0   -0.01 0",
    "    ]",
    "  }",
    "  DEF so@gui@->maxspeedswitch Switch {",
    "    whichChild -3",
    // max speed indicator
    "    Material {",
    "      emissiveColor 1 0 0",
    "    }",
    "    IndexedFaceSet {",
    "      coordIndex [",
    "        12, 11, 10, 9, -1",
    "      ]",
    "    }",
    "  }",
    // the coordinate system
    "  Material {",
    "    emissiveColor 1 1 1",
    "  }",
    "  IndexedLineSet {",
    "    coordIndex [",
    "      0, 2, -1,",
    "      3, 5, -1,",
    "      6, 8, -1,",
    "      1, 7, -1",
    "    ]",
    "  }",
    // current speed indicator
    "  DEF so@gui@->currentspeedswitch Switch {",
    "    whichChild -3",
    "    Material {",
    "      emissiveColor 0 0 1",
    "    }",
    "    IndexedFaceSet {",
    "      coordIndex [",
    "        16, 15, 14, 13, -1",
    "      ]",
    "    }",
    "  }",
    // cross
    "  DEF so@gui@->crossswitch Switch {",
    "    whichChild -1",
    "    Coordinate3 {",
    "      point [",
    "      ]",
    "    }",
    "    IndexedLineSet {",
    "      coordIndex [",
    "        0, 1, -1,",
    "        2, 3, -1",
    "      ]",
    "    }",
    "  }",
    "}",
    NULL
  };

  int i, bufsize;
  for ( i = bufsize = 0; superimposed[i]; i++ )
    bufsize += strlen(superimposed[i]) + 1;
  char * buf = new char [bufsize + 1];
  for ( i = bufsize = 0; superimposed[i]; i++ ) {
    strcpy(buf + bufsize, superimposed[i]);
    bufsize += strlen(superimposed[i]);
    buf[bufsize] = '\n';
    bufsize++;
  }
  SoInput * input = new SoInput;
  input->setBuffer(buf, bufsize);
  SbBool ok = SoDB::read(input, PRIVATE(this)->superimposition);
  assert(ok);
  delete input;
  delete [] buf;
  PRIVATE(this)->superimposition->ref();

  PRIVATE(this)->sscale = (SoScale *)
    PRIVATE(this)->getSuperimpositionNode("so@gui@->scale");
  PRIVATE(this)->stranslation = (SoTranslation *)
    PRIVATE(this)->getSuperimpositionNode("so@gui@->translation");
  PRIVATE(this)->sgeometry = (SoCoordinate3 *)
    PRIVATE(this)->getSuperimpositionNode("so@gui@->geometry");
  PRIVATE(this)->smaxspeedswitch = (SoSwitch *)
    PRIVATE(this)->getSuperimpositionNode("so@gui@->maxspeedswitch");
  PRIVATE(this)->scurrentspeedswitch = (SoSwitch *)
    PRIVATE(this)->getSuperimpositionNode("so@gui@->currentspeedswitch");

  SoCallback * cb = (SoCallback *)
    PRIVATE(this)->getSuperimpositionNode("so@gui@->callback");
  cb->setCallback(So@Gui@FlyViewerP::superimposition_cb, PRIVATE(this));

  PRIVATE(this)->updateSpeedIndicator();

  this->addSuperimposition(PRIVATE(this)->superimposition);
  this->setSuperimpositionEnabled(PRIVATE(this)->superimposition,TRUE);

  if ( build ) {
    @WIDGET@ viewer = inherited::buildWidget( this->getParentWidget() );
    this->setBaseWidget( viewer );
  }
} // constructor()

// ************************************************************************

/*!
  Virtual constructor.
*/
So@Gui@FlyViewer::~So@Gui@FlyViewer()
{
  if ( PRIVATE(this)->superimposition != NULL ) {
    this->removeSuperimposition(PRIVATE(this)->superimposition);
    PRIVATE(this)->superimposition->unref();
    PRIVATE(this)->superimposition = NULL;
  }
  delete PRIVATE( this );
} // ~So@Gui@FlyViewer()

// ************************************************************************

// doc in super
void
So@Gui@FlyViewer::setViewing( // virtual
  SbBool enable )
{
  if ( enable != this->isViewing() ) {
    PRIVATE(this)->maxspeed = 0.0f;
    PRIVATE(this)->currentspeed = 0.0f;
  }
  inherited::setViewing( enable );
  this->setSuperimpositionEnabled(PRIVATE(this)->superimposition,
                                  enable);
  this->scheduleRedraw();
} // setViewing()

// ************************************************************************

// doc in super
void
So@Gui@FlyViewer::resetToHomePosition( // virtual
  void )
{
  PRIVATE(this)->maxspeed = 0.0f;
  PRIVATE(this)->currentspeed = 0.0f;
  inherited::resetToHomePosition();
} // resetToHomePosition()

// ************************************************************************

// doc in super
void
So@Gui@FlyViewer::viewAll( // virtual
  void )
{
  PRIVATE(this)->maxspeed = 0.0f;
  PRIVATE(this)->currentspeed = 0.0f;
  inherited::viewAll();
} // viewAll()

// ************************************************************************

// doc in super
void
So@Gui@FlyViewer::setCamera( // virtual
  SoCamera * camera )
{
  PRIVATE(this)->maxspeed = 0.0f;
  PRIVATE(this)->currentspeed = 0.0f;
  inherited::setCamera( camera );
  // FIXME: do something with up-direction?
} // setCamera()

// ************************************************************************

// doc in super
void
So@Gui@FlyViewer::setCursorEnabled( // virtual
  SbBool enable )
{
  inherited::setCursorEnabled( enable );
  PRIVATE( this )->updateCursorRepresentation( );
} // setCursorEnabled()

// ************************************************************************

// doc in super
void
So@Gui@FlyViewer::setCameraType( // virtual
  SoType type )
{
  inherited::setCameraType( type );
  // FIXME: what else? 20010907 mortene.
  // larsa:
  //   set speed to 0?
} // setCameraType()

// ************************************************************************

// doc in super
const char *
So@Gui@FlyViewer::getDefaultWidgetName( // virtual
  void ) const
{
  static const char defaultWidgetName[] = "So@Gui@FlyViewer";
  return defaultWidgetName;
} // getDefaultWidgetName()

// ************************************************************************

// doc in super
const char *
So@Gui@FlyViewer::getDefaultTitle( // virtual
  void ) const
{
  static const char defaultTitle[] = "Fly Viewer";
  return defaultTitle;
} // getDefaultTitle()

// ************************************************************************

// doc in super
const char *
So@Gui@FlyViewer::getDefaultIconTitle( // virtual
  void ) const
{
  static const char defaultIconTitle[] = "Fly Viewer";
  return defaultIconTitle;
} // getDefaultIconTitle()

// ************************************************************************

// doc in super
SbBool
So@Gui@FlyViewer::processSoEvent( // virtual
  const SoEvent * const event )
{
  if ( !this->isViewing() )
    return inherited::processSoEvent(event);

  // Keyboard handling
  if ( event->isOfType(SoKeyboardEvent::getClassTypeId()) ) {
    // FIXME: only in fly mode
    const SoKeyboardEvent * const ke = (const SoKeyboardEvent *) event;
    const SbBool release = ke->getState() == SoButtonEvent::UP ? TRUE : FALSE;
    if ( release ) {
      if ( ke->getKey() == SoKeyboardEvent::U ) {
        // either to switch to up-vector pick mode, or back to fly
        // mode if pick-mode already activated (ie cancel the
        // up-vector pick operation)
        SbBool uppickmode =
          PRIVATE( this )->getMode() == So@Gui@FlyViewerP::WAITING_FOR_UP_PICK;
        PRIVATE( this )->setMode( uppickmode ? So@Gui@FlyViewerP::FLYING :
                                  So@Gui@FlyViewerP::WAITING_FOR_UP_PICK );
        return TRUE;
      }
    }
  }

  // Mousebutton handling
  else if ( event->isOfType(SoMouseButtonEvent::getClassTypeId()) ) {
    // FIXME: only for fly mode
    const SoMouseButtonEvent * const me = (const SoMouseButtonEvent *) event;
    switch ( PRIVATE(this)->getMode() ) {
    case So@Gui@FlyViewerP::WAITING_FOR_UP_PICK:
      if ( (me->getButton() == SoMouseButtonEvent::BUTTON1) &&
           (me->getState() == SoButtonEvent::DOWN) ) {
        this->findUpDirection( event->getPosition( ) );
        PRIVATE(this)->setMode( So@Gui@FlyViewerP::FLYING );
        return TRUE;
      }
      break;
    case So@Gui@FlyViewerP::FLYING:
      switch ( me->getButton() ) {
      case SoMouseButtonEvent::BUTTON1:
        switch ( me->getState() ) {
        case SoButtonEvent::DOWN:
          PRIVATE(this)->button1down = TRUE;
          if ( PRIVATE(this)->button3down ) {
            PRIVATE(this)->currentspeed = 0.0f;
            PRIVATE(this)->maxspeed = 0.0f;
          } else {
            if ( PRIVATE(this)->maxspeed == 0 )
              PRIVATE(this)->maxspeed = SO@GUI@_MIN_STEP;
            else if ( (PRIVATE(this)->maxspeed >= -SO@GUI@_MIN_STEP) &&
                      (PRIVATE(this)->maxspeed < 0.0f) )
              PRIVATE(this)->maxspeed = 0.0f;
            else if ( PRIVATE(this)->maxspeed > 0 )
              PRIVATE(this)->maxspeed *= SO@GUI@_INC_FACTOR;
            else
              PRIVATE(this)->maxspeed /= SO@GUI@_INC_FACTOR;
            if ( PRIVATE(this)->maxspeed > SO@GUI@_MAX_SPEED )
              PRIVATE(this)->maxspeed = SO@GUI@_MAX_SPEED;
            else if ( PRIVATE(this)->maxspeed < -SO@GUI@_MAX_SPEED )
              PRIVATE(this)->maxspeed = -SO@GUI@_MAX_SPEED;
            // PRIVATE(this)->currentspeed = PRIVATE(this)->maxspeed / 2.0f;
          }
          PRIVATE(this)->updateSpeedIndicator();
          this->scheduleRedraw();
          return TRUE;
        case SoButtonEvent::UP:
          PRIVATE(this)->button1down = FALSE;
          return TRUE;
        default:
          break;
        }
        break;
      case SoMouseButtonEvent::BUTTON3:
        switch ( me->getState() ) {
        case SoButtonEvent::DOWN:
          PRIVATE(this)->button3down = TRUE;
          if ( PRIVATE(this)->button1down ) {
            PRIVATE(this)->currentspeed = 0.0f;
            PRIVATE(this)->maxspeed = 0.0f;
          } else {
            if ( (PRIVATE(this)->maxspeed > 0.0f) &&
                 (PRIVATE(this)->maxspeed <= SO@GUI@_MIN_STEP) )
              PRIVATE(this)->maxspeed = 0.0f;
            else if ( PRIVATE(this)->maxspeed == 0.0f )
              PRIVATE(this)->maxspeed = -SO@GUI@_MIN_STEP;
            else if ( PRIVATE(this)->maxspeed > 0 )
              PRIVATE(this)->maxspeed /= SO@GUI@_INC_FACTOR;
            else
              PRIVATE(this)->maxspeed *= SO@GUI@_INC_FACTOR;
            if ( PRIVATE(this)->maxspeed > SO@GUI@_MAX_SPEED )
              PRIVATE(this)->maxspeed = SO@GUI@_MAX_SPEED;
            else if ( PRIVATE(this)->maxspeed < -SO@GUI@_MAX_SPEED )
              PRIVATE(this)->maxspeed = -SO@GUI@_MAX_SPEED;
            // PRIVATE(this)->currentspeed = PRIVATE(this)->maxspeed / 2.0f;
          }
          PRIVATE(this)->updateSpeedIndicator();
          this->scheduleRedraw();
          return TRUE;
        case SoButtonEvent::UP:
          PRIVATE(this)->button3down = FALSE;
          return TRUE;
        default:
          break;
        }
        break;
      default:
        break;
      }
    default:
      break;
    }
  }

  else if ( event->isOfType(SoLocation2Event::getClassTypeId()) ) {
    // FIXME: only for fly mode
    PRIVATE(this)->mouseloc = ((SoLocation2Event *) event)->getPosition();
  }

  return inherited::processSoEvent( event );
} // processSoEvent()

// ************************************************************************

// doc in super
void
So@Gui@FlyViewer::setSeekMode( // virtual
  SbBool enable )
{
  // Note: this method is almost identical to the setSeekMode() in the
  // So@Gui@ExaminerViewer, so migrate any changes.

#if SO@GUI@_DEBUG
  if (enable == this->isSeekMode()) {
    SoDebugError::postWarning("So@Gui@FlyViewer::setSeekMode",
                              "seek mode already %sset", enable ? "" : "un");
    return;
  }
#endif // SO@GUI@_DEBUG

  // FIXME: what if we're in the middle of a seek already? 20010910 mortene.
  // larsa - either stop the seek (on false) or reset timer to two new secs

  inherited::setSeekMode(enable);
  PRIVATE( this )->setMode( enable ? So@Gui@FlyViewerP::WAITING_FOR_SEEK :
                            So@Gui@FlyViewerP::FLYING );
} // setSeekMode()

// ************************************************************************

// doc in super
void
So@Gui@FlyViewer::actualRedraw( // virtual
  void )
{
  if ( !this->isViewing() ) {
    inherited::actualRedraw();
    return;
  }

  switch ( PRIVATE(this)->getMode() ) {
  case So@Gui@FlyViewerP::FLYING:
    do {
      SbVec2s glsize(this->getGLSize());
      SbVec2s mid(glsize[0]/2, glsize[1]/2);
      float xfrac =
        float(mid[0]-PRIVATE(this)->mouseloc[0]) / float(mid[0]);
      float yfrac =
        float(mid[1]-PRIVATE(this)->mouseloc[1]) / float(mid[1]);
      float factor = xfrac * xfrac + yfrac * yfrac;
      if ( factor > 0.99f ) {
        factor = 0.01f;
      } else {
        factor = 1.0f - factor;
      }

      SbTime thisrender;
      thisrender.setToTimeOfDay();
      float t = 0.0f;
      if ( PRIVATE(this)->lastrender ) {
        if ( PRIVATE(this)->currentspeed == 0.0f )
          PRIVATE(this)->lastrender->setValue(thisrender.getValue()-0.01);
        t = float(thisrender.getMsecValue() - PRIVATE(this)->lastrender->getMsecValue()) / 100.0f;
        if ( t >= 1.0f ) t = 1.0f;
      }
      PRIVATE(this)->currentspeed +=
        (((PRIVATE(this)->currentspeed +
           PRIVATE(this)->maxspeed * factor) / 2.0f)
         - PRIVATE(this)->currentspeed) * t;

      // need some lower epsilon since the above may not get down to 0...
      if ( (PRIVATE(this)->currentspeed <  0.001f) &&
           (PRIVATE(this)->currentspeed > -0.001f) )
        PRIVATE(this)->currentspeed = 0.0f;
        
      PRIVATE(this)->updateSpeedIndicator();

      if ( PRIVATE(this)->currentspeed != 0.0f ) {
        if ( PRIVATE(this)->lastrender ) {
          // FIXME: update camera position and orientation and
          t = float(thisrender.getMsecValue() - PRIVATE(this)->lastrender->getMsecValue()) / 500.0f;
          if ( t > 0.0f ) {
            SoCamera * camera = this->getCamera();
            assert(camera != NULL);
            SbVec3f up(this->getUpDirection());
            SbVec3f dir;
            SbRotation orientation(camera->orientation.getValue());
            orientation.multVec(SbVec3f(0.0f,0.0f,-1.0f), dir);
            camera->position.setValue(camera->position.getValue() +
                                      dir * (PRIVATE(this)->currentspeed * t));
            float xfactor = xfrac * xfrac / 2.0f;
            SbVec3f horizon(dir.cross(up));
            horizon.normalize();

            if ( xfrac < 0.0f ) xfactor = -xfactor;
            orientation *=
              SbRotation(this->getUpDirection(), xfactor * t);

            // set tilt
            SbRotation tilt = SbRotation(horizon, yfrac * yfrac * 0.002f);
            if ( yfrac >= 0.0f ) tilt.invert();
            orientation *= tilt;
            SbVec3f newUp;
            tilt.multVec(up, newUp);
            this->setUpDirection(newUp);
            camera->orientation.setValue(orientation);
          }
        }
      }
      inherited::actualRedraw();
      if ( !PRIVATE(this)->lastrender )
        PRIVATE(this)->lastrender = new SbTime;
      PRIVATE(this)->lastrender->setValue(thisrender.getValue());
      if ( PRIVATE(this)->currentspeed != 0.0f ||
           PRIVATE(this)->maxspeed != 0.0f )
        this->scheduleRedraw();
    } while ( FALSE );
    break;
  default:
    inherited::actualRedraw();
    break;
  }
} // actualRedraw()

// ************************************************************************

// doc in super
void
So@Gui@FlyViewer::rightWheelMotion( // virtual
  float value )
{
  PRIVATE( this )->dolly( value - this->getRightWheelValue() );
  inherited::rightWheelMotion( value );
} // rightWheelMotion()

// ************************************************************************

/*!
  FIXME: doc
 */
void
So@Gui@FlyViewer::createPrefSheet( // virtual
  void )
{
  SO@GUI@_STUB();
} // createPrefSheet()

// ************************************************************************

// doc in super
void
So@Gui@FlyViewer::openViewerHelpCard( // virtual
  void )
{
  // FIXME: mark obsoleted. 20010907 mortene.
} // openViewerHelpCard()

// ************************************************************************

// This method dollies the camera back and forth in the scene.
void
So@Gui@FlyViewerP::dolly(
  const float delta ) const
{
  SoCamera * const camera = this->viewer->getCamera();
  if ( camera == NULL ) { return; } // if there's no scenegraph, for instance

  SbPlane walkplane( this->viewer->getUpDirection(), camera->position.getValue() );
  SbVec3f campos = camera->position.getValue();
  SbVec3f camvec;
  camera->orientation.getValue().multVec( SbVec3f( 0, 0, -1 ), camvec );
  SbLine cross( campos + camvec,
                campos + camvec + this->viewer->getUpDirection() );
  SbVec3f intersect;
  walkplane.intersect( cross, intersect );
  SbVec3f dir = intersect - campos;
  dir.normalize();

  camera->position = campos - dir * delta;
} // dolly()

// ************************************************************************

// doc in super
void
So@Gui@FlyViewer::afterRealizeHook( // protected virtual
  void )
{
  PRIVATE( this )->updateCursorRepresentation( );
  inherited::afterRealizeHook();
} // afterRealizeHook()

// ************************************************************************

// The viewer is a state machine, and all changes to the current state
// are made through this call.
void
So@Gui@FlyViewerP::setMode( ViewerMode newmode )
{
  switch ( newmode ) {
    // Assuming interesting things will happen here..
  default:
    break;
  }

  this->viewermode = newmode;
  this->updateCursorRepresentation( );
} // setMode()

// ************************************************************************

/*!
  This method locates a named node in the superimposed scene.
 */

SoNode *
So@Gui@FlyViewerP::getSuperimpositionNode(const char * name)
{
  if ( ! this->searcher )
    this->searcher = new SoSearchAction;
  searcher->reset();
  searcher->setName(SbName(name));
  searcher->setInterest(SoSearchAction::FIRST);
  searcher->apply(this->superimposition);
  assert(searcher->getPath());
  return searcher->getPath()->getTail();
} // getSuperimpositionNode()

// ************************************************************************

void
So@Gui@FlyViewerP::superimpositionevent(
  SoAction * action )
{
  if ( !action->isOfType(SoGLRenderAction::getClassTypeId()) ) return;
  SbViewportRegion vpRegion =
    ((SoGLRenderAction *) action)->getViewportRegion();
  SbVec2s viewport = vpRegion.getViewportSizePixels();
  float aspect = float(viewport[0]) / float(viewport[1]);
  float factorx = 1.0f/float(viewport[1]) * 220.0f;
  float factory = factorx;
  if ( aspect > 1.0f ) {
    this->stranslation->translation.setValue(SbVec3f(0.0f, -0.4f, 0.0f));
  } else {
    this->stranslation->translation.setValue(SbVec3f(0.0f, -0.4f / aspect, 0.0f));
    factorx /= aspect;
    factory /= aspect;
  }
  if ( viewport[0] > 500 )
    factorx *= 500.0f / 400.0f;
  else
    factorx *= float(viewport[0]) / 400.0f;
  this->sscale->scaleFactor.setValue( SbVec3f(factorx, factory, 1.0f) );
} // superimpositionevent()

void
So@Gui@FlyViewerP::superimposition_cb( // static
  void * closure,
  SoAction * action )
{
  assert(closure != NULL);
  ((So@Gui@FlyViewerP *) closure)->superimpositionevent(action);
} // superimposition_cb()

// ************************************************************************

void
So@Gui@FlyViewerP::updateSpeedIndicator(
  void )
{
  assert(this->sgeometry != NULL);
  SbVec3f * points = this->sgeometry->point.startEditing();
  if ( points[10][0] == 0.0f )
    this->smaxspeedswitch->whichChild.setValue(SO_SWITCH_ALL);
  if ( points[14][0] == 0.0f )
    this->scurrentspeedswitch->whichChild.setValue(SO_SWITCH_ALL);
  points[10][0] = this->maxspeed / (SO@GUI@_MAX_SPEED / 0.8f);
  points[11][0] = this->maxspeed / (SO@GUI@_MAX_SPEED / 0.8f);
  points[14][0] = this->currentspeed / (SO@GUI@_MAX_SPEED / 0.8f);
  points[15][0] = this->currentspeed / (SO@GUI@_MAX_SPEED / 0.8f);
  this->sgeometry->point.finishEditing();
  if ( this->maxspeed == 0.0f )
    this->smaxspeedswitch->whichChild.setValue(SO_SWITCH_NONE);
  if ( this->currentspeed == 0.0f )
    this->scurrentspeedswitch->whichChild.setValue(SO_SWITCH_NONE);
}

// ************************************************************************

// Contains the toolkit-specific code.
#include <SoNativeFlyViewer.cpp>
