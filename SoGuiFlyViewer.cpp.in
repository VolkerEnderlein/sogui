/**************************************************************************
 *
 *  This file is part of the Coin GUI binding libraries.
 *  Copyright (C) 2000 by Systems in Motion.  All rights reserved.
 *
 *  The libraries this file is part of is free software; you can
 *  redistribute them and/or modify them under the terms of the GNU
 *  Lesser General Public License version 2.1 as published by the
 *  Free Software Foundation.  See the file LICENSE.LGPL at the root
 *  directory of the distribution for all the details.
 *
 *  If you want to use the Coin GUI binding libraries for applications
 *  not compatible with the LGPL, contact SIM about acquiring a
 *  Professional Edition License.
 *
 *  Systems in Motion, Prof Brochs gate 6, N-7030 Trondheim, NORWAY
 *  http://www.sim.no/ support@sim.no Voice: +47 22114160 Fax: +47 22207097
 *
 **************************************************************************/

// @configure_input@

#if SO@GUI@_DEBUG
static const char rcsid[] =
  "$Id$";
#endif // SO@GUI@_DEBUG

/*!
  \class So@Gui@FlyViewer Inventor/@Gui@/viewers/So@Gui@FlyViewer.h
  \brief The So@Gui@FlyViewer class implements controls for moving the camera in a "flying" motion.
  \ingroup so@gui@viewers

  Controls:
  <ul>

  <li>"s" puts the viewer in seek mode. Click some geometry with the
      left mouse button to start the seek zoom animation. </li>

  </ul>

  FIXME: document (all mouse controls, all keyboard controls, ...)
*/

#include <so@gui@defs.h>
#include <Inventor/@Gui@/viewers/So@Gui@FlyViewer.h>
#include <Inventor/nodes/SoCamera.h>
#if SO@GUI@_DEBUG
#include <Inventor/errors/SoDebugError.h>
#endif // SO@GUI@_DEBUG

// ************************************************************************

class So@Gui@FlyViewerP {
public:
  So@Gui@FlyViewerP( So@Gui@FlyViewer * owner )
  {
    this->viewer = owner;
    this->viewermode = FLYING;
  }

  enum ViewerMode {
    FLYING, WAITING_FOR_SEEK
  };

  void dolly( const float delta ) const;
  void updateCursorRepresentation( void ); // in SoNativeFlyViewer.cpp
  void setMode( ViewerMode newmode );

private:
  So@Gui@FlyViewer * viewer;
  int viewermode;
};

#define PRIVATE( o ) ( o->pimpl )

// ************************************************************************

SO@GUI@_OBJECT_SOURCE(So@Gui@FlyViewer);

// ************************************************************************

/*!
  Public constructor.
*/
So@Gui@FlyViewer::So@Gui@FlyViewer( // public
  @WIDGET@ parent,
  const char * name, 
  SbBool embed, 
  So@Gui@FullViewer::BuildFlag flag,
  So@Gui@Viewer::Type type )
: inherited( parent, name, embed, flag, type, FALSE )
{
  this->constructor( TRUE );
} // So@Gui@FlyViewer()

// ************************************************************************

/*!
  Protected constructor, used by viewer components derived from the
  So@Gui@FlyViewer.
*/
So@Gui@FlyViewer::So@Gui@FlyViewer( // protected
  @WIDGET@ parent,
  const char * const name,
  SbBool embed, 
  So@Gui@FullViewer::BuildFlag flag, 
  So@Gui@Viewer::Type type, 
  SbBool build )
: inherited( parent, name, embed, flag, type, FALSE )
{
  this->constructor( build );
} // So@Gui@FlyViewer()

/*!
  Common constructor code.
*/

void
So@Gui@FlyViewer::constructor( // private
  SbBool build )
{
  PRIVATE( this ) = new So@Gui@FlyViewerP( this );

  this->setClassName( this->getDefaultWidgetName() );

  if ( build ) {
    @WIDGET@ viewer = inherited::buildWidget( this->getParentWidget() );
    this->setBaseWidget( viewer );
  }
} // constructor()

// ************************************************************************

/*!
  Virtual constructor.
*/
So@Gui@FlyViewer::~So@Gui@FlyViewer()
{
  delete PRIVATE( this );
} // ~So@Gui@FlyViewer()

// ************************************************************************

// doc in super
void
So@Gui@FlyViewer::setViewing( // virtual
  SbBool enable )
{
  inherited::setViewing( enable );
  // FIXME: what else? 20010907 mortene.
} // setViewing()

// ************************************************************************

// doc in super
void
So@Gui@FlyViewer::resetToHomePosition( // virtual
  void )
{
  inherited::resetToHomePosition();
  // FIXME: what else? 20010907 mortene.
} // resetToHomePosition()

// ************************************************************************

// doc in super
void
So@Gui@FlyViewer::setCamera( // virtual
  SoCamera * camera )
{
  inherited::setCamera( camera );
  // FIXME: what else? 20010907 mortene.
} // setCamera()

// ************************************************************************

// doc in super
void
So@Gui@FlyViewer::setCursorEnabled( // virtual
  SbBool enable )
{
  inherited::setCursorEnabled( enable );
  PRIVATE( this )->updateCursorRepresentation( );
} // setCursorEnabled()

// ************************************************************************

// doc in super
void
So@Gui@FlyViewer::setCameraType( // virtual
  SoType type )
{
  inherited::setCameraType( type );
  // FIXME: what else? 20010907 mortene.
} // setCameraType()

// ************************************************************************

// doc in super
const char *
So@Gui@FlyViewer::getDefaultWidgetName( // virtual
  void ) const
{
  static const char defaultWidgetName[] = "So@Gui@FlyViewer";
  return defaultWidgetName;
} // getDefaultWidgetName()

// ************************************************************************

// doc in super
const char *
So@Gui@FlyViewer::getDefaultTitle( // virtual
  void ) const
{
  static const char defaultTitle[] = "Fly Viewer";
  return defaultTitle;
} // getDefaultTitle()

// ************************************************************************

// doc in super
const char *
So@Gui@FlyViewer::getDefaultIconTitle( // virtual
  void ) const
{
  static const char defaultIconTitle[] = "Fly Viewer";
  return defaultIconTitle;
} // getDefaultIconTitle()

// ************************************************************************

// doc in super
void
So@Gui@FlyViewer::processEvent( // virtual
  @EVENT@ event )
{
  if ( this->processCommonEvents( event ) ) { return; }
  // FIXME: take care of our specific events here. 20010907 mortene.
  inherited::processEvent( event );
} // processEvent()

// ************************************************************************

// doc in super
void
So@Gui@FlyViewer::setSeekMode( // virtual
  SbBool enable )
{
  // Note: this method is almost identical to the setSeekMode() in the
  // So@Gui@ExaminerViewer, so migrate any changes.

#if SO@GUI@_DEBUG
  if (enable == this->isSeekMode()) {
    SoDebugError::postWarning("So@Gui@FlyViewer::setSeekMode",
                              "seek mode already %sset", enable ? "" : "un");
    return;
  }
#endif // SO@GUI@_DEBUG

  // FIXME: what if we're in the middle of a seek already? 20010910 mortene.

  inherited::setSeekMode(enable);
  PRIVATE( this )->setMode( enable ? So@Gui@FlyViewerP::WAITING_FOR_SEEK :
                            So@Gui@FlyViewerP::FLYING );
} // setSeekMode()

// ************************************************************************

// doc in super
void
So@Gui@FlyViewer::actualRedraw( // virtual
  void )
{
  inherited::actualRedraw();
  // FIXME: render speed indicator on top. 20010907 mortene.
} // actualRedraw()

// ************************************************************************

// doc in super
void
So@Gui@FlyViewer::rightWheelMotion( // virtual
  float value )
{
  PRIVATE( this )->dolly( value - this->getRightWheelValue() );
  inherited::rightWheelMotion( value );
} // rightWheelMotion()

// ************************************************************************

/*!
  FIXME: doc
 */
void
So@Gui@FlyViewer::createPrefSheet( // virtual
  void )
{
  SO@GUI@_STUB();
} // createPrefSheet()

// ************************************************************************

// doc in super
void
So@Gui@FlyViewer::openViewerHelpCard( // virtual
  void )
{
  // FIXME: mark obsoleted. 20010907 mortene.
} // openViewerHelpCard()

// ************************************************************************

// This method dollies the camera back and forth in the scene.
void
So@Gui@FlyViewerP::dolly(
  const float delta ) const
{
  SoCamera * const camera = this->viewer->getCamera();
  if ( camera == NULL ) { return; } // if there's no scenegraph, for instance

  SbPlane walkplane( this->viewer->getUpDirection(), camera->position.getValue() );
  SbVec3f campos = camera->position.getValue();
  SbVec3f camvec;
  camera->orientation.getValue().multVec( SbVec3f( 0, 0, -1 ), camvec );
  SbLine cross( campos + camvec,
                campos + camvec + this->viewer->getUpDirection() );
  SbVec3f intersect;
  walkplane.intersect( cross, intersect );
  SbVec3f dir = intersect - campos;
  dir.normalize();

  camera->position = campos - dir * delta;
} // dolly()

// ************************************************************************

// doc in super
void
So@Gui@FlyViewer::afterRealizeHook( // protected virtual
  void )
{
  PRIVATE( this )->updateCursorRepresentation( );
  inherited::afterRealizeHook();
} // afterRealizeHook()

// ************************************************************************

// The viewer is a state machine, and all changes to the current state
// are made through this call.
void
So@Gui@FlyViewerP::setMode( ViewerMode newmode )
{
  switch ( newmode ) {
    // Assuming interesting things will happen here..
  default:
    break;
  }

  this->viewermode = newmode;
  this->updateCursorRepresentation( );
} // setMode()

// ************************************************************************

// Contains the toolkit-specific code.
#include <SoNativeFlyViewer.cpp>
