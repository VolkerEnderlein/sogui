/**************************************************************************
 *
 *  This file is part of the Coin GUI binding libraries.
 *  Copyright (C) 2000 by Systems in Motion.  All rights reserved.
 *
 *  The libraries this file is part of is free software; you can
 *  redistribute them and/or modify them under the terms of the GNU
 *  Lesser General Public License version 2.1 as published by the
 *  Free Software Foundation.  See the file LICENSE.LGPL at the root
 *  directory of the distribution for all the details.
 *
 *  If you want to use the Coin GUI binding libraries for applications
 *  not compatible with the LGPL, contact SIM about acquiring a
 *  Professional Edition License.
 *
 *  Systems in Motion, Prof Brochs gate 6, N-7030 Trondheim, NORWAY
 *  http://www.sim.no/ support@sim.no Voice: +47 22114160 Fax: +47 22207097
 *
 **************************************************************************/

// @configure_input@

#if SO@GUI@_DEBUG
static const char rcsid[] =
  "$Id$";
#endif // SO@GUI@_DEBUG

/*!
  \class So@Gui@ConstrainedViewer Inventor/@Gui@/viewers/So@Gui@ConstrainedViewer.h
  \brief The So@Gui@ConstrainedViewer class is the superclass for viewers with constrains on the viewpoint.
  \ingroup components viewers common
*/
// FIXME: document class properly. 20010905 mortene.

#include <Inventor/@Gui@/viewers/So@Gui@ConstrainedViewer.h>
#include <Inventor/errors/SoDebugError.h>
#include <Inventor/nodes/SoCamera.h>
#include <so@gui@defs.h>


// ************************************************************************

class So@Gui@ConstrainedViewerP {
public:
  SbVec3f upvechome;
};

#define PRIVATE( o ) ( o->pimpl )

// ************************************************************************

SO@GUI@_OBJECT_ABSTRACT_SOURCE(So@Gui@ConstrainedViewer);

// ************************************************************************

/*!
  Constructor.
*/
So@Gui@ConstrainedViewer::So@Gui@ConstrainedViewer( // protected
  @WIDGET@ parent,
  const char * const name,
  SbBool embed,
  So@Gui@FullViewer::BuildFlag flag,
  So@Gui@Viewer::Type type,
  SbBool build )
: inherited( parent, name, embed, flag, type, FALSE )
{
  PRIVATE( this ) = new So@Gui@ConstrainedViewerP;

  this->setClassName( "So@Gui@ConstrainedViewer" );
  this->setLeftWheelString( "Tilt" );
  this->setBottomWheelString( "Rotate" );
  this->setRightWheelString( "Dolly" );

  this->sceneHeight = 0.0f;
  this->upVector = SbVec3f( 0.0f, 1.0f, 0.0f );
  PRIVATE( this )->upvechome = this->upVector;

  if ( build ) {
    @WIDGET@ viewer = this->buildWidget( this->getParentWidget() );
    this->setBaseWidget( viewer );
  }
}

// ************************************************************************

/*!
  Virtual destructor.
*/
So@Gui@ConstrainedViewer::~So@Gui@ConstrainedViewer( )
{
  delete PRIVATE( this );
}

// ************************************************************************

/*!
  Set up-direction vector for the camera viewpoint.
*/
void
So@Gui@ConstrainedViewer::setUpDirection(
  const SbVec3f & dir )
{
  this->upVector = dir;
  // FIXME: re-set camera orientation if necessary here? 20010907 mortene.
}

// ************************************************************************

/*!
  Return up-direction vector for the camera viewpoint.
*/
const SbVec3f &
So@Gui@ConstrainedViewer::getUpDirection( void ) const
{
  return this->upVector;
}

// ************************************************************************

// doc in super
void
So@Gui@ConstrainedViewer::setCamera( // virtual
  SoCamera * newcam )
{
  inherited::setCamera( newcam );
  // FIXME: enforce upvector. 20010905 mortene.
}

// ************************************************************************

// doc in super
void
So@Gui@ConstrainedViewer::saveHomePosition( // virtual
  void )
{
  inherited::saveHomePosition();
  PRIVATE( this )->upvechome = this->upVector;
}

// ************************************************************************

// doc in super
void
So@Gui@ConstrainedViewer::resetToHomePosition( // virtual
  void )
{
  inherited::resetToHomePosition();
  this->upVector = PRIVATE( this )->upvechome;
  // should be unnecessary to reset camera position here (camera
  // should have been in a valid state on the last saveHomePosition()
  // call)
}

// ************************************************************************

/*!
  FIXME: doc
*/
void
So@Gui@ConstrainedViewer::recomputeSceneSize( // virtual
  void )
{
  SO@GUI@_STUB();  // FIXME: re-calculate sceneHeight value. 20010907 mortene.
  inherited::recomputeSceneSize();
}

// ************************************************************************

/*!
  This method tilts the camera \a delta degrees closer to the up
  direction.
*/
void
So@Gui@ConstrainedViewer::tiltCamera( // virtual, protected
  float delta )
{
  SoCamera * const camera = this->getCamera();
  if ( camera == NULL ) { return; } // if there's no scenegraph, for instance

  SbVec3f camdir;
  camera->orientation.getValue().multVec( SbVec3f( 0, 0, -1 ), camdir );
  camera->orientation = camera->orientation.getValue() *
    SbRotation( this->getUpDirection().cross( camdir ), delta );
}

// ************************************************************************

/*!
  FIXME: doc
*/
void
So@Gui@ConstrainedViewer::bottomWheelMotion( // virtual, protected
  float value )
{
  this->rotateCamera( value - this->getBottomWheelValue() );
  inherited::bottomWheelMotion( value );
}

// ************************************************************************

/*!
  FIXME: doc
*/
void
So@Gui@ConstrainedViewer::leftWheelMotion( // virtual, protected
  float value )
{
  this->tiltCamera( value - this->getLeftWheelValue() );
  inherited::leftWheelMotion( value );
}

// ************************************************************************

/*!
  FIXME: doc
*/
void
So@Gui@ConstrainedViewer::changeCameraValues( // virtual, protected
  SoCamera * camera )
{
  SO@GUI@_STUB();
}

// ************************************************************************

/*!
  FIXME: doc
*/
void
So@Gui@ConstrainedViewer::findUpDirection(
  SbVec2s mouselocation )
{
  SO@GUI@_STUB();
  // FIXME: pick on point, set upVector to normal of picked polygon
}

// ************************************************************************

/*!
  FIXME: doc
*/
void
So@Gui@ConstrainedViewer::checkForCameraUpConstrain(
  void )
{
  SO@GUI@_STUB();
}

// ************************************************************************

/*!
  FIXME: doc
*/
void
So@Gui@ConstrainedViewer::computeSeekFinalOrientation( // virtual, protected
  void )
{
  SO@GUI@_STUB();
}

// ************************************************************************

// private
void
So@Gui@ConstrainedViewer::rotateCamera( const float delta ) const
{
  SoCamera * const camera = this->getCamera();
  if ( camera == NULL ) { return; } // if there's no scenegraph, for instance

  camera->orientation = camera->orientation.getValue() *
    SbRotation( this->getUpDirection(), -delta );
}

// ************************************************************************
