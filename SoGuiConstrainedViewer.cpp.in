/**************************************************************************
 *
 *  This file is part of the Coin GUI binding libraries.
 *  Copyright (C) 2000 by Systems in Motion.  All rights reserved.
 *
 *  The libraries this file is part of is free software; you can
 *  redistribute them and/or modify them under the terms of the GNU
 *  Lesser General Public License version 2.1 as published by the
 *  Free Software Foundation.  See the file LICENSE.LGPL at the root
 *  directory of the distribution for all the details.
 *
 *  If you want to use the Coin GUI binding libraries for applications
 *  not compatible with the LGPL, contact SIM about acquiring a
 *  Professional Edition License.
 *
 *  Systems in Motion, Prof Brochs gate 6, N-7030 Trondheim, NORWAY
 *  http://www.sim.no/ support@sim.no Voice: +47 22114160 Fax: +47 22207097
 *
 **************************************************************************/

// @configure_input@

#if SO@GUI@_DEBUG
static const char rcsid[] =
  "$Id$";
#endif // SO@GUI@_DEBUG

/*!
  \class So@Gui@ConstrainedViewer Inventor/@Gui@/viewers/So@Gui@ConstrainedViewer.h
  \brief The So@Gui@ConstrainedViewer class FIXME: document
  \ingroup components viewers common
*/
// FIXME: document class properly. 20010905 mortene.

#include <Inventor/errors/SoDebugError.h>
#include <so@gui@defs.h>
#include <Inventor/@Gui@/viewers/So@Gui@ConstrainedViewer.h>


// ************************************************************************

class So@Gui@ConstrainedViewerP {
public:
  SbVec3f upvechome;
};

#define PRIVATE( o ) ( o->pimpl )

// ************************************************************************

SO@GUI@_OBJECT_ABSTRACT_SOURCE(So@Gui@ConstrainedViewer);

// ************************************************************************

/*!
  Constructor.
*/

So@Gui@ConstrainedViewer::So@Gui@ConstrainedViewer( // protected
  @WIDGET@ parent,
  const char * const name,
  SbBool embed,
  So@Gui@FullViewer::BuildFlag flag,
  So@Gui@Viewer::Type type,
  SbBool build )
: inherited( parent, name, embed, flag, type, FALSE )
{
  PRIVATE( this ) = new So@Gui@ConstrainedViewerP;

  this->setClassName( "So@Gui@ConstrainedViewer" );

  this->sceneHeight = 0.0f;
  this->upVector = SbVec3f( 0.0f, 1.0f, 0.0f );
  PRIVATE( this )->upvechome = this->upVector;

  if ( build ) {
    @WIDGET@ viewer = this->buildWidget( this->getParentWidget() );
    this->setBaseWidget( viewer );
  }
} // So@Gui@ConstainedViewer()

// ************************************************************************

/*!
  The destructor.
*/

So@Gui@ConstrainedViewer::~So@Gui@ConstrainedViewer( // virtual
  void )
{
  delete PRIVATE( this );
} // ~So@Gui@ConstarinedViewer()

// ************************************************************************

/*!
  FIXME: doc
*/

void
So@Gui@ConstrainedViewer::setUpDirection(
  const SbVec3f & upDirection )
{
  this->upVector = upDirection;
} // setUpDirection()

// ************************************************************************

/*!
  FIXME: doc
*/

const SbVec3f &
So@Gui@ConstrainedViewer::getUpDirection(
  void )
{
  return this->upVector;
} // getUpDirection()

// ************************************************************************

// doc in super
void
So@Gui@ConstrainedViewer::setCamera( // virtual
  SoCamera * newCamera )
{
  inherited::setCamera( newCamera );
  // FIXME: enforce upvector. 20010905 mortene.
} // setCamera()

// ************************************************************************

// doc in super
void
So@Gui@ConstrainedViewer::saveHomePosition( // virtual
  void )
{
  inherited::saveHomePosition();
  PRIVATE( this )->upvechome = this->upVector;
} // saveHomePosition()

// ************************************************************************

// doc in super
void
So@Gui@ConstrainedViewer::resetToHomePosition( // virtual
  void )
{
  inherited::resetToHomePosition();
  this->upVector = PRIVATE( this )->upvechome;
} // resetToHomePosition()

// ************************************************************************

/*!
*/

void
So@Gui@ConstrainedViewer::recomputeSceneSize( // virtual
  void )
{
  SO@GUI@_STUB();
} // recomputeSceneGraph()

// ************************************************************************

/*!
  aka upperLeftWheelMotion() ;)
*/

void
So@Gui@ConstrainedViewer::tiltCamera( // virtual, protected
  float delta )
{
  SO@GUI@_STUB();
} // tiltCamera()

// ************************************************************************

/*!
*/

void
So@Gui@ConstrainedViewer::bottomWheelMotion( // virtual, protected
  float value )
{
  SO@GUI@_STUB();
} // bottomWheelMotion()

// ************************************************************************

/*!
*/

void
So@Gui@ConstrainedViewer::leftWheelMotion( // virtual, protected
  float value )
{
//  SoAnyConstrainedViewer::elevation( );
  SO@GUI@_STUB();
} // leftWheelMotion()

// ************************************************************************

/*!
*/

void
So@Gui@ConstrainedViewer::changeCameraValues( // virtual, protected
  SoCamera * camera )
{
  SO@GUI@_STUB();
} // changeCameraValues()

// ************************************************************************

/*!
*/

void
So@Gui@ConstrainedViewer::findUpDirection(
  SbVec2s mouseLocation )
{
  SO@GUI@_STUB();
  // pick on point, set upVector to normal of picked polygon
} // findUpDirection()

// ************************************************************************

/*!
*/

void
So@Gui@ConstrainedViewer::checkForCameraUpConstrain(
  void )
{
  SO@GUI@_STUB();
} // checkForCameraUpConstrain()

// ************************************************************************

/*!
*/

void
So@Gui@ConstrainedViewer::computeSeekFinalOrientation( // virtual, protected
  void )
{
  SO@GUI@_STUB();
} // computeSeekFinalOrientation()

// ************************************************************************
