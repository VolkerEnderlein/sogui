/**************************************************************************
 *
 *  This file is part of the Coin GUI binding libraries.
 *  Copyright (C) 2000 by Systems in Motion.  All rights reserved.
 *
 *  The libraries this file is part of is free software; you can
 *  redistribute them and/or modify them under the terms of the GNU
 *  Lesser General Public License version 2.1 as published by the
 *  Free Software Foundation.  See the file LICENSE.LGPL at the root
 *  directory of the distribution for all the details.
 *
 *  If you want to use the Coin GUI binding libraries for applications
 *  not compatible with the LGPL, contact SIM about acquiring a
 *  Professional Edition License.
 *
 *  Systems in Motion, Prof Brochs gate 6, N-7030 Trondheim, NORWAY
 *  http://www.sim.no/ support@sim.no Voice: +47 22114160 Fax: +47 22207097
 *
 **************************************************************************/

// @configure_input@

#if SO@GUI@_DEBUG
static const char rcsid[] =
  "$Id$";
#endif // SO@GUI@_DEBUG

/*!
  \class SoAnyWalkViewer SoAnyWalkViewer.h
  \brief The SoAnyWalkViewer class is a collection of common functions
  for all the WalkViewer components for Coin.
  \ingroup common
*/

#if HAVE_CONFIG_H
#include <config.h>
#endif

#include <assert.h>

#include <Inventor/errors/SoDebugError.h>
#include <Inventor/SbLinear.h>
#include <Inventor/nodes/SoCamera.h>

#include <so@gui@defs.h>
#include <Inventor/@Gui@/viewers/SoAnyWalkViewer.h>
#include <Inventor/@Gui@/viewers/So@Gui@WalkViewer.h>

// ************************************************************************

/*!
*/

SoAnyWalkViewer::SoAnyWalkViewer(
  So@Gui@WalkViewer * const v)
: viewer(v)
{
  assert(v != NULL);
} // SoAnyWalkViewer()

/*!
*/

SoAnyWalkViewer::~SoAnyWalkViewer(
  void)
{
} // ~SoAnyWalkViewer()

// *************************************************************************

/*!
  This method dollies the camera back and forth in the scene.
*/

void
SoAnyWalkViewer::dollyCamera(
  const float delta) const
{
  SoCamera * const camera = this->viewer->getCamera();
  if (camera == NULL) { return; } // if there's no scenegraph, for instance

  SbPlane walkplane(this->viewer->getUpDirection(), camera->position.getValue());
  SbVec3f campos = camera->position.getValue();
  SbVec3f camvec;
  camera->orientation.getValue().multVec(SbVec3f(0, 0, -1), camvec);
  SbLine cross(campos + camvec,
                campos + camvec + this->viewer->getUpDirection());
  SbVec3f intersect;
  walkplane.intersect(cross, intersect);
  SbVec3f dir = intersect - campos;
  dir.normalize();

  camera->position = campos - dir * delta;
} // dollyCamera()

/*!
  This method elevates the camera up and down.
*/

void
SoAnyWalkViewer::elevateCamera(
  const float delta) const
{
  SoCamera * const camera = this->viewer->getCamera();
  if (camera == NULL) { return; } // if there's no scenegraph, for instance

  SbVec3f up = this->viewer->getUpDirection();
  up.normalize();
  camera->position = camera->position.getValue() - up * delta;
} // elevateCamera()

// *************************************************************************

SbBool
SoAnyWalkViewer::processSoEvent(
  const SoEvent * const event)
{
  return FALSE;
} // processSoEvent()

// *************************************************************************

#if SO@GUI@_DEBUG
static const char * getSoAnyWalkViewerRCSId(void) { return rcsid; }
#endif // SO@GUI@_DEBUG

