/**************************************************************************\
 *
 *  Copyright (C) 2000 by Systems in Motion.  All rights reserved.
 *
 *  This file is part of the Coin library.
 *
 *  This file may be distributed under the terms of the Q Public License
 *  as defined by Troll Tech AS of Norway and appearing in the file
 *  LICENSE.QPL included in the packaging of this file.
 *
 *  If you want to use Coin in applications not covered by licenses
 *  compatible with the QPL, you can contact SIM to aquire a
 *  Professional Edition license for Coin.
 *
 *  Systems in Motion AS, Prof. Brochs gate 6, N-7030 Trondheim, NORWAY
 *  http://www.sim.no/ sales@sim.no Voice: +47 22114160 Fax: +47 67172912
 *
\**************************************************************************/

// @configure_input@

#if SO@GUI@_DEBUG
static const char rcsid[] =
  "$Id$";
#endif // SO@GUI@_DEBUG

/*!
  \class SoAnyWalkViewer SoAnyWalkViewer.h
  \brief The SoAnyWalkViewer class is a collection of common functions
  for all the WalkViewer components for Coin.
  \ingroup common
*/

#include <assert.h>

#include <Inventor/errors/SoDebugError.h>
#include <Inventor/SbLinear.h>
#include <Inventor/nodes/SoCamera.h>

#include <Inventor/@Gui@/viewers/SoAnyWalkViewer.h>
#include <Inventor/@Gui@/viewers/So@Gui@WalkViewer.h>

// ************************************************************************

/*!
*/

SoAnyWalkViewer::SoAnyWalkViewer(
  So@Gui@WalkViewer * const _viewer )
: viewer( _viewer )
{
  assert( _viewer != NULL );
} // SoAnyWalkViewer()

/*!
*/

SoAnyWalkViewer::~SoAnyWalkViewer(
  void )
{
} // ~SoAnyWalkViewer()

// *************************************************************************

/*!
  This method dollies the camera back and forth in the scene.
*/

void
SoAnyWalkViewer::dollyCamera(
  const float delta ) const
{
  SoCamera * const camera = viewer->getCamera();
  assert( camera != NULL );
  SbPlane walkplane( viewer->getUpDirection(), camera->position.getValue() );
  SbVec3f campos = camera->position.getValue();
  SbVec3f camvec;
  camera->orientation.getValue().multVec( SbVec3f( 0, 0, -1 ), camvec );
  SbLine cross( campos + camvec,
                campos + camvec + viewer->getUpDirection() );
  SbVec3f intersect;
  walkplane.intersect( cross, intersect );
  SbVec3f dir = intersect - campos;
  dir.normalize();

  camera->position = campos - dir * delta;
} // dollyCamera()

/*!
  This method elevates the camera up and down.
*/

void
SoAnyWalkViewer::elevateCamera(
  const float delta ) const
{
  SoCamera * const camera = viewer->getCamera();
  assert( camera != NULL );
  SbVec3f up = viewer->getUpDirection();
  up.normalize();
  camera->position = camera->position.getValue() - up * delta;
} // elevateCamera()

// *************************************************************************

SbBool
SoAnyWalkViewer::processSoEvent(
  SoEvent * const event )
{
  return FALSE;
} // processSoEvent()

// *************************************************************************

#if SO@GUI@_DEBUG
static const char * getSoAnyWalkViewerRCSId(void) { return rcsid; }
#endif // SO@GUI@_DEBUG

