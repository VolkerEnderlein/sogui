/**************************************************************************\
 *
 *  This file is part of the Coin family of 3D visualization libraries.
 *  Copyright (C) 1998-2002 by Systems in Motion.  All rights reserved.
 *
 *  This library is free software; you can redistribute it and / or
 *  modify it under the terms of the GNU General Public License
 *  version 2 as published by the Free Software Foundation.  See the
 *  file LICENSE.GPL at the root directory of this source distribution
 *  for more details.
 *
 *  If you desire to use this library in software that is incompatible
 *  with the GNU GPL, and / or you would like to take advantage of the
 *  additional benefits with regard to our support services, please
 *  contact Systems in Motion about acquiring a Coin Professional
 *  Edition License.  See <URL:http://www.coin3d.org> for more
 *  information.
 *
 *  Systems in Motion, Prof Brochs gate 6, 7030 Trondheim, NORWAY
 *  <URL:http://www.sim.no>, <mailto:support@sim.no>
 *
\**************************************************************************/

// @configure_input@

/*!
  \class So@Gui@PopupMenu Inventor/@Gui@/widgets/So@Gui@PopupMenu.h
  \brief The So@Gui@PopupMenu class implements a common interface for popup
  menu management for all the Coin GUI toolkit libraries.

  The point of this class is to enable client code to be exactly the
  same for all GUI libraries, even without being template-based.
*/

#if HAVE_CONFIG_H
#include <config.h>
#endif

#include <assert.h>

#include <Inventor/SoLists.h>
#include <Inventor/errors/SoDebugError.h>

#include <so@gui@defs.h>
#include <Inventor/@Gui@/widgets/So@Gui@PopupMenu.h>
#include <Inventor/@Gui@/widgets/@Gui@NativePopupMenu.h>
#include <Inventor/@Gui@/common/SbGuiList.h>

// *************************************************************************

// Documentation for abstract methods.

/*!
  \fn void So@Gui@PopupMenu::popUp(@WIDGET@ inside, int x, int y)

  Invokes this popup menu instance.

  The coordinates for the popup will be used relative to the origo of
  the widget argument.
*/

// *************************************************************************

// The private data for the So@Gui@PopupMenu.

class So@Gui@PopupMenuP {
public:
  SbGuiList<int> menuitems;
  SbGuiList<int> radiogroups;
  SbPList * callbacks;
  SbPList * userdata;
};


#define PRIVATE(o) (o->pimpl)

// *************************************************************************

/*!
  Instantiation method.

  So@Gui@PopupMenu is implemented with this "factory" method instead of
  a public constructor to provide a completely generic interface on
  top of the toolkit's native popup menu implementation.
*/
So@Gui@PopupMenu *
So@Gui@PopupMenu::createInstance(void)
{
  return new @Gui@NativePopupMenu();
}


/*!
  The class constructor is protected, as So@Gui@PopupMenu uses a factory
  instantiation method.
*/
So@Gui@PopupMenu::So@Gui@PopupMenu(void)
{
  PRIVATE(this) = new So@Gui@PopupMenuP;

  PRIVATE(this)->callbacks = NULL;
  PRIVATE(this)->userdata = NULL;
} // So@Gui@PopupMenu()

/*!
  Destructor.
*/
So@Gui@PopupMenu::~So@Gui@PopupMenu()
{
  delete PRIVATE(this)->callbacks;
  delete PRIVATE(this)->userdata;
} // ~So@Gui@PopupMenu()

// *************************************************************************

/*!
*/

void
So@Gui@PopupMenu::setMenuItemMarked(
  int itemid,
  SbBool marked)
{
  int groupid = this->getRadioGroup(itemid);
  if (groupid == -1) {
    this->_setMenuItemMarked(itemid, marked);
    return;
  }
  const int numGroupedItems = PRIVATE(this)->menuitems.getLength();
  int groupsize = 0;
  int i;
  for (i = 0; i < numGroupedItems; i++) {
    if ((PRIVATE(this)->radiogroups[i] == groupid) &&
         (PRIVATE(this)->menuitems[i] != -1))
      groupsize++;
  }
  if (this->getMenuItemMarked(itemid) == marked) {
#if SO@GUI@_DEBUG && 0
    SoDebugError::postWarning("So@Gui@PopupMenu::SetMenuItemEnabled",
      "Marked state already '%s'.", marked ? "on" : "off");
#endif // SO@GUI@_DEBUG
  } else if (groupsize == 0) {
    assert(0 && "how weird...");
  } else if (groupsize == 1) {
    this->_setMenuItemMarked(itemid, marked);
  } else if ((groupsize == 2) ||
              ((groupsize > 2) && marked)) {
    for (i = 0; i < numGroupedItems; i++) {
      if ((PRIVATE(this)->radiogroups[i] == groupid) &&
           (PRIVATE(this)->menuitems[i] != -1)) {
        this->_setMenuItemMarked(PRIVATE(this)->menuitems[i],
          (PRIVATE(this)->menuitems[i] == itemid) ? marked :
          ((groupsize == 2) ? (! marked) : FALSE));
      }
    }
  } else {
#if SO@GUI@_DEBUG
    SoDebugError::postWarning("So@Gui@PopupMenu::SetMenuItemEnabled",
      "Couldn't handle request.  "
      "Consider that radio grouping is handled automatically.");
#endif // SO@GUI@_DEBUG
  }
} // setMenuItemMarked()

// *************************************************************************

/*!
*/

int
So@Gui@PopupMenu::newRadioGroup(
  int groupid)
{
  const int numGroupedItems = PRIVATE(this)->radiogroups.getLength();
  int id = groupid;
  if (id != -1) {
    SbBool hit = FALSE;
    int i;
    for (i = 0; i < numGroupedItems && hit == FALSE; i++) {
      if (PRIVATE(this)->radiogroups[i] == id)
        hit = TRUE;
    }
    if (hit == TRUE) {
#if SO@GUI@_DEBUG
      SoDebugError::postInfo("So@Gui@PopupMenu::NewRadioGroup",
        "requested group id already taken");
#endif // SO@GUI@_DEBUG
      return -1; 
    }
  } else {
    id = 0;
    SbBool found;
    do {
      id++;
      found = FALSE;
      int i;
      for (i = 0; i < numGroupedItems && found == FALSE; i++) {
        if (PRIVATE(this)->radiogroups[i] == id)
          found = TRUE;
      }
    } while (found == TRUE);
  }
  // id is OK here
  PRIVATE(this)->menuitems.append(-1); // fake menu item
  PRIVATE(this)->radiogroups.append(id); // register id in array
  return id;
} // newRadioGroup()

/*!
*/

int
So@Gui@PopupMenu::getRadioGroup(
  int itemid)
{
  assert(itemid != -1);
  const int numGroupedItems = PRIVATE(this)->radiogroups.getLength();
  int i;
  for (i = 0; i < numGroupedItems; i++) {
    if (PRIVATE(this)->menuitems[i] == itemid)
      return PRIVATE(this)->radiogroups[i];
  }
  return -1;
} // getRadioGroup()

/*!
*/

int
So@Gui@PopupMenu::getRadioGroupSize(
  int groupid)
{
  int count = 0;
  const int numItems = PRIVATE(this)->radiogroups.getLength();
  int i;
  for (i = 0; i < numItems; i++) {
    if (PRIVATE(this)->radiogroups[i] == groupid &&
         PRIVATE(this)->menuitems[i] != -1)
      count++;
  }
  return count;
} // getRadioGroupSize()

/*!
*/

void
So@Gui@PopupMenu::addRadioGroupItem(
  int groupid,
  int itemid)
{
  PRIVATE(this)->menuitems.append(itemid);
  PRIVATE(this)->radiogroups.append(groupid);
} // addRadioGroupItem()

/*!
*/

void
So@Gui@PopupMenu::removeRadioGroupItem(
  int itemid)
{
  assert(itemid != -1);
  const int numGroupedItems = PRIVATE(this)->menuitems.getLength();
  int i;
  for (i = 0; i < numGroupedItems; i++) {
    if (PRIVATE(this)->menuitems[i] == itemid) {
      PRIVATE(this)->menuitems.remove(i);
      PRIVATE(this)->radiogroups.remove(i);
      return;
    }
  }
} // removeRadioGroupItem()

void
So@Gui@PopupMenu::setRadioGroupMarkedItem(
  int itemid)
{
  const int numItems = PRIVATE(this)->menuitems.getLength();
  int i;
  int groupid = -1;
  for (i = 0; i < numItems && groupid == -1; i++) {
    if (PRIVATE(this)->menuitems[i] == itemid)
      groupid = PRIVATE(this)->radiogroups[i];
  }
  if (groupid == -1)
    return;
  for (i = 0; i < numItems; i++) {
    if (PRIVATE(this)->radiogroups[i] == groupid) {
      int item = PRIVATE(this)->menuitems[i];
      if (item != -1 && item != itemid)
        this->setMenuItemMarked(item, FALSE);
    }
  }
} // setRadioGroupItemEnabled()

int
So@Gui@PopupMenu::getRadioGroupMarkedItem(
  int groupid)
{
  const int numItems = PRIVATE(this)->menuitems.getLength();
  int i;
  for (i = 0; i < numItems; i++) {
    if (PRIVATE(this)->radiogroups[i] == groupid) {
      int item = PRIVATE(this)->menuitems[i];
      if (item != -1 && this->getMenuItemMarked(item))
        return item;
    }
  }
  return -1;
} // setRadioGroupItemEnabled()

// *************************************************************************

/*!
*/

void
So@Gui@PopupMenu::addMenuSelectionCallback(
  So@Gui@MenuSelectionCallback * callback,
  void * user)
{
  if (PRIVATE(this)->callbacks == NULL) {
    PRIVATE(this)->callbacks = new SbPList;
    PRIVATE(this)->userdata = new SbPList;
  }
  PRIVATE(this)->callbacks->append((void *) callback);
  PRIVATE(this)->userdata->append(user);
} // addMenuSelectionCallback()

/*!
*/

void
So@Gui@PopupMenu::removeMenuSelectionCallback(
  So@Gui@MenuSelectionCallback * callback,
  void * user)
{
  if (PRIVATE(this)->callbacks == NULL) {
#if SO@GUI@_DEBUG
    SoDebugError::postInfo("So@Gui@PopupMenu::RemoveMenuSelectionCallback",
      "no callbacks at all");
#endif // SO@GUI@_DEBUG
    return;
  }
  int numCallbacks = PRIVATE(this)->callbacks->getLength();
  int i;
  for (i = 0; i < numCallbacks; i++) {
    if ((*PRIVATE(this)->callbacks)[i] == (void *) callback &&
         (*PRIVATE(this)->userdata)[i] == user) {
      PRIVATE(this)->callbacks->remove(i);
      PRIVATE(this)->userdata->remove(i);
      i--;
      numCallbacks--;
    }
  }
} // removeMenuSelectionCallback()

/*!
*/

void
So@Gui@PopupMenu::invokeMenuSelection(
  int itemid)
{
  if (PRIVATE(this)->callbacks == NULL)
    return;
  const int numCallbacks = PRIVATE(this)->callbacks->getLength();
  int i;
  for (i = 0; i < numCallbacks; i++) {
    So@Gui@MenuSelectionCallback * cb = (So@Gui@MenuSelectionCallback *)
      (*PRIVATE(this)->callbacks)[i];
    (*cb)(itemid, (*PRIVATE(this)->userdata)[i]);
  }
} // invokeMenuSelection()

// *************************************************************************

