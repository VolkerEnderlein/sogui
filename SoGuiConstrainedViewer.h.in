/**************************************************************************
 *
 *  This file is part of the Coin GUI binding libraries.
 *  Copyright (C) 2000 by Systems in Motion.  All rights reserved.
 *
 *  The libraries this file is part of is free software; you can
 *  redistribute them and/or modify them under the terms of the GNU
 *  Lesser General Public License version 2.1 as published by the
 *  Free Software Foundation.  See the file LICENSE.LGPL at the root
 *  directory of the distribution for all the details.
 *
 *  If you want to use the Coin GUI binding libraries for applications
 *  not compatible with the LGPL, contact SIM about acquiring a
 *  Professional Edition License.
 *
 *  Systems in Motion, Prof Brochs gate 6, N-7030 Trondheim, NORWAY
 *  http://www.sim.no/ support@sim.no Voice: +47 22114160 Fax: +47 22207097
 *
 **************************************************************************/

// @configure_input@
// $Id$

#ifndef SO@GUI@_CONSTRAINEDVIEWER_H
#define SO@GUI@_CONSTRAINEDVIEWER_H

#include <Inventor/@Gui@/viewers/So@Gui@FullViewer.h>

// ************************************************************************

class SO@GUI@_DLL_API So@Gui@ConstrainedViewer : public So@Gui@FullViewer {
  SO@GUI@_OBJECT_ABSTRACT_HEADER(So@Gui@ConstrainedViewer, So@Gui@FullViewer);
  @COMPONENTHEADER@

public:
  void setUpDirection( const SbVec3f & upDirection );
  const SbVec3f & getUpDirection(void);

  virtual void setCamera( SoCamera * newCamera );
  virtual void saveHomePosition(void);
  virtual void resetToHomePosition(void);
  virtual void recomputeSceneSize(void);

protected:
  So@Gui@ConstrainedViewer(
    @WIDGET@ parent,
    const char * const name,
    SbBool embed,
    So@Gui@FullViewer::BuildFlag flag, 
    So@Gui@Viewer::Type type, 
    SbBool build );

  ~So@Gui@ConstrainedViewer(void);

  SbVec3f upVector;
  float sceneHeight;
  
  virtual void tiltCamera( float delta );
  virtual void bottomWheelMotion( float value );
  virtual void leftWheelMotion( float value );

  virtual void changeCameraValues( SoCamera * camera );
  void findUpDirection( SbVec2s mouseLocation );
  void checkForCameraUpConstrain(void);
  virtual void computeSeekFinalOrientation(void);

private:
  class So@Gui@ConstrainedViewerP * pimpl;

}; // class So@Gui@ConstrainedViewer

// ************************************************************************

#endif // ! SO@GUI@_CONSTRAINEDVIEWER_H
